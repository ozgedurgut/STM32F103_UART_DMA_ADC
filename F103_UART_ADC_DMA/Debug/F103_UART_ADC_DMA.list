
F103_UART_ADC_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003598  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  080036a4  080036a4  000136a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003708  08003708  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08003708  08003708  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003708  08003708  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003708  08003708  00013708  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800370c  0800370c  0001370c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08003710  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000184  20000078  08003788  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001fc  08003788  000201fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008149  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bce  00000000  00000000  000281ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000880  00000000  00000000  00029db8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007c8  00000000  00000000  0002a638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017a72  00000000  00000000  0002ae00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000abcf  00000000  00000000  00042872  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087957  00000000  00000000  0004d441  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d4d98  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002520  00000000  00000000  000d4de8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	0800368c 	.word	0x0800368c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	0800368c 	.word	0x0800368c

0800014c <HAL_UART_TxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	TxBuffer[0]= "0";
 8000154:	4b05      	ldr	r3, [pc, #20]	; (800016c <HAL_UART_TxCpltCallback+0x20>)
 8000156:	b2da      	uxtb	r2, r3
 8000158:	4b05      	ldr	r3, [pc, #20]	; (8000170 <HAL_UART_TxCpltCallback+0x24>)
 800015a:	701a      	strb	r2, [r3, #0]
	HAL_UART_DMA_Tx_Stop(&huart1);
 800015c:	4805      	ldr	r0, [pc, #20]	; (8000174 <HAL_UART_TxCpltCallback+0x28>)
 800015e:	f002 fb57 	bl	8002810 <HAL_UART_DMA_Tx_Stop>
}
 8000162:	bf00      	nop
 8000164:	3708      	adds	r7, #8
 8000166:	46bd      	mov	sp, r7
 8000168:	bd80      	pop	{r7, pc}
 800016a:	bf00      	nop
 800016c:	080036a4 	.word	0x080036a4
 8000170:	20000000 	.word	0x20000000
 8000174:	20000108 	.word	0x20000108

08000178 <HAL_UART_RxCpltCallback>:



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000178:	b480      	push	{r7}
 800017a:	b083      	sub	sp, #12
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
	if(huart == &huart1){
 8000180:	687b      	ldr	r3, [r7, #4]
 8000182:	4a05      	ldr	r2, [pc, #20]	; (8000198 <HAL_UART_RxCpltCallback+0x20>)
 8000184:	4293      	cmp	r3, r2
 8000186:	d102      	bne.n	800018e <HAL_UART_RxCpltCallback+0x16>
		rxCpltFlag =1;
 8000188:	4b04      	ldr	r3, [pc, #16]	; (800019c <HAL_UART_RxCpltCallback+0x24>)
 800018a:	2201      	movs	r2, #1
 800018c:	701a      	strb	r2, [r3, #0]
	}
}
 800018e:	bf00      	nop
 8000190:	370c      	adds	r7, #12
 8000192:	46bd      	mov	sp, r7
 8000194:	bc80      	pop	{r7}
 8000196:	4770      	bx	lr
 8000198:	20000108 	.word	0x20000108
 800019c:	200001dc 	.word	0x200001dc

080001a0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80001a0:	b580      	push	{r7, lr}
 80001a2:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80001a4:	f000 fb82 	bl	80008ac <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80001a8:	f000 f844 	bl	8000234 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80001ac:	f000 f938 	bl	8000420 <MX_GPIO_Init>
	MX_DMA_Init();
 80001b0:	f000 f908 	bl	80003c4 <MX_DMA_Init>
	MX_ADC1_Init();
 80001b4:	f000 f88e 	bl	80002d4 <MX_ADC1_Init>
	MX_USART1_UART_Init();
 80001b8:	f000 f8da 	bl	8000370 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	//HAL_UART_Receive_DMA(&huart1,RxBuffer, 5);

	while(HAL_UART_GetState(&huart1)!= HAL_UART_STATE_READY);
 80001bc:	bf00      	nop
 80001be:	4817      	ldr	r0, [pc, #92]	; (800021c <main+0x7c>)
 80001c0:	f002 fb7f 	bl	80028c2 <HAL_UART_GetState>
 80001c4:	4603      	mov	r3, r0
 80001c6:	2b20      	cmp	r3, #32
 80001c8:	d1f9      	bne.n	80001be <main+0x1e>
	if (HAL_UART_Receive_DMA(&huart1, (uint8_t *)RxBuffer,4)!=HAL_OK){
 80001ca:	2204      	movs	r2, #4
 80001cc:	4914      	ldr	r1, [pc, #80]	; (8000220 <main+0x80>)
 80001ce:	4813      	ldr	r0, [pc, #76]	; (800021c <main+0x7c>)
 80001d0:	f002 faee 	bl	80027b0 <HAL_UART_Receive_DMA>
 80001d4:	4603      	mov	r3, r0
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	d001      	beq.n	80001de <main+0x3e>
		Error_Handler();
 80001da:	f000 f96d 	bl	80004b8 <Error_Handler>
	}

	HAL_ADC_Start_DMA(&hadc1,(uint32_t *)ADCValue,2);
 80001de:	2202      	movs	r2, #2
 80001e0:	4910      	ldr	r1, [pc, #64]	; (8000224 <main+0x84>)
 80001e2:	4811      	ldr	r0, [pc, #68]	; (8000228 <main+0x88>)
 80001e4:	f000 fcc0 	bl	8000b68 <HAL_ADC_Start_DMA>

	HAL_UART_Transmit_DMA(&huart1, TxBuffer, 20);
 80001e8:	2214      	movs	r2, #20
 80001ea:	4910      	ldr	r1, [pc, #64]	; (800022c <main+0x8c>)
 80001ec:	480b      	ldr	r0, [pc, #44]	; (800021c <main+0x7c>)
 80001ee:	f002 fa73 	bl	80026d8 <HAL_UART_Transmit_DMA>
	while (1)
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		HAL_UART_Receive_DMA(&huart1, (uint8_t *)RxBuffer, 4);
 80001f2:	2204      	movs	r2, #4
 80001f4:	490a      	ldr	r1, [pc, #40]	; (8000220 <main+0x80>)
 80001f6:	4809      	ldr	r0, [pc, #36]	; (800021c <main+0x7c>)
 80001f8:	f002 fada 	bl	80027b0 <HAL_UART_Receive_DMA>
		HAL_UART_Transmit_DMA(&huart1, (uint8_t *)TxBuffer,sprintf(TxBuffer,"%d",RxBuffer ));
 80001fc:	4a08      	ldr	r2, [pc, #32]	; (8000220 <main+0x80>)
 80001fe:	490c      	ldr	r1, [pc, #48]	; (8000230 <main+0x90>)
 8000200:	480a      	ldr	r0, [pc, #40]	; (800022c <main+0x8c>)
 8000202:	f002 fdc9 	bl	8002d98 <siprintf>
 8000206:	4603      	mov	r3, r0
 8000208:	b29b      	uxth	r3, r3
 800020a:	461a      	mov	r2, r3
 800020c:	4907      	ldr	r1, [pc, #28]	; (800022c <main+0x8c>)
 800020e:	4803      	ldr	r0, [pc, #12]	; (800021c <main+0x7c>)
 8000210:	f002 fa62 	bl	80026d8 <HAL_UART_Transmit_DMA>


		HAL_Delay(10);
 8000214:	200a      	movs	r0, #10
 8000216:	f000 fbab 	bl	8000970 <HAL_Delay>
		HAL_UART_Receive_DMA(&huart1, (uint8_t *)RxBuffer, 4);
 800021a:	e7ea      	b.n	80001f2 <main+0x52>
 800021c:	20000108 	.word	0x20000108
 8000220:	200001e0 	.word	0x200001e0
 8000224:	200001d4 	.word	0x200001d4
 8000228:	20000094 	.word	0x20000094
 800022c:	20000000 	.word	0x20000000
 8000230:	080036a8 	.word	0x080036a8

08000234 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b094      	sub	sp, #80	; 0x50
 8000238:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800023a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800023e:	2228      	movs	r2, #40	; 0x28
 8000240:	2100      	movs	r1, #0
 8000242:	4618      	mov	r0, r3
 8000244:	f002 fda0 	bl	8002d88 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000248:	f107 0314 	add.w	r3, r7, #20
 800024c:	2200      	movs	r2, #0
 800024e:	601a      	str	r2, [r3, #0]
 8000250:	605a      	str	r2, [r3, #4]
 8000252:	609a      	str	r2, [r3, #8]
 8000254:	60da      	str	r2, [r3, #12]
 8000256:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000258:	1d3b      	adds	r3, r7, #4
 800025a:	2200      	movs	r2, #0
 800025c:	601a      	str	r2, [r3, #0]
 800025e:	605a      	str	r2, [r3, #4]
 8000260:	609a      	str	r2, [r3, #8]
 8000262:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000264:	2302      	movs	r3, #2
 8000266:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000268:	2301      	movs	r3, #1
 800026a:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800026c:	2310      	movs	r3, #16
 800026e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000270:	2300      	movs	r3, #0
 8000272:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000274:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000278:	4618      	mov	r0, r3
 800027a:	f001 fd0f 	bl	8001c9c <HAL_RCC_OscConfig>
 800027e:	4603      	mov	r3, r0
 8000280:	2b00      	cmp	r3, #0
 8000282:	d001      	beq.n	8000288 <SystemClock_Config+0x54>
	{
		Error_Handler();
 8000284:	f000 f918 	bl	80004b8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000288:	230f      	movs	r3, #15
 800028a:	617b      	str	r3, [r7, #20]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800028c:	2300      	movs	r3, #0
 800028e:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000290:	2300      	movs	r3, #0
 8000292:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000294:	2300      	movs	r3, #0
 8000296:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000298:	2300      	movs	r3, #0
 800029a:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800029c:	f107 0314 	add.w	r3, r7, #20
 80002a0:	2100      	movs	r1, #0
 80002a2:	4618      	mov	r0, r3
 80002a4:	f001 ff7c 	bl	80021a0 <HAL_RCC_ClockConfig>
 80002a8:	4603      	mov	r3, r0
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d001      	beq.n	80002b2 <SystemClock_Config+0x7e>
	{
		Error_Handler();
 80002ae:	f000 f903 	bl	80004b8 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80002b2:	2302      	movs	r3, #2
 80002b4:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80002b6:	2300      	movs	r3, #0
 80002b8:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002ba:	1d3b      	adds	r3, r7, #4
 80002bc:	4618      	mov	r0, r3
 80002be:	f002 f907 	bl	80024d0 <HAL_RCCEx_PeriphCLKConfig>
 80002c2:	4603      	mov	r3, r0
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d001      	beq.n	80002cc <SystemClock_Config+0x98>
	{
		Error_Handler();
 80002c8:	f000 f8f6 	bl	80004b8 <Error_Handler>
	}
}
 80002cc:	bf00      	nop
 80002ce:	3750      	adds	r7, #80	; 0x50
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bd80      	pop	{r7, pc}

080002d4 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b084      	sub	sp, #16
 80002d8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 80002da:	1d3b      	adds	r3, r7, #4
 80002dc:	2200      	movs	r2, #0
 80002de:	601a      	str	r2, [r3, #0]
 80002e0:	605a      	str	r2, [r3, #4]
 80002e2:	609a      	str	r2, [r3, #8]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 80002e4:	4b20      	ldr	r3, [pc, #128]	; (8000368 <MX_ADC1_Init+0x94>)
 80002e6:	4a21      	ldr	r2, [pc, #132]	; (800036c <MX_ADC1_Init+0x98>)
 80002e8:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80002ea:	4b1f      	ldr	r3, [pc, #124]	; (8000368 <MX_ADC1_Init+0x94>)
 80002ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80002f0:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = ENABLE;
 80002f2:	4b1d      	ldr	r3, [pc, #116]	; (8000368 <MX_ADC1_Init+0x94>)
 80002f4:	2201      	movs	r2, #1
 80002f6:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002f8:	4b1b      	ldr	r3, [pc, #108]	; (8000368 <MX_ADC1_Init+0x94>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002fe:	4b1a      	ldr	r3, [pc, #104]	; (8000368 <MX_ADC1_Init+0x94>)
 8000300:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000304:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000306:	4b18      	ldr	r3, [pc, #96]	; (8000368 <MX_ADC1_Init+0x94>)
 8000308:	2200      	movs	r2, #0
 800030a:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 2;
 800030c:	4b16      	ldr	r3, [pc, #88]	; (8000368 <MX_ADC1_Init+0x94>)
 800030e:	2202      	movs	r2, #2
 8000310:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000312:	4815      	ldr	r0, [pc, #84]	; (8000368 <MX_ADC1_Init+0x94>)
 8000314:	f000 fb50 	bl	80009b8 <HAL_ADC_Init>
 8000318:	4603      	mov	r3, r0
 800031a:	2b00      	cmp	r3, #0
 800031c:	d001      	beq.n	8000322 <MX_ADC1_Init+0x4e>
	{
		Error_Handler();
 800031e:	f000 f8cb 	bl	80004b8 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8000322:	2300      	movs	r3, #0
 8000324:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000326:	2301      	movs	r3, #1
 8000328:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800032a:	2300      	movs	r3, #0
 800032c:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800032e:	1d3b      	adds	r3, r7, #4
 8000330:	4619      	mov	r1, r3
 8000332:	480d      	ldr	r0, [pc, #52]	; (8000368 <MX_ADC1_Init+0x94>)
 8000334:	f000 fdde 	bl	8000ef4 <HAL_ADC_ConfigChannel>
 8000338:	4603      	mov	r3, r0
 800033a:	2b00      	cmp	r3, #0
 800033c:	d001      	beq.n	8000342 <MX_ADC1_Init+0x6e>
	{
		Error_Handler();
 800033e:	f000 f8bb 	bl	80004b8 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 8000342:	2301      	movs	r3, #1
 8000344:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 8000346:	2302      	movs	r3, #2
 8000348:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800034a:	1d3b      	adds	r3, r7, #4
 800034c:	4619      	mov	r1, r3
 800034e:	4806      	ldr	r0, [pc, #24]	; (8000368 <MX_ADC1_Init+0x94>)
 8000350:	f000 fdd0 	bl	8000ef4 <HAL_ADC_ConfigChannel>
 8000354:	4603      	mov	r3, r0
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <MX_ADC1_Init+0x8a>
	{
		Error_Handler();
 800035a:	f000 f8ad 	bl	80004b8 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 800035e:	bf00      	nop
 8000360:	3710      	adds	r7, #16
 8000362:	46bd      	mov	sp, r7
 8000364:	bd80      	pop	{r7, pc}
 8000366:	bf00      	nop
 8000368:	20000094 	.word	0x20000094
 800036c:	40012400 	.word	0x40012400

08000370 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000374:	4b11      	ldr	r3, [pc, #68]	; (80003bc <MX_USART1_UART_Init+0x4c>)
 8000376:	4a12      	ldr	r2, [pc, #72]	; (80003c0 <MX_USART1_UART_Init+0x50>)
 8000378:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 800037a:	4b10      	ldr	r3, [pc, #64]	; (80003bc <MX_USART1_UART_Init+0x4c>)
 800037c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000380:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000382:	4b0e      	ldr	r3, [pc, #56]	; (80003bc <MX_USART1_UART_Init+0x4c>)
 8000384:	2200      	movs	r2, #0
 8000386:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000388:	4b0c      	ldr	r3, [pc, #48]	; (80003bc <MX_USART1_UART_Init+0x4c>)
 800038a:	2200      	movs	r2, #0
 800038c:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800038e:	4b0b      	ldr	r3, [pc, #44]	; (80003bc <MX_USART1_UART_Init+0x4c>)
 8000390:	2200      	movs	r2, #0
 8000392:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000394:	4b09      	ldr	r3, [pc, #36]	; (80003bc <MX_USART1_UART_Init+0x4c>)
 8000396:	220c      	movs	r2, #12
 8000398:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800039a:	4b08      	ldr	r3, [pc, #32]	; (80003bc <MX_USART1_UART_Init+0x4c>)
 800039c:	2200      	movs	r2, #0
 800039e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003a0:	4b06      	ldr	r3, [pc, #24]	; (80003bc <MX_USART1_UART_Init+0x4c>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 80003a6:	4805      	ldr	r0, [pc, #20]	; (80003bc <MX_USART1_UART_Init+0x4c>)
 80003a8:	f002 f948 	bl	800263c <HAL_UART_Init>
 80003ac:	4603      	mov	r3, r0
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d001      	beq.n	80003b6 <MX_USART1_UART_Init+0x46>
	{
		Error_Handler();
 80003b2:	f000 f881 	bl	80004b8 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80003b6:	bf00      	nop
 80003b8:	bd80      	pop	{r7, pc}
 80003ba:	bf00      	nop
 80003bc:	20000108 	.word	0x20000108
 80003c0:	40013800 	.word	0x40013800

080003c4 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b082      	sub	sp, #8
 80003c8:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 80003ca:	4b14      	ldr	r3, [pc, #80]	; (800041c <MX_DMA_Init+0x58>)
 80003cc:	695b      	ldr	r3, [r3, #20]
 80003ce:	4a13      	ldr	r2, [pc, #76]	; (800041c <MX_DMA_Init+0x58>)
 80003d0:	f043 0301 	orr.w	r3, r3, #1
 80003d4:	6153      	str	r3, [r2, #20]
 80003d6:	4b11      	ldr	r3, [pc, #68]	; (800041c <MX_DMA_Init+0x58>)
 80003d8:	695b      	ldr	r3, [r3, #20]
 80003da:	f003 0301 	and.w	r3, r3, #1
 80003de:	607b      	str	r3, [r7, #4]
 80003e0:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80003e2:	2200      	movs	r2, #0
 80003e4:	2100      	movs	r1, #0
 80003e6:	200b      	movs	r0, #11
 80003e8:	f001 f85d 	bl	80014a6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80003ec:	200b      	movs	r0, #11
 80003ee:	f001 f876 	bl	80014de <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80003f2:	2200      	movs	r2, #0
 80003f4:	2100      	movs	r1, #0
 80003f6:	200e      	movs	r0, #14
 80003f8:	f001 f855 	bl	80014a6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80003fc:	200e      	movs	r0, #14
 80003fe:	f001 f86e 	bl	80014de <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000402:	2200      	movs	r2, #0
 8000404:	2100      	movs	r1, #0
 8000406:	200f      	movs	r0, #15
 8000408:	f001 f84d 	bl	80014a6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800040c:	200f      	movs	r0, #15
 800040e:	f001 f866 	bl	80014de <HAL_NVIC_EnableIRQ>

}
 8000412:	bf00      	nop
 8000414:	3708      	adds	r7, #8
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}
 800041a:	bf00      	nop
 800041c:	40021000 	.word	0x40021000

08000420 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b088      	sub	sp, #32
 8000424:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000426:	f107 0310 	add.w	r3, r7, #16
 800042a:	2200      	movs	r2, #0
 800042c:	601a      	str	r2, [r3, #0]
 800042e:	605a      	str	r2, [r3, #4]
 8000430:	609a      	str	r2, [r3, #8]
 8000432:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000434:	4b1e      	ldr	r3, [pc, #120]	; (80004b0 <MX_GPIO_Init+0x90>)
 8000436:	699b      	ldr	r3, [r3, #24]
 8000438:	4a1d      	ldr	r2, [pc, #116]	; (80004b0 <MX_GPIO_Init+0x90>)
 800043a:	f043 0320 	orr.w	r3, r3, #32
 800043e:	6193      	str	r3, [r2, #24]
 8000440:	4b1b      	ldr	r3, [pc, #108]	; (80004b0 <MX_GPIO_Init+0x90>)
 8000442:	699b      	ldr	r3, [r3, #24]
 8000444:	f003 0320 	and.w	r3, r3, #32
 8000448:	60fb      	str	r3, [r7, #12]
 800044a:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800044c:	4b18      	ldr	r3, [pc, #96]	; (80004b0 <MX_GPIO_Init+0x90>)
 800044e:	699b      	ldr	r3, [r3, #24]
 8000450:	4a17      	ldr	r2, [pc, #92]	; (80004b0 <MX_GPIO_Init+0x90>)
 8000452:	f043 0304 	orr.w	r3, r3, #4
 8000456:	6193      	str	r3, [r2, #24]
 8000458:	4b15      	ldr	r3, [pc, #84]	; (80004b0 <MX_GPIO_Init+0x90>)
 800045a:	699b      	ldr	r3, [r3, #24]
 800045c:	f003 0304 	and.w	r3, r3, #4
 8000460:	60bb      	str	r3, [r7, #8]
 8000462:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000464:	4b12      	ldr	r3, [pc, #72]	; (80004b0 <MX_GPIO_Init+0x90>)
 8000466:	699b      	ldr	r3, [r3, #24]
 8000468:	4a11      	ldr	r2, [pc, #68]	; (80004b0 <MX_GPIO_Init+0x90>)
 800046a:	f043 0308 	orr.w	r3, r3, #8
 800046e:	6193      	str	r3, [r2, #24]
 8000470:	4b0f      	ldr	r3, [pc, #60]	; (80004b0 <MX_GPIO_Init+0x90>)
 8000472:	699b      	ldr	r3, [r3, #24]
 8000474:	f003 0308 	and.w	r3, r3, #8
 8000478:	607b      	str	r3, [r7, #4]
 800047a:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_10, GPIO_PIN_RESET);
 800047c:	2200      	movs	r2, #0
 800047e:	f240 4104 	movw	r1, #1028	; 0x404
 8000482:	480c      	ldr	r0, [pc, #48]	; (80004b4 <MX_GPIO_Init+0x94>)
 8000484:	f001 fbf2 	bl	8001c6c <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PB2 PB10 */
	GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10;
 8000488:	f240 4304 	movw	r3, #1028	; 0x404
 800048c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800048e:	2301      	movs	r3, #1
 8000490:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000492:	2300      	movs	r3, #0
 8000494:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000496:	2302      	movs	r3, #2
 8000498:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800049a:	f107 0310 	add.w	r3, r7, #16
 800049e:	4619      	mov	r1, r3
 80004a0:	4804      	ldr	r0, [pc, #16]	; (80004b4 <MX_GPIO_Init+0x94>)
 80004a2:	f001 fa5f 	bl	8001964 <HAL_GPIO_Init>

}
 80004a6:	bf00      	nop
 80004a8:	3720      	adds	r7, #32
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bd80      	pop	{r7, pc}
 80004ae:	bf00      	nop
 80004b0:	40021000 	.word	0x40021000
 80004b4:	40010c00 	.word	0x40010c00

080004b8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004bc:	b672      	cpsid	i
}
 80004be:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80004c0:	e7fe      	b.n	80004c0 <Error_Handler+0x8>
	...

080004c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	b085      	sub	sp, #20
 80004c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004ca:	4b15      	ldr	r3, [pc, #84]	; (8000520 <HAL_MspInit+0x5c>)
 80004cc:	699b      	ldr	r3, [r3, #24]
 80004ce:	4a14      	ldr	r2, [pc, #80]	; (8000520 <HAL_MspInit+0x5c>)
 80004d0:	f043 0301 	orr.w	r3, r3, #1
 80004d4:	6193      	str	r3, [r2, #24]
 80004d6:	4b12      	ldr	r3, [pc, #72]	; (8000520 <HAL_MspInit+0x5c>)
 80004d8:	699b      	ldr	r3, [r3, #24]
 80004da:	f003 0301 	and.w	r3, r3, #1
 80004de:	60bb      	str	r3, [r7, #8]
 80004e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004e2:	4b0f      	ldr	r3, [pc, #60]	; (8000520 <HAL_MspInit+0x5c>)
 80004e4:	69db      	ldr	r3, [r3, #28]
 80004e6:	4a0e      	ldr	r2, [pc, #56]	; (8000520 <HAL_MspInit+0x5c>)
 80004e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004ec:	61d3      	str	r3, [r2, #28]
 80004ee:	4b0c      	ldr	r3, [pc, #48]	; (8000520 <HAL_MspInit+0x5c>)
 80004f0:	69db      	ldr	r3, [r3, #28]
 80004f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004f6:	607b      	str	r3, [r7, #4]
 80004f8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004fa:	4b0a      	ldr	r3, [pc, #40]	; (8000524 <HAL_MspInit+0x60>)
 80004fc:	685b      	ldr	r3, [r3, #4]
 80004fe:	60fb      	str	r3, [r7, #12]
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000506:	60fb      	str	r3, [r7, #12]
 8000508:	68fb      	ldr	r3, [r7, #12]
 800050a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800050e:	60fb      	str	r3, [r7, #12]
 8000510:	4a04      	ldr	r2, [pc, #16]	; (8000524 <HAL_MspInit+0x60>)
 8000512:	68fb      	ldr	r3, [r7, #12]
 8000514:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000516:	bf00      	nop
 8000518:	3714      	adds	r7, #20
 800051a:	46bd      	mov	sp, r7
 800051c:	bc80      	pop	{r7}
 800051e:	4770      	bx	lr
 8000520:	40021000 	.word	0x40021000
 8000524:	40010000 	.word	0x40010000

08000528 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b088      	sub	sp, #32
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000530:	f107 0310 	add.w	r3, r7, #16
 8000534:	2200      	movs	r2, #0
 8000536:	601a      	str	r2, [r3, #0]
 8000538:	605a      	str	r2, [r3, #4]
 800053a:	609a      	str	r2, [r3, #8]
 800053c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	4a2c      	ldr	r2, [pc, #176]	; (80005f4 <HAL_ADC_MspInit+0xcc>)
 8000544:	4293      	cmp	r3, r2
 8000546:	d151      	bne.n	80005ec <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000548:	4b2b      	ldr	r3, [pc, #172]	; (80005f8 <HAL_ADC_MspInit+0xd0>)
 800054a:	699b      	ldr	r3, [r3, #24]
 800054c:	4a2a      	ldr	r2, [pc, #168]	; (80005f8 <HAL_ADC_MspInit+0xd0>)
 800054e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000552:	6193      	str	r3, [r2, #24]
 8000554:	4b28      	ldr	r3, [pc, #160]	; (80005f8 <HAL_ADC_MspInit+0xd0>)
 8000556:	699b      	ldr	r3, [r3, #24]
 8000558:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800055c:	60fb      	str	r3, [r7, #12]
 800055e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000560:	4b25      	ldr	r3, [pc, #148]	; (80005f8 <HAL_ADC_MspInit+0xd0>)
 8000562:	699b      	ldr	r3, [r3, #24]
 8000564:	4a24      	ldr	r2, [pc, #144]	; (80005f8 <HAL_ADC_MspInit+0xd0>)
 8000566:	f043 0304 	orr.w	r3, r3, #4
 800056a:	6193      	str	r3, [r2, #24]
 800056c:	4b22      	ldr	r3, [pc, #136]	; (80005f8 <HAL_ADC_MspInit+0xd0>)
 800056e:	699b      	ldr	r3, [r3, #24]
 8000570:	f003 0304 	and.w	r3, r3, #4
 8000574:	60bb      	str	r3, [r7, #8]
 8000576:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000578:	2303      	movs	r3, #3
 800057a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800057c:	2303      	movs	r3, #3
 800057e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000580:	f107 0310 	add.w	r3, r7, #16
 8000584:	4619      	mov	r1, r3
 8000586:	481d      	ldr	r0, [pc, #116]	; (80005fc <HAL_ADC_MspInit+0xd4>)
 8000588:	f001 f9ec 	bl	8001964 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800058c:	4b1c      	ldr	r3, [pc, #112]	; (8000600 <HAL_ADC_MspInit+0xd8>)
 800058e:	4a1d      	ldr	r2, [pc, #116]	; (8000604 <HAL_ADC_MspInit+0xdc>)
 8000590:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000592:	4b1b      	ldr	r3, [pc, #108]	; (8000600 <HAL_ADC_MspInit+0xd8>)
 8000594:	2200      	movs	r2, #0
 8000596:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000598:	4b19      	ldr	r3, [pc, #100]	; (8000600 <HAL_ADC_MspInit+0xd8>)
 800059a:	2200      	movs	r2, #0
 800059c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800059e:	4b18      	ldr	r3, [pc, #96]	; (8000600 <HAL_ADC_MspInit+0xd8>)
 80005a0:	2280      	movs	r2, #128	; 0x80
 80005a2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80005a4:	4b16      	ldr	r3, [pc, #88]	; (8000600 <HAL_ADC_MspInit+0xd8>)
 80005a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005aa:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80005ac:	4b14      	ldr	r3, [pc, #80]	; (8000600 <HAL_ADC_MspInit+0xd8>)
 80005ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80005b2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80005b4:	4b12      	ldr	r3, [pc, #72]	; (8000600 <HAL_ADC_MspInit+0xd8>)
 80005b6:	2220      	movs	r2, #32
 80005b8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80005ba:	4b11      	ldr	r3, [pc, #68]	; (8000600 <HAL_ADC_MspInit+0xd8>)
 80005bc:	2200      	movs	r2, #0
 80005be:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80005c0:	480f      	ldr	r0, [pc, #60]	; (8000600 <HAL_ADC_MspInit+0xd8>)
 80005c2:	f000 ffa7 	bl	8001514 <HAL_DMA_Init>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80005cc:	f7ff ff74 	bl	80004b8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	4a0b      	ldr	r2, [pc, #44]	; (8000600 <HAL_ADC_MspInit+0xd8>)
 80005d4:	621a      	str	r2, [r3, #32]
 80005d6:	4a0a      	ldr	r2, [pc, #40]	; (8000600 <HAL_ADC_MspInit+0xd8>)
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80005dc:	2200      	movs	r2, #0
 80005de:	2100      	movs	r1, #0
 80005e0:	2012      	movs	r0, #18
 80005e2:	f000 ff60 	bl	80014a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80005e6:	2012      	movs	r0, #18
 80005e8:	f000 ff79 	bl	80014de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80005ec:	bf00      	nop
 80005ee:	3720      	adds	r7, #32
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	40012400 	.word	0x40012400
 80005f8:	40021000 	.word	0x40021000
 80005fc:	40010800 	.word	0x40010800
 8000600:	200000c4 	.word	0x200000c4
 8000604:	40020008 	.word	0x40020008

08000608 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b088      	sub	sp, #32
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000610:	f107 0310 	add.w	r3, r7, #16
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
 8000618:	605a      	str	r2, [r3, #4]
 800061a:	609a      	str	r2, [r3, #8]
 800061c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	4a42      	ldr	r2, [pc, #264]	; (800072c <HAL_UART_MspInit+0x124>)
 8000624:	4293      	cmp	r3, r2
 8000626:	d17d      	bne.n	8000724 <HAL_UART_MspInit+0x11c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000628:	4b41      	ldr	r3, [pc, #260]	; (8000730 <HAL_UART_MspInit+0x128>)
 800062a:	699b      	ldr	r3, [r3, #24]
 800062c:	4a40      	ldr	r2, [pc, #256]	; (8000730 <HAL_UART_MspInit+0x128>)
 800062e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000632:	6193      	str	r3, [r2, #24]
 8000634:	4b3e      	ldr	r3, [pc, #248]	; (8000730 <HAL_UART_MspInit+0x128>)
 8000636:	699b      	ldr	r3, [r3, #24]
 8000638:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800063c:	60fb      	str	r3, [r7, #12]
 800063e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000640:	4b3b      	ldr	r3, [pc, #236]	; (8000730 <HAL_UART_MspInit+0x128>)
 8000642:	699b      	ldr	r3, [r3, #24]
 8000644:	4a3a      	ldr	r2, [pc, #232]	; (8000730 <HAL_UART_MspInit+0x128>)
 8000646:	f043 0304 	orr.w	r3, r3, #4
 800064a:	6193      	str	r3, [r2, #24]
 800064c:	4b38      	ldr	r3, [pc, #224]	; (8000730 <HAL_UART_MspInit+0x128>)
 800064e:	699b      	ldr	r3, [r3, #24]
 8000650:	f003 0304 	and.w	r3, r3, #4
 8000654:	60bb      	str	r3, [r7, #8]
 8000656:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000658:	f44f 7300 	mov.w	r3, #512	; 0x200
 800065c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800065e:	2302      	movs	r3, #2
 8000660:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000662:	2303      	movs	r3, #3
 8000664:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000666:	f107 0310 	add.w	r3, r7, #16
 800066a:	4619      	mov	r1, r3
 800066c:	4831      	ldr	r0, [pc, #196]	; (8000734 <HAL_UART_MspInit+0x12c>)
 800066e:	f001 f979 	bl	8001964 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000672:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000676:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000678:	2300      	movs	r3, #0
 800067a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067c:	2300      	movs	r3, #0
 800067e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000680:	f107 0310 	add.w	r3, r7, #16
 8000684:	4619      	mov	r1, r3
 8000686:	482b      	ldr	r0, [pc, #172]	; (8000734 <HAL_UART_MspInit+0x12c>)
 8000688:	f001 f96c 	bl	8001964 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800068c:	4b2a      	ldr	r3, [pc, #168]	; (8000738 <HAL_UART_MspInit+0x130>)
 800068e:	4a2b      	ldr	r2, [pc, #172]	; (800073c <HAL_UART_MspInit+0x134>)
 8000690:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000692:	4b29      	ldr	r3, [pc, #164]	; (8000738 <HAL_UART_MspInit+0x130>)
 8000694:	2210      	movs	r2, #16
 8000696:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000698:	4b27      	ldr	r3, [pc, #156]	; (8000738 <HAL_UART_MspInit+0x130>)
 800069a:	2200      	movs	r2, #0
 800069c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800069e:	4b26      	ldr	r3, [pc, #152]	; (8000738 <HAL_UART_MspInit+0x130>)
 80006a0:	2280      	movs	r2, #128	; 0x80
 80006a2:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80006a4:	4b24      	ldr	r3, [pc, #144]	; (8000738 <HAL_UART_MspInit+0x130>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80006aa:	4b23      	ldr	r3, [pc, #140]	; (8000738 <HAL_UART_MspInit+0x130>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 80006b0:	4b21      	ldr	r3, [pc, #132]	; (8000738 <HAL_UART_MspInit+0x130>)
 80006b2:	2220      	movs	r2, #32
 80006b4:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80006b6:	4b20      	ldr	r3, [pc, #128]	; (8000738 <HAL_UART_MspInit+0x130>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80006bc:	481e      	ldr	r0, [pc, #120]	; (8000738 <HAL_UART_MspInit+0x130>)
 80006be:	f000 ff29 	bl	8001514 <HAL_DMA_Init>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 80006c8:	f7ff fef6 	bl	80004b8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	4a1a      	ldr	r2, [pc, #104]	; (8000738 <HAL_UART_MspInit+0x130>)
 80006d0:	635a      	str	r2, [r3, #52]	; 0x34
 80006d2:	4a19      	ldr	r2, [pc, #100]	; (8000738 <HAL_UART_MspInit+0x130>)
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80006d8:	4b19      	ldr	r3, [pc, #100]	; (8000740 <HAL_UART_MspInit+0x138>)
 80006da:	4a1a      	ldr	r2, [pc, #104]	; (8000744 <HAL_UART_MspInit+0x13c>)
 80006dc:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006de:	4b18      	ldr	r3, [pc, #96]	; (8000740 <HAL_UART_MspInit+0x138>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80006e4:	4b16      	ldr	r3, [pc, #88]	; (8000740 <HAL_UART_MspInit+0x138>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80006ea:	4b15      	ldr	r3, [pc, #84]	; (8000740 <HAL_UART_MspInit+0x138>)
 80006ec:	2280      	movs	r2, #128	; 0x80
 80006ee:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80006f0:	4b13      	ldr	r3, [pc, #76]	; (8000740 <HAL_UART_MspInit+0x138>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80006f6:	4b12      	ldr	r3, [pc, #72]	; (8000740 <HAL_UART_MspInit+0x138>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80006fc:	4b10      	ldr	r3, [pc, #64]	; (8000740 <HAL_UART_MspInit+0x138>)
 80006fe:	2220      	movs	r2, #32
 8000700:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000702:	4b0f      	ldr	r3, [pc, #60]	; (8000740 <HAL_UART_MspInit+0x138>)
 8000704:	2200      	movs	r2, #0
 8000706:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000708:	480d      	ldr	r0, [pc, #52]	; (8000740 <HAL_UART_MspInit+0x138>)
 800070a:	f000 ff03 	bl	8001514 <HAL_DMA_Init>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <HAL_UART_MspInit+0x110>
    {
      Error_Handler();
 8000714:	f7ff fed0 	bl	80004b8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	4a09      	ldr	r2, [pc, #36]	; (8000740 <HAL_UART_MspInit+0x138>)
 800071c:	639a      	str	r2, [r3, #56]	; 0x38
 800071e:	4a08      	ldr	r2, [pc, #32]	; (8000740 <HAL_UART_MspInit+0x138>)
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000724:	bf00      	nop
 8000726:	3720      	adds	r7, #32
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	40013800 	.word	0x40013800
 8000730:	40021000 	.word	0x40021000
 8000734:	40010800 	.word	0x40010800
 8000738:	2000014c 	.word	0x2000014c
 800073c:	40020044 	.word	0x40020044
 8000740:	20000190 	.word	0x20000190
 8000744:	40020058 	.word	0x40020058

08000748 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800074c:	e7fe      	b.n	800074c <NMI_Handler+0x4>

0800074e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800074e:	b480      	push	{r7}
 8000750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000752:	e7fe      	b.n	8000752 <HardFault_Handler+0x4>

08000754 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000758:	e7fe      	b.n	8000758 <MemManage_Handler+0x4>

0800075a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800075a:	b480      	push	{r7}
 800075c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800075e:	e7fe      	b.n	800075e <BusFault_Handler+0x4>

08000760 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000764:	e7fe      	b.n	8000764 <UsageFault_Handler+0x4>

08000766 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000766:	b480      	push	{r7}
 8000768:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800076a:	bf00      	nop
 800076c:	46bd      	mov	sp, r7
 800076e:	bc80      	pop	{r7}
 8000770:	4770      	bx	lr

08000772 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000772:	b480      	push	{r7}
 8000774:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000776:	bf00      	nop
 8000778:	46bd      	mov	sp, r7
 800077a:	bc80      	pop	{r7}
 800077c:	4770      	bx	lr

0800077e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800077e:	b480      	push	{r7}
 8000780:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000782:	bf00      	nop
 8000784:	46bd      	mov	sp, r7
 8000786:	bc80      	pop	{r7}
 8000788:	4770      	bx	lr

0800078a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800078a:	b580      	push	{r7, lr}
 800078c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800078e:	f000 f8d3 	bl	8000938 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000792:	bf00      	nop
 8000794:	bd80      	pop	{r7, pc}
	...

08000798 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800079c:	4802      	ldr	r0, [pc, #8]	; (80007a8 <DMA1_Channel1_IRQHandler+0x10>)
 800079e:	f000 ffad 	bl	80016fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80007a2:	bf00      	nop
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	200000c4 	.word	0x200000c4

080007ac <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80007b0:	4802      	ldr	r0, [pc, #8]	; (80007bc <DMA1_Channel4_IRQHandler+0x10>)
 80007b2:	f000 ffa3 	bl	80016fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80007b6:	bf00      	nop
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	2000014c 	.word	0x2000014c

080007c0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80007c4:	4802      	ldr	r0, [pc, #8]	; (80007d0 <DMA1_Channel5_IRQHandler+0x10>)
 80007c6:	f000 ff99 	bl	80016fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80007ca:	bf00      	nop
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	20000190 	.word	0x20000190

080007d4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80007d8:	4802      	ldr	r0, [pc, #8]	; (80007e4 <ADC1_2_IRQHandler+0x10>)
 80007da:	f000 faa3 	bl	8000d24 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80007de:	bf00      	nop
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	20000094 	.word	0x20000094

080007e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b086      	sub	sp, #24
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007f0:	4a14      	ldr	r2, [pc, #80]	; (8000844 <_sbrk+0x5c>)
 80007f2:	4b15      	ldr	r3, [pc, #84]	; (8000848 <_sbrk+0x60>)
 80007f4:	1ad3      	subs	r3, r2, r3
 80007f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007f8:	697b      	ldr	r3, [r7, #20]
 80007fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007fc:	4b13      	ldr	r3, [pc, #76]	; (800084c <_sbrk+0x64>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d102      	bne.n	800080a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000804:	4b11      	ldr	r3, [pc, #68]	; (800084c <_sbrk+0x64>)
 8000806:	4a12      	ldr	r2, [pc, #72]	; (8000850 <_sbrk+0x68>)
 8000808:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800080a:	4b10      	ldr	r3, [pc, #64]	; (800084c <_sbrk+0x64>)
 800080c:	681a      	ldr	r2, [r3, #0]
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	4413      	add	r3, r2
 8000812:	693a      	ldr	r2, [r7, #16]
 8000814:	429a      	cmp	r2, r3
 8000816:	d207      	bcs.n	8000828 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000818:	f002 fa8c 	bl	8002d34 <__errno>
 800081c:	4603      	mov	r3, r0
 800081e:	220c      	movs	r2, #12
 8000820:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000822:	f04f 33ff 	mov.w	r3, #4294967295
 8000826:	e009      	b.n	800083c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000828:	4b08      	ldr	r3, [pc, #32]	; (800084c <_sbrk+0x64>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800082e:	4b07      	ldr	r3, [pc, #28]	; (800084c <_sbrk+0x64>)
 8000830:	681a      	ldr	r2, [r3, #0]
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	4413      	add	r3, r2
 8000836:	4a05      	ldr	r2, [pc, #20]	; (800084c <_sbrk+0x64>)
 8000838:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800083a:	68fb      	ldr	r3, [r7, #12]
}
 800083c:	4618      	mov	r0, r3
 800083e:	3718      	adds	r7, #24
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	20005000 	.word	0x20005000
 8000848:	00000400 	.word	0x00000400
 800084c:	200001e4 	.word	0x200001e4
 8000850:	20000200 	.word	0x20000200

08000854 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000858:	bf00      	nop
 800085a:	46bd      	mov	sp, r7
 800085c:	bc80      	pop	{r7}
 800085e:	4770      	bx	lr

08000860 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000860:	480c      	ldr	r0, [pc, #48]	; (8000894 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000862:	490d      	ldr	r1, [pc, #52]	; (8000898 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000864:	4a0d      	ldr	r2, [pc, #52]	; (800089c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000866:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000868:	e002      	b.n	8000870 <LoopCopyDataInit>

0800086a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800086a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800086c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800086e:	3304      	adds	r3, #4

08000870 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000870:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000872:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000874:	d3f9      	bcc.n	800086a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000876:	4a0a      	ldr	r2, [pc, #40]	; (80008a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000878:	4c0a      	ldr	r4, [pc, #40]	; (80008a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800087a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800087c:	e001      	b.n	8000882 <LoopFillZerobss>

0800087e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800087e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000880:	3204      	adds	r2, #4

08000882 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000882:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000884:	d3fb      	bcc.n	800087e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000886:	f7ff ffe5 	bl	8000854 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800088a:	f002 fa59 	bl	8002d40 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800088e:	f7ff fc87 	bl	80001a0 <main>
  bx lr
 8000892:	4770      	bx	lr
  ldr r0, =_sdata
 8000894:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000898:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 800089c:	08003710 	.word	0x08003710
  ldr r2, =_sbss
 80008a0:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80008a4:	200001fc 	.word	0x200001fc

080008a8 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008a8:	e7fe      	b.n	80008a8 <CAN1_RX1_IRQHandler>
	...

080008ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008b0:	4b08      	ldr	r3, [pc, #32]	; (80008d4 <HAL_Init+0x28>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a07      	ldr	r2, [pc, #28]	; (80008d4 <HAL_Init+0x28>)
 80008b6:	f043 0310 	orr.w	r3, r3, #16
 80008ba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008bc:	2003      	movs	r0, #3
 80008be:	f000 fde7 	bl	8001490 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008c2:	200f      	movs	r0, #15
 80008c4:	f000 f808 	bl	80008d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008c8:	f7ff fdfc 	bl	80004c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008cc:	2300      	movs	r3, #0
}
 80008ce:	4618      	mov	r0, r3
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	40022000 	.word	0x40022000

080008d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008e0:	4b12      	ldr	r3, [pc, #72]	; (800092c <HAL_InitTick+0x54>)
 80008e2:	681a      	ldr	r2, [r3, #0]
 80008e4:	4b12      	ldr	r3, [pc, #72]	; (8000930 <HAL_InitTick+0x58>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	4619      	mov	r1, r3
 80008ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80008f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80008f6:	4618      	mov	r0, r3
 80008f8:	f000 fdff 	bl	80014fa <HAL_SYSTICK_Config>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000902:	2301      	movs	r3, #1
 8000904:	e00e      	b.n	8000924 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	2b0f      	cmp	r3, #15
 800090a:	d80a      	bhi.n	8000922 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800090c:	2200      	movs	r2, #0
 800090e:	6879      	ldr	r1, [r7, #4]
 8000910:	f04f 30ff 	mov.w	r0, #4294967295
 8000914:	f000 fdc7 	bl	80014a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000918:	4a06      	ldr	r2, [pc, #24]	; (8000934 <HAL_InitTick+0x5c>)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800091e:	2300      	movs	r3, #0
 8000920:	e000      	b.n	8000924 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000922:	2301      	movs	r3, #1
}
 8000924:	4618      	mov	r0, r3
 8000926:	3708      	adds	r7, #8
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	20000008 	.word	0x20000008
 8000930:	20000010 	.word	0x20000010
 8000934:	2000000c 	.word	0x2000000c

08000938 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800093c:	4b05      	ldr	r3, [pc, #20]	; (8000954 <HAL_IncTick+0x1c>)
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	461a      	mov	r2, r3
 8000942:	4b05      	ldr	r3, [pc, #20]	; (8000958 <HAL_IncTick+0x20>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	4413      	add	r3, r2
 8000948:	4a03      	ldr	r2, [pc, #12]	; (8000958 <HAL_IncTick+0x20>)
 800094a:	6013      	str	r3, [r2, #0]
}
 800094c:	bf00      	nop
 800094e:	46bd      	mov	sp, r7
 8000950:	bc80      	pop	{r7}
 8000952:	4770      	bx	lr
 8000954:	20000010 	.word	0x20000010
 8000958:	200001e8 	.word	0x200001e8

0800095c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  return uwTick;
 8000960:	4b02      	ldr	r3, [pc, #8]	; (800096c <HAL_GetTick+0x10>)
 8000962:	681b      	ldr	r3, [r3, #0]
}
 8000964:	4618      	mov	r0, r3
 8000966:	46bd      	mov	sp, r7
 8000968:	bc80      	pop	{r7}
 800096a:	4770      	bx	lr
 800096c:	200001e8 	.word	0x200001e8

08000970 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b084      	sub	sp, #16
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000978:	f7ff fff0 	bl	800095c <HAL_GetTick>
 800097c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000988:	d005      	beq.n	8000996 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800098a:	4b0a      	ldr	r3, [pc, #40]	; (80009b4 <HAL_Delay+0x44>)
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	461a      	mov	r2, r3
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	4413      	add	r3, r2
 8000994:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000996:	bf00      	nop
 8000998:	f7ff ffe0 	bl	800095c <HAL_GetTick>
 800099c:	4602      	mov	r2, r0
 800099e:	68bb      	ldr	r3, [r7, #8]
 80009a0:	1ad3      	subs	r3, r2, r3
 80009a2:	68fa      	ldr	r2, [r7, #12]
 80009a4:	429a      	cmp	r2, r3
 80009a6:	d8f7      	bhi.n	8000998 <HAL_Delay+0x28>
  {
  }
}
 80009a8:	bf00      	nop
 80009aa:	bf00      	nop
 80009ac:	3710      	adds	r7, #16
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	20000010 	.word	0x20000010

080009b8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b086      	sub	sp, #24
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80009c0:	2300      	movs	r3, #0
 80009c2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80009c4:	2300      	movs	r3, #0
 80009c6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80009c8:	2300      	movs	r3, #0
 80009ca:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80009cc:	2300      	movs	r3, #0
 80009ce:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d101      	bne.n	80009da <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80009d6:	2301      	movs	r3, #1
 80009d8:	e0be      	b.n	8000b58 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	689b      	ldr	r3, [r3, #8]
 80009de:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d109      	bne.n	80009fc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	2200      	movs	r2, #0
 80009ec:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	2200      	movs	r2, #0
 80009f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80009f6:	6878      	ldr	r0, [r7, #4]
 80009f8:	f7ff fd96 	bl	8000528 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80009fc:	6878      	ldr	r0, [r7, #4]
 80009fe:	f000 fbcb 	bl	8001198 <ADC_ConversionStop_Disable>
 8000a02:	4603      	mov	r3, r0
 8000a04:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a0a:	f003 0310 	and.w	r3, r3, #16
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	f040 8099 	bne.w	8000b46 <HAL_ADC_Init+0x18e>
 8000a14:	7dfb      	ldrb	r3, [r7, #23]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	f040 8095 	bne.w	8000b46 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a20:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000a24:	f023 0302 	bic.w	r3, r3, #2
 8000a28:	f043 0202 	orr.w	r2, r3, #2
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a38:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	7b1b      	ldrb	r3, [r3, #12]
 8000a3e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000a40:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a42:	68ba      	ldr	r2, [r7, #8]
 8000a44:	4313      	orrs	r3, r2
 8000a46:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	689b      	ldr	r3, [r3, #8]
 8000a4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a50:	d003      	beq.n	8000a5a <HAL_ADC_Init+0xa2>
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	689b      	ldr	r3, [r3, #8]
 8000a56:	2b01      	cmp	r3, #1
 8000a58:	d102      	bne.n	8000a60 <HAL_ADC_Init+0xa8>
 8000a5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a5e:	e000      	b.n	8000a62 <HAL_ADC_Init+0xaa>
 8000a60:	2300      	movs	r3, #0
 8000a62:	693a      	ldr	r2, [r7, #16]
 8000a64:	4313      	orrs	r3, r2
 8000a66:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	7d1b      	ldrb	r3, [r3, #20]
 8000a6c:	2b01      	cmp	r3, #1
 8000a6e:	d119      	bne.n	8000aa4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	7b1b      	ldrb	r3, [r3, #12]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d109      	bne.n	8000a8c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	699b      	ldr	r3, [r3, #24]
 8000a7c:	3b01      	subs	r3, #1
 8000a7e:	035a      	lsls	r2, r3, #13
 8000a80:	693b      	ldr	r3, [r7, #16]
 8000a82:	4313      	orrs	r3, r2
 8000a84:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a88:	613b      	str	r3, [r7, #16]
 8000a8a:	e00b      	b.n	8000aa4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a90:	f043 0220 	orr.w	r2, r3, #32
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a9c:	f043 0201 	orr.w	r2, r3, #1
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	685b      	ldr	r3, [r3, #4]
 8000aaa:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	693a      	ldr	r2, [r7, #16]
 8000ab4:	430a      	orrs	r2, r1
 8000ab6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	689a      	ldr	r2, [r3, #8]
 8000abe:	4b28      	ldr	r3, [pc, #160]	; (8000b60 <HAL_ADC_Init+0x1a8>)
 8000ac0:	4013      	ands	r3, r2
 8000ac2:	687a      	ldr	r2, [r7, #4]
 8000ac4:	6812      	ldr	r2, [r2, #0]
 8000ac6:	68b9      	ldr	r1, [r7, #8]
 8000ac8:	430b      	orrs	r3, r1
 8000aca:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	689b      	ldr	r3, [r3, #8]
 8000ad0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ad4:	d003      	beq.n	8000ade <HAL_ADC_Init+0x126>
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	689b      	ldr	r3, [r3, #8]
 8000ada:	2b01      	cmp	r3, #1
 8000adc:	d104      	bne.n	8000ae8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	691b      	ldr	r3, [r3, #16]
 8000ae2:	3b01      	subs	r3, #1
 8000ae4:	051b      	lsls	r3, r3, #20
 8000ae6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aee:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	68fa      	ldr	r2, [r7, #12]
 8000af8:	430a      	orrs	r2, r1
 8000afa:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	689a      	ldr	r2, [r3, #8]
 8000b02:	4b18      	ldr	r3, [pc, #96]	; (8000b64 <HAL_ADC_Init+0x1ac>)
 8000b04:	4013      	ands	r3, r2
 8000b06:	68ba      	ldr	r2, [r7, #8]
 8000b08:	429a      	cmp	r2, r3
 8000b0a:	d10b      	bne.n	8000b24 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	2200      	movs	r2, #0
 8000b10:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b16:	f023 0303 	bic.w	r3, r3, #3
 8000b1a:	f043 0201 	orr.w	r2, r3, #1
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000b22:	e018      	b.n	8000b56 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b28:	f023 0312 	bic.w	r3, r3, #18
 8000b2c:	f043 0210 	orr.w	r2, r3, #16
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b38:	f043 0201 	orr.w	r2, r3, #1
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000b40:	2301      	movs	r3, #1
 8000b42:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000b44:	e007      	b.n	8000b56 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b4a:	f043 0210 	orr.w	r2, r3, #16
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000b52:	2301      	movs	r3, #1
 8000b54:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000b56:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	3718      	adds	r7, #24
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	ffe1f7fd 	.word	0xffe1f7fd
 8000b64:	ff1f0efe 	.word	0xff1f0efe

08000b68 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b086      	sub	sp, #24
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	60f8      	str	r0, [r7, #12]
 8000b70:	60b9      	str	r1, [r7, #8]
 8000b72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b74:	2300      	movs	r3, #0
 8000b76:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a64      	ldr	r2, [pc, #400]	; (8000d10 <HAL_ADC_Start_DMA+0x1a8>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d004      	beq.n	8000b8c <HAL_ADC_Start_DMA+0x24>
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4a63      	ldr	r2, [pc, #396]	; (8000d14 <HAL_ADC_Start_DMA+0x1ac>)
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	d106      	bne.n	8000b9a <HAL_ADC_Start_DMA+0x32>
 8000b8c:	4b60      	ldr	r3, [pc, #384]	; (8000d10 <HAL_ADC_Start_DMA+0x1a8>)
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	f040 80b3 	bne.w	8000d00 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000ba0:	2b01      	cmp	r3, #1
 8000ba2:	d101      	bne.n	8000ba8 <HAL_ADC_Start_DMA+0x40>
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	e0ae      	b.n	8000d06 <HAL_ADC_Start_DMA+0x19e>
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	2201      	movs	r2, #1
 8000bac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000bb0:	68f8      	ldr	r0, [r7, #12]
 8000bb2:	f000 fa97 	bl	80010e4 <ADC_Enable>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000bba:	7dfb      	ldrb	r3, [r7, #23]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	f040 809a 	bne.w	8000cf6 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bc6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000bca:	f023 0301 	bic.w	r3, r3, #1
 8000bce:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	4a4e      	ldr	r2, [pc, #312]	; (8000d14 <HAL_ADC_Start_DMA+0x1ac>)
 8000bdc:	4293      	cmp	r3, r2
 8000bde:	d105      	bne.n	8000bec <HAL_ADC_Start_DMA+0x84>
 8000be0:	4b4b      	ldr	r3, [pc, #300]	; (8000d10 <HAL_ADC_Start_DMA+0x1a8>)
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d115      	bne.n	8000c18 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bf0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d026      	beq.n	8000c54 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c0a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000c0e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000c16:	e01d      	b.n	8000c54 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c1c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a39      	ldr	r2, [pc, #228]	; (8000d10 <HAL_ADC_Start_DMA+0x1a8>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d004      	beq.n	8000c38 <HAL_ADC_Start_DMA+0xd0>
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4a38      	ldr	r2, [pc, #224]	; (8000d14 <HAL_ADC_Start_DMA+0x1ac>)
 8000c34:	4293      	cmp	r3, r2
 8000c36:	d10d      	bne.n	8000c54 <HAL_ADC_Start_DMA+0xec>
 8000c38:	4b35      	ldr	r3, [pc, #212]	; (8000d10 <HAL_ADC_Start_DMA+0x1a8>)
 8000c3a:	685b      	ldr	r3, [r3, #4]
 8000c3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d007      	beq.n	8000c54 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c48:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000c4c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d006      	beq.n	8000c6e <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c64:	f023 0206 	bic.w	r2, r3, #6
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c6c:	e002      	b.n	8000c74 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	2200      	movs	r2, #0
 8000c72:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	2200      	movs	r2, #0
 8000c78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	6a1b      	ldr	r3, [r3, #32]
 8000c80:	4a25      	ldr	r2, [pc, #148]	; (8000d18 <HAL_ADC_Start_DMA+0x1b0>)
 8000c82:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	6a1b      	ldr	r3, [r3, #32]
 8000c88:	4a24      	ldr	r2, [pc, #144]	; (8000d1c <HAL_ADC_Start_DMA+0x1b4>)
 8000c8a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	6a1b      	ldr	r3, [r3, #32]
 8000c90:	4a23      	ldr	r2, [pc, #140]	; (8000d20 <HAL_ADC_Start_DMA+0x1b8>)
 8000c92:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f06f 0202 	mvn.w	r2, #2
 8000c9c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	689a      	ldr	r2, [r3, #8]
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000cac:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	6a18      	ldr	r0, [r3, #32]
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	334c      	adds	r3, #76	; 0x4c
 8000cb8:	4619      	mov	r1, r3
 8000cba:	68ba      	ldr	r2, [r7, #8]
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	f000 fc83 	bl	80015c8 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	689b      	ldr	r3, [r3, #8]
 8000cc8:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000ccc:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000cd0:	d108      	bne.n	8000ce4 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	689a      	ldr	r2, [r3, #8]
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000ce0:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000ce2:	e00f      	b.n	8000d04 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	689a      	ldr	r2, [r3, #8]
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000cf2:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000cf4:	e006      	b.n	8000d04 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8000cfe:	e001      	b.n	8000d04 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000d00:	2301      	movs	r3, #1
 8000d02:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000d04:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3718      	adds	r7, #24
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	40012400 	.word	0x40012400
 8000d14:	40012800 	.word	0x40012800
 8000d18:	0800121b 	.word	0x0800121b
 8000d1c:	08001297 	.word	0x08001297
 8000d20:	080012b3 	.word	0x080012b3

08000d24 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	f003 0320 	and.w	r3, r3, #32
 8000d36:	2b20      	cmp	r3, #32
 8000d38:	d140      	bne.n	8000dbc <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f003 0302 	and.w	r3, r3, #2
 8000d44:	2b02      	cmp	r3, #2
 8000d46:	d139      	bne.n	8000dbc <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d4c:	f003 0310 	and.w	r3, r3, #16
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d105      	bne.n	8000d60 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d58:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	689b      	ldr	r3, [r3, #8]
 8000d66:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000d6a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000d6e:	d11d      	bne.n	8000dac <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d119      	bne.n	8000dac <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	685a      	ldr	r2, [r3, #4]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f022 0220 	bic.w	r2, r2, #32
 8000d86:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d8c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d105      	bne.n	8000dac <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000da4:	f043 0201 	orr.w	r2, r3, #1
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8000dac:	6878      	ldr	r0, [r7, #4]
 8000dae:	f000 f87c 	bl	8000eaa <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f06f 0212 	mvn.w	r2, #18
 8000dba:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dc6:	2b80      	cmp	r3, #128	; 0x80
 8000dc8:	d14f      	bne.n	8000e6a <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f003 0304 	and.w	r3, r3, #4
 8000dd4:	2b04      	cmp	r3, #4
 8000dd6:	d148      	bne.n	8000e6a <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ddc:	f003 0310 	and.w	r3, r3, #16
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d105      	bne.n	8000df0 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000de8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	689b      	ldr	r3, [r3, #8]
 8000df6:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8000dfa:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8000dfe:	d012      	beq.n	8000e26 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d125      	bne.n	8000e5a <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	689b      	ldr	r3, [r3, #8]
 8000e14:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000e18:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000e1c:	d11d      	bne.n	8000e5a <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d119      	bne.n	8000e5a <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	685a      	ldr	r2, [r3, #4]
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e34:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d105      	bne.n	8000e5a <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e52:	f043 0201 	orr.w	r2, r3, #1
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000e5a:	6878      	ldr	r0, [r7, #4]
 8000e5c:	f000 fa43 	bl	80012e6 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f06f 020c 	mvn.w	r2, #12
 8000e68:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e74:	2b40      	cmp	r3, #64	; 0x40
 8000e76:	d114      	bne.n	8000ea2 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f003 0301 	and.w	r3, r3, #1
 8000e82:	2b01      	cmp	r3, #1
 8000e84:	d10d      	bne.n	8000ea2 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e8a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000e92:	6878      	ldr	r0, [r7, #4]
 8000e94:	f000 f81b 	bl	8000ece <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f06f 0201 	mvn.w	r2, #1
 8000ea0:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8000ea2:	bf00      	nop
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}

08000eaa <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000eaa:	b480      	push	{r7}
 8000eac:	b083      	sub	sp, #12
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000eb2:	bf00      	nop
 8000eb4:	370c      	adds	r7, #12
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bc80      	pop	{r7}
 8000eba:	4770      	bx	lr

08000ebc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000ec4:	bf00      	nop
 8000ec6:	370c      	adds	r7, #12
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bc80      	pop	{r7}
 8000ecc:	4770      	bx	lr

08000ece <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	b083      	sub	sp, #12
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8000ed6:	bf00      	nop
 8000ed8:	370c      	adds	r7, #12
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bc80      	pop	{r7}
 8000ede:	4770      	bx	lr

08000ee0 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000ee8:	bf00      	nop
 8000eea:	370c      	adds	r7, #12
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bc80      	pop	{r7}
 8000ef0:	4770      	bx	lr
	...

08000ef4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000ef4:	b480      	push	{r7}
 8000ef6:	b085      	sub	sp, #20
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
 8000efc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000efe:	2300      	movs	r3, #0
 8000f00:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000f02:	2300      	movs	r3, #0
 8000f04:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000f0c:	2b01      	cmp	r3, #1
 8000f0e:	d101      	bne.n	8000f14 <HAL_ADC_ConfigChannel+0x20>
 8000f10:	2302      	movs	r3, #2
 8000f12:	e0dc      	b.n	80010ce <HAL_ADC_ConfigChannel+0x1da>
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2201      	movs	r2, #1
 8000f18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	2b06      	cmp	r3, #6
 8000f22:	d81c      	bhi.n	8000f5e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	685a      	ldr	r2, [r3, #4]
 8000f2e:	4613      	mov	r3, r2
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	4413      	add	r3, r2
 8000f34:	3b05      	subs	r3, #5
 8000f36:	221f      	movs	r2, #31
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	43db      	mvns	r3, r3
 8000f3e:	4019      	ands	r1, r3
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	6818      	ldr	r0, [r3, #0]
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	685a      	ldr	r2, [r3, #4]
 8000f48:	4613      	mov	r3, r2
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	4413      	add	r3, r2
 8000f4e:	3b05      	subs	r3, #5
 8000f50:	fa00 f203 	lsl.w	r2, r0, r3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	430a      	orrs	r2, r1
 8000f5a:	635a      	str	r2, [r3, #52]	; 0x34
 8000f5c:	e03c      	b.n	8000fd8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	2b0c      	cmp	r3, #12
 8000f64:	d81c      	bhi.n	8000fa0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685a      	ldr	r2, [r3, #4]
 8000f70:	4613      	mov	r3, r2
 8000f72:	009b      	lsls	r3, r3, #2
 8000f74:	4413      	add	r3, r2
 8000f76:	3b23      	subs	r3, #35	; 0x23
 8000f78:	221f      	movs	r2, #31
 8000f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7e:	43db      	mvns	r3, r3
 8000f80:	4019      	ands	r1, r3
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	6818      	ldr	r0, [r3, #0]
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	685a      	ldr	r2, [r3, #4]
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	009b      	lsls	r3, r3, #2
 8000f8e:	4413      	add	r3, r2
 8000f90:	3b23      	subs	r3, #35	; 0x23
 8000f92:	fa00 f203 	lsl.w	r2, r0, r3
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	430a      	orrs	r2, r1
 8000f9c:	631a      	str	r2, [r3, #48]	; 0x30
 8000f9e:	e01b      	b.n	8000fd8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	685a      	ldr	r2, [r3, #4]
 8000faa:	4613      	mov	r3, r2
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	4413      	add	r3, r2
 8000fb0:	3b41      	subs	r3, #65	; 0x41
 8000fb2:	221f      	movs	r2, #31
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	43db      	mvns	r3, r3
 8000fba:	4019      	ands	r1, r3
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	6818      	ldr	r0, [r3, #0]
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685a      	ldr	r2, [r3, #4]
 8000fc4:	4613      	mov	r3, r2
 8000fc6:	009b      	lsls	r3, r3, #2
 8000fc8:	4413      	add	r3, r2
 8000fca:	3b41      	subs	r3, #65	; 0x41
 8000fcc:	fa00 f203 	lsl.w	r2, r0, r3
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	430a      	orrs	r2, r1
 8000fd6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	2b09      	cmp	r3, #9
 8000fde:	d91c      	bls.n	800101a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	68d9      	ldr	r1, [r3, #12]
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	4613      	mov	r3, r2
 8000fec:	005b      	lsls	r3, r3, #1
 8000fee:	4413      	add	r3, r2
 8000ff0:	3b1e      	subs	r3, #30
 8000ff2:	2207      	movs	r2, #7
 8000ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff8:	43db      	mvns	r3, r3
 8000ffa:	4019      	ands	r1, r3
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	6898      	ldr	r0, [r3, #8]
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	4613      	mov	r3, r2
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	4413      	add	r3, r2
 800100a:	3b1e      	subs	r3, #30
 800100c:	fa00 f203 	lsl.w	r2, r0, r3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	430a      	orrs	r2, r1
 8001016:	60da      	str	r2, [r3, #12]
 8001018:	e019      	b.n	800104e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	6919      	ldr	r1, [r3, #16]
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	4613      	mov	r3, r2
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	4413      	add	r3, r2
 800102a:	2207      	movs	r2, #7
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	43db      	mvns	r3, r3
 8001032:	4019      	ands	r1, r3
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	6898      	ldr	r0, [r3, #8]
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	4613      	mov	r3, r2
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	4413      	add	r3, r2
 8001042:	fa00 f203 	lsl.w	r2, r0, r3
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	430a      	orrs	r2, r1
 800104c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	2b10      	cmp	r3, #16
 8001054:	d003      	beq.n	800105e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800105a:	2b11      	cmp	r3, #17
 800105c:	d132      	bne.n	80010c4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4a1d      	ldr	r2, [pc, #116]	; (80010d8 <HAL_ADC_ConfigChannel+0x1e4>)
 8001064:	4293      	cmp	r3, r2
 8001066:	d125      	bne.n	80010b4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	689b      	ldr	r3, [r3, #8]
 800106e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001072:	2b00      	cmp	r3, #0
 8001074:	d126      	bne.n	80010c4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	689a      	ldr	r2, [r3, #8]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001084:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	2b10      	cmp	r3, #16
 800108c:	d11a      	bne.n	80010c4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800108e:	4b13      	ldr	r3, [pc, #76]	; (80010dc <HAL_ADC_ConfigChannel+0x1e8>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4a13      	ldr	r2, [pc, #76]	; (80010e0 <HAL_ADC_ConfigChannel+0x1ec>)
 8001094:	fba2 2303 	umull	r2, r3, r2, r3
 8001098:	0c9a      	lsrs	r2, r3, #18
 800109a:	4613      	mov	r3, r2
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	4413      	add	r3, r2
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80010a4:	e002      	b.n	80010ac <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	3b01      	subs	r3, #1
 80010aa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d1f9      	bne.n	80010a6 <HAL_ADC_ConfigChannel+0x1b2>
 80010b2:	e007      	b.n	80010c4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010b8:	f043 0220 	orr.w	r2, r3, #32
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80010c0:	2301      	movs	r3, #1
 80010c2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2200      	movs	r2, #0
 80010c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80010cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3714      	adds	r7, #20
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bc80      	pop	{r7}
 80010d6:	4770      	bx	lr
 80010d8:	40012400 	.word	0x40012400
 80010dc:	20000008 	.word	0x20000008
 80010e0:	431bde83 	.word	0x431bde83

080010e4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b084      	sub	sp, #16
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80010ec:	2300      	movs	r3, #0
 80010ee:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80010f0:	2300      	movs	r3, #0
 80010f2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	689b      	ldr	r3, [r3, #8]
 80010fa:	f003 0301 	and.w	r3, r3, #1
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d040      	beq.n	8001184 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	689a      	ldr	r2, [r3, #8]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f042 0201 	orr.w	r2, r2, #1
 8001110:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001112:	4b1f      	ldr	r3, [pc, #124]	; (8001190 <ADC_Enable+0xac>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4a1f      	ldr	r2, [pc, #124]	; (8001194 <ADC_Enable+0xb0>)
 8001118:	fba2 2303 	umull	r2, r3, r2, r3
 800111c:	0c9b      	lsrs	r3, r3, #18
 800111e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001120:	e002      	b.n	8001128 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	3b01      	subs	r3, #1
 8001126:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d1f9      	bne.n	8001122 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800112e:	f7ff fc15 	bl	800095c <HAL_GetTick>
 8001132:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001134:	e01f      	b.n	8001176 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001136:	f7ff fc11 	bl	800095c <HAL_GetTick>
 800113a:	4602      	mov	r2, r0
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	1ad3      	subs	r3, r2, r3
 8001140:	2b02      	cmp	r3, #2
 8001142:	d918      	bls.n	8001176 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	689b      	ldr	r3, [r3, #8]
 800114a:	f003 0301 	and.w	r3, r3, #1
 800114e:	2b01      	cmp	r3, #1
 8001150:	d011      	beq.n	8001176 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001156:	f043 0210 	orr.w	r2, r3, #16
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001162:	f043 0201 	orr.w	r2, r3, #1
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2200      	movs	r2, #0
 800116e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	e007      	b.n	8001186 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	689b      	ldr	r3, [r3, #8]
 800117c:	f003 0301 	and.w	r3, r3, #1
 8001180:	2b01      	cmp	r3, #1
 8001182:	d1d8      	bne.n	8001136 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001184:	2300      	movs	r3, #0
}
 8001186:	4618      	mov	r0, r3
 8001188:	3710      	adds	r7, #16
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	20000008 	.word	0x20000008
 8001194:	431bde83 	.word	0x431bde83

08001198 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80011a0:	2300      	movs	r3, #0
 80011a2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	689b      	ldr	r3, [r3, #8]
 80011aa:	f003 0301 	and.w	r3, r3, #1
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d12e      	bne.n	8001210 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	689a      	ldr	r2, [r3, #8]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f022 0201 	bic.w	r2, r2, #1
 80011c0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80011c2:	f7ff fbcb 	bl	800095c <HAL_GetTick>
 80011c6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80011c8:	e01b      	b.n	8001202 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80011ca:	f7ff fbc7 	bl	800095c <HAL_GetTick>
 80011ce:	4602      	mov	r2, r0
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	1ad3      	subs	r3, r2, r3
 80011d4:	2b02      	cmp	r3, #2
 80011d6:	d914      	bls.n	8001202 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	689b      	ldr	r3, [r3, #8]
 80011de:	f003 0301 	and.w	r3, r3, #1
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	d10d      	bne.n	8001202 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011ea:	f043 0210 	orr.w	r2, r3, #16
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011f6:	f043 0201 	orr.w	r2, r3, #1
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
 8001200:	e007      	b.n	8001212 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	689b      	ldr	r3, [r3, #8]
 8001208:	f003 0301 	and.w	r3, r3, #1
 800120c:	2b01      	cmp	r3, #1
 800120e:	d0dc      	beq.n	80011ca <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001210:	2300      	movs	r3, #0
}
 8001212:	4618      	mov	r0, r3
 8001214:	3710      	adds	r7, #16
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}

0800121a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800121a:	b580      	push	{r7, lr}
 800121c:	b084      	sub	sp, #16
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001226:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800122c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001230:	2b00      	cmp	r3, #0
 8001232:	d127      	bne.n	8001284 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001238:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800124a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800124e:	d115      	bne.n	800127c <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001254:	2b00      	cmp	r3, #0
 8001256:	d111      	bne.n	800127c <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800125c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001268:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800126c:	2b00      	cmp	r3, #0
 800126e:	d105      	bne.n	800127c <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001274:	f043 0201 	orr.w	r2, r3, #1
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800127c:	68f8      	ldr	r0, [r7, #12]
 800127e:	f7ff fe14 	bl	8000eaa <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001282:	e004      	b.n	800128e <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	6a1b      	ldr	r3, [r3, #32]
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	4798      	blx	r3
}
 800128e:	bf00      	nop
 8001290:	3710      	adds	r7, #16
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}

08001296 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001296:	b580      	push	{r7, lr}
 8001298:	b084      	sub	sp, #16
 800129a:	af00      	add	r7, sp, #0
 800129c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a2:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80012a4:	68f8      	ldr	r0, [r7, #12]
 80012a6:	f7ff fe09 	bl	8000ebc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80012aa:	bf00      	nop
 80012ac:	3710      	adds	r7, #16
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b084      	sub	sp, #16
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012be:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012c4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012d0:	f043 0204 	orr.w	r2, r3, #4
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80012d8:	68f8      	ldr	r0, [r7, #12]
 80012da:	f7ff fe01 	bl	8000ee0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80012de:	bf00      	nop
 80012e0:	3710      	adds	r7, #16
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}

080012e6 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80012e6:	b480      	push	{r7}
 80012e8:	b083      	sub	sp, #12
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80012ee:	bf00      	nop
 80012f0:	370c      	adds	r7, #12
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bc80      	pop	{r7}
 80012f6:	4770      	bx	lr

080012f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b085      	sub	sp, #20
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	f003 0307 	and.w	r3, r3, #7
 8001306:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001308:	4b0c      	ldr	r3, [pc, #48]	; (800133c <__NVIC_SetPriorityGrouping+0x44>)
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800130e:	68ba      	ldr	r2, [r7, #8]
 8001310:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001314:	4013      	ands	r3, r2
 8001316:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001320:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001324:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001328:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800132a:	4a04      	ldr	r2, [pc, #16]	; (800133c <__NVIC_SetPriorityGrouping+0x44>)
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	60d3      	str	r3, [r2, #12]
}
 8001330:	bf00      	nop
 8001332:	3714      	adds	r7, #20
 8001334:	46bd      	mov	sp, r7
 8001336:	bc80      	pop	{r7}
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	e000ed00 	.word	0xe000ed00

08001340 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001344:	4b04      	ldr	r3, [pc, #16]	; (8001358 <__NVIC_GetPriorityGrouping+0x18>)
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	0a1b      	lsrs	r3, r3, #8
 800134a:	f003 0307 	and.w	r3, r3, #7
}
 800134e:	4618      	mov	r0, r3
 8001350:	46bd      	mov	sp, r7
 8001352:	bc80      	pop	{r7}
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	e000ed00 	.word	0xe000ed00

0800135c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	4603      	mov	r3, r0
 8001364:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136a:	2b00      	cmp	r3, #0
 800136c:	db0b      	blt.n	8001386 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800136e:	79fb      	ldrb	r3, [r7, #7]
 8001370:	f003 021f 	and.w	r2, r3, #31
 8001374:	4906      	ldr	r1, [pc, #24]	; (8001390 <__NVIC_EnableIRQ+0x34>)
 8001376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137a:	095b      	lsrs	r3, r3, #5
 800137c:	2001      	movs	r0, #1
 800137e:	fa00 f202 	lsl.w	r2, r0, r2
 8001382:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001386:	bf00      	nop
 8001388:	370c      	adds	r7, #12
 800138a:	46bd      	mov	sp, r7
 800138c:	bc80      	pop	{r7}
 800138e:	4770      	bx	lr
 8001390:	e000e100 	.word	0xe000e100

08001394 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	4603      	mov	r3, r0
 800139c:	6039      	str	r1, [r7, #0]
 800139e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	db0a      	blt.n	80013be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	b2da      	uxtb	r2, r3
 80013ac:	490c      	ldr	r1, [pc, #48]	; (80013e0 <__NVIC_SetPriority+0x4c>)
 80013ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b2:	0112      	lsls	r2, r2, #4
 80013b4:	b2d2      	uxtb	r2, r2
 80013b6:	440b      	add	r3, r1
 80013b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013bc:	e00a      	b.n	80013d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	b2da      	uxtb	r2, r3
 80013c2:	4908      	ldr	r1, [pc, #32]	; (80013e4 <__NVIC_SetPriority+0x50>)
 80013c4:	79fb      	ldrb	r3, [r7, #7]
 80013c6:	f003 030f 	and.w	r3, r3, #15
 80013ca:	3b04      	subs	r3, #4
 80013cc:	0112      	lsls	r2, r2, #4
 80013ce:	b2d2      	uxtb	r2, r2
 80013d0:	440b      	add	r3, r1
 80013d2:	761a      	strb	r2, [r3, #24]
}
 80013d4:	bf00      	nop
 80013d6:	370c      	adds	r7, #12
 80013d8:	46bd      	mov	sp, r7
 80013da:	bc80      	pop	{r7}
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	e000e100 	.word	0xe000e100
 80013e4:	e000ed00 	.word	0xe000ed00

080013e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b089      	sub	sp, #36	; 0x24
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	60f8      	str	r0, [r7, #12]
 80013f0:	60b9      	str	r1, [r7, #8]
 80013f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	f003 0307 	and.w	r3, r3, #7
 80013fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	f1c3 0307 	rsb	r3, r3, #7
 8001402:	2b04      	cmp	r3, #4
 8001404:	bf28      	it	cs
 8001406:	2304      	movcs	r3, #4
 8001408:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	3304      	adds	r3, #4
 800140e:	2b06      	cmp	r3, #6
 8001410:	d902      	bls.n	8001418 <NVIC_EncodePriority+0x30>
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	3b03      	subs	r3, #3
 8001416:	e000      	b.n	800141a <NVIC_EncodePriority+0x32>
 8001418:	2300      	movs	r3, #0
 800141a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800141c:	f04f 32ff 	mov.w	r2, #4294967295
 8001420:	69bb      	ldr	r3, [r7, #24]
 8001422:	fa02 f303 	lsl.w	r3, r2, r3
 8001426:	43da      	mvns	r2, r3
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	401a      	ands	r2, r3
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001430:	f04f 31ff 	mov.w	r1, #4294967295
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	fa01 f303 	lsl.w	r3, r1, r3
 800143a:	43d9      	mvns	r1, r3
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001440:	4313      	orrs	r3, r2
         );
}
 8001442:	4618      	mov	r0, r3
 8001444:	3724      	adds	r7, #36	; 0x24
 8001446:	46bd      	mov	sp, r7
 8001448:	bc80      	pop	{r7}
 800144a:	4770      	bx	lr

0800144c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	3b01      	subs	r3, #1
 8001458:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800145c:	d301      	bcc.n	8001462 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800145e:	2301      	movs	r3, #1
 8001460:	e00f      	b.n	8001482 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001462:	4a0a      	ldr	r2, [pc, #40]	; (800148c <SysTick_Config+0x40>)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	3b01      	subs	r3, #1
 8001468:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800146a:	210f      	movs	r1, #15
 800146c:	f04f 30ff 	mov.w	r0, #4294967295
 8001470:	f7ff ff90 	bl	8001394 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001474:	4b05      	ldr	r3, [pc, #20]	; (800148c <SysTick_Config+0x40>)
 8001476:	2200      	movs	r2, #0
 8001478:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800147a:	4b04      	ldr	r3, [pc, #16]	; (800148c <SysTick_Config+0x40>)
 800147c:	2207      	movs	r2, #7
 800147e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001480:	2300      	movs	r3, #0
}
 8001482:	4618      	mov	r0, r3
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	e000e010 	.word	0xe000e010

08001490 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f7ff ff2d 	bl	80012f8 <__NVIC_SetPriorityGrouping>
}
 800149e:	bf00      	nop
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b086      	sub	sp, #24
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	4603      	mov	r3, r0
 80014ae:	60b9      	str	r1, [r7, #8]
 80014b0:	607a      	str	r2, [r7, #4]
 80014b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014b4:	2300      	movs	r3, #0
 80014b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014b8:	f7ff ff42 	bl	8001340 <__NVIC_GetPriorityGrouping>
 80014bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014be:	687a      	ldr	r2, [r7, #4]
 80014c0:	68b9      	ldr	r1, [r7, #8]
 80014c2:	6978      	ldr	r0, [r7, #20]
 80014c4:	f7ff ff90 	bl	80013e8 <NVIC_EncodePriority>
 80014c8:	4602      	mov	r2, r0
 80014ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ce:	4611      	mov	r1, r2
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff ff5f 	bl	8001394 <__NVIC_SetPriority>
}
 80014d6:	bf00      	nop
 80014d8:	3718      	adds	r7, #24
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}

080014de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014de:	b580      	push	{r7, lr}
 80014e0:	b082      	sub	sp, #8
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	4603      	mov	r3, r0
 80014e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7ff ff35 	bl	800135c <__NVIC_EnableIRQ>
}
 80014f2:	bf00      	nop
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}

080014fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014fa:	b580      	push	{r7, lr}
 80014fc:	b082      	sub	sp, #8
 80014fe:	af00      	add	r7, sp, #0
 8001500:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f7ff ffa2 	bl	800144c <SysTick_Config>
 8001508:	4603      	mov	r3, r0
}
 800150a:	4618      	mov	r0, r3
 800150c:	3708      	adds	r7, #8
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
	...

08001514 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001514:	b480      	push	{r7}
 8001516:	b085      	sub	sp, #20
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800151c:	2300      	movs	r3, #0
 800151e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d101      	bne.n	800152a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e043      	b.n	80015b2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	461a      	mov	r2, r3
 8001530:	4b22      	ldr	r3, [pc, #136]	; (80015bc <HAL_DMA_Init+0xa8>)
 8001532:	4413      	add	r3, r2
 8001534:	4a22      	ldr	r2, [pc, #136]	; (80015c0 <HAL_DMA_Init+0xac>)
 8001536:	fba2 2303 	umull	r2, r3, r2, r3
 800153a:	091b      	lsrs	r3, r3, #4
 800153c:	009a      	lsls	r2, r3, #2
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4a1f      	ldr	r2, [pc, #124]	; (80015c4 <HAL_DMA_Init+0xb0>)
 8001546:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2202      	movs	r2, #2
 800154c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800155e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001562:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800156c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	68db      	ldr	r3, [r3, #12]
 8001572:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001578:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	695b      	ldr	r3, [r3, #20]
 800157e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001584:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	69db      	ldr	r3, [r3, #28]
 800158a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800158c:	68fa      	ldr	r2, [r7, #12]
 800158e:	4313      	orrs	r3, r2
 8001590:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	68fa      	ldr	r2, [r7, #12]
 8001598:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2200      	movs	r2, #0
 800159e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2201      	movs	r2, #1
 80015a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2200      	movs	r2, #0
 80015ac:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80015b0:	2300      	movs	r3, #0
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3714      	adds	r7, #20
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bc80      	pop	{r7}
 80015ba:	4770      	bx	lr
 80015bc:	bffdfff8 	.word	0xbffdfff8
 80015c0:	cccccccd 	.word	0xcccccccd
 80015c4:	40020000 	.word	0x40020000

080015c8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b086      	sub	sp, #24
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	60f8      	str	r0, [r7, #12]
 80015d0:	60b9      	str	r1, [r7, #8]
 80015d2:	607a      	str	r2, [r7, #4]
 80015d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80015d6:	2300      	movs	r3, #0
 80015d8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d101      	bne.n	80015e8 <HAL_DMA_Start_IT+0x20>
 80015e4:	2302      	movs	r3, #2
 80015e6:	e04a      	b.n	800167e <HAL_DMA_Start_IT+0xb6>
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	2201      	movs	r2, #1
 80015ec:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d13a      	bne.n	8001670 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	2202      	movs	r2, #2
 80015fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	2200      	movs	r2, #0
 8001606:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f022 0201 	bic.w	r2, r2, #1
 8001616:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	687a      	ldr	r2, [r7, #4]
 800161c:	68b9      	ldr	r1, [r7, #8]
 800161e:	68f8      	ldr	r0, [r7, #12]
 8001620:	f000 f972 	bl	8001908 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001628:	2b00      	cmp	r3, #0
 800162a:	d008      	beq.n	800163e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f042 020e 	orr.w	r2, r2, #14
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	e00f      	b.n	800165e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f022 0204 	bic.w	r2, r2, #4
 800164c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f042 020a 	orr.w	r2, r2, #10
 800165c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f042 0201 	orr.w	r2, r2, #1
 800166c:	601a      	str	r2, [r3, #0]
 800166e:	e005      	b.n	800167c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	2200      	movs	r2, #0
 8001674:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001678:	2302      	movs	r3, #2
 800167a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800167c:	7dfb      	ldrb	r3, [r7, #23]
}
 800167e:	4618      	mov	r0, r3
 8001680:	3718      	adds	r7, #24
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}

08001686 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001686:	b480      	push	{r7}
 8001688:	b085      	sub	sp, #20
 800168a:	af00      	add	r7, sp, #0
 800168c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800168e:	2300      	movs	r3, #0
 8001690:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001698:	2b02      	cmp	r3, #2
 800169a:	d008      	beq.n	80016ae <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2204      	movs	r2, #4
 80016a0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2200      	movs	r2, #0
 80016a6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e020      	b.n	80016f0 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f022 020e 	bic.w	r2, r2, #14
 80016bc:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f022 0201 	bic.w	r2, r2, #1
 80016cc:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016d6:	2101      	movs	r1, #1
 80016d8:	fa01 f202 	lsl.w	r2, r1, r2
 80016dc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2201      	movs	r2, #1
 80016e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2200      	movs	r2, #0
 80016ea:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80016ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3714      	adds	r7, #20
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bc80      	pop	{r7}
 80016f8:	4770      	bx	lr
	...

080016fc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001718:	2204      	movs	r2, #4
 800171a:	409a      	lsls	r2, r3
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	4013      	ands	r3, r2
 8001720:	2b00      	cmp	r3, #0
 8001722:	d04f      	beq.n	80017c4 <HAL_DMA_IRQHandler+0xc8>
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	f003 0304 	and.w	r3, r3, #4
 800172a:	2b00      	cmp	r3, #0
 800172c:	d04a      	beq.n	80017c4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 0320 	and.w	r3, r3, #32
 8001738:	2b00      	cmp	r3, #0
 800173a:	d107      	bne.n	800174c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f022 0204 	bic.w	r2, r2, #4
 800174a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a66      	ldr	r2, [pc, #408]	; (80018ec <HAL_DMA_IRQHandler+0x1f0>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d029      	beq.n	80017aa <HAL_DMA_IRQHandler+0xae>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a65      	ldr	r2, [pc, #404]	; (80018f0 <HAL_DMA_IRQHandler+0x1f4>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d022      	beq.n	80017a6 <HAL_DMA_IRQHandler+0xaa>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a63      	ldr	r2, [pc, #396]	; (80018f4 <HAL_DMA_IRQHandler+0x1f8>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d01a      	beq.n	80017a0 <HAL_DMA_IRQHandler+0xa4>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a62      	ldr	r2, [pc, #392]	; (80018f8 <HAL_DMA_IRQHandler+0x1fc>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d012      	beq.n	800179a <HAL_DMA_IRQHandler+0x9e>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a60      	ldr	r2, [pc, #384]	; (80018fc <HAL_DMA_IRQHandler+0x200>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d00a      	beq.n	8001794 <HAL_DMA_IRQHandler+0x98>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a5f      	ldr	r2, [pc, #380]	; (8001900 <HAL_DMA_IRQHandler+0x204>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d102      	bne.n	800178e <HAL_DMA_IRQHandler+0x92>
 8001788:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800178c:	e00e      	b.n	80017ac <HAL_DMA_IRQHandler+0xb0>
 800178e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001792:	e00b      	b.n	80017ac <HAL_DMA_IRQHandler+0xb0>
 8001794:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001798:	e008      	b.n	80017ac <HAL_DMA_IRQHandler+0xb0>
 800179a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800179e:	e005      	b.n	80017ac <HAL_DMA_IRQHandler+0xb0>
 80017a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017a4:	e002      	b.n	80017ac <HAL_DMA_IRQHandler+0xb0>
 80017a6:	2340      	movs	r3, #64	; 0x40
 80017a8:	e000      	b.n	80017ac <HAL_DMA_IRQHandler+0xb0>
 80017aa:	2304      	movs	r3, #4
 80017ac:	4a55      	ldr	r2, [pc, #340]	; (8001904 <HAL_DMA_IRQHandler+0x208>)
 80017ae:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	f000 8094 	beq.w	80018e2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80017c2:	e08e      	b.n	80018e2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c8:	2202      	movs	r2, #2
 80017ca:	409a      	lsls	r2, r3
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	4013      	ands	r3, r2
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d056      	beq.n	8001882 <HAL_DMA_IRQHandler+0x186>
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	f003 0302 	and.w	r3, r3, #2
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d051      	beq.n	8001882 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 0320 	and.w	r3, r3, #32
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d10b      	bne.n	8001804 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f022 020a 	bic.w	r2, r2, #10
 80017fa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2201      	movs	r2, #1
 8001800:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a38      	ldr	r2, [pc, #224]	; (80018ec <HAL_DMA_IRQHandler+0x1f0>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d029      	beq.n	8001862 <HAL_DMA_IRQHandler+0x166>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a37      	ldr	r2, [pc, #220]	; (80018f0 <HAL_DMA_IRQHandler+0x1f4>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d022      	beq.n	800185e <HAL_DMA_IRQHandler+0x162>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a35      	ldr	r2, [pc, #212]	; (80018f4 <HAL_DMA_IRQHandler+0x1f8>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d01a      	beq.n	8001858 <HAL_DMA_IRQHandler+0x15c>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a34      	ldr	r2, [pc, #208]	; (80018f8 <HAL_DMA_IRQHandler+0x1fc>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d012      	beq.n	8001852 <HAL_DMA_IRQHandler+0x156>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a32      	ldr	r2, [pc, #200]	; (80018fc <HAL_DMA_IRQHandler+0x200>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d00a      	beq.n	800184c <HAL_DMA_IRQHandler+0x150>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a31      	ldr	r2, [pc, #196]	; (8001900 <HAL_DMA_IRQHandler+0x204>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d102      	bne.n	8001846 <HAL_DMA_IRQHandler+0x14a>
 8001840:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001844:	e00e      	b.n	8001864 <HAL_DMA_IRQHandler+0x168>
 8001846:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800184a:	e00b      	b.n	8001864 <HAL_DMA_IRQHandler+0x168>
 800184c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001850:	e008      	b.n	8001864 <HAL_DMA_IRQHandler+0x168>
 8001852:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001856:	e005      	b.n	8001864 <HAL_DMA_IRQHandler+0x168>
 8001858:	f44f 7300 	mov.w	r3, #512	; 0x200
 800185c:	e002      	b.n	8001864 <HAL_DMA_IRQHandler+0x168>
 800185e:	2320      	movs	r3, #32
 8001860:	e000      	b.n	8001864 <HAL_DMA_IRQHandler+0x168>
 8001862:	2302      	movs	r3, #2
 8001864:	4a27      	ldr	r2, [pc, #156]	; (8001904 <HAL_DMA_IRQHandler+0x208>)
 8001866:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2200      	movs	r2, #0
 800186c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001874:	2b00      	cmp	r3, #0
 8001876:	d034      	beq.n	80018e2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001880:	e02f      	b.n	80018e2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001886:	2208      	movs	r2, #8
 8001888:	409a      	lsls	r2, r3
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	4013      	ands	r3, r2
 800188e:	2b00      	cmp	r3, #0
 8001890:	d028      	beq.n	80018e4 <HAL_DMA_IRQHandler+0x1e8>
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	f003 0308 	and.w	r3, r3, #8
 8001898:	2b00      	cmp	r3, #0
 800189a:	d023      	beq.n	80018e4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f022 020e 	bic.w	r2, r2, #14
 80018aa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018b4:	2101      	movs	r1, #1
 80018b6:	fa01 f202 	lsl.w	r2, r1, r2
 80018ba:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2201      	movs	r2, #1
 80018c0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2201      	movs	r2, #1
 80018c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2200      	movs	r2, #0
 80018ce:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d004      	beq.n	80018e4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	4798      	blx	r3
    }
  }
  return;
 80018e2:	bf00      	nop
 80018e4:	bf00      	nop
}
 80018e6:	3710      	adds	r7, #16
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	40020008 	.word	0x40020008
 80018f0:	4002001c 	.word	0x4002001c
 80018f4:	40020030 	.word	0x40020030
 80018f8:	40020044 	.word	0x40020044
 80018fc:	40020058 	.word	0x40020058
 8001900:	4002006c 	.word	0x4002006c
 8001904:	40020000 	.word	0x40020000

08001908 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001908:	b480      	push	{r7}
 800190a:	b085      	sub	sp, #20
 800190c:	af00      	add	r7, sp, #0
 800190e:	60f8      	str	r0, [r7, #12]
 8001910:	60b9      	str	r1, [r7, #8]
 8001912:	607a      	str	r2, [r7, #4]
 8001914:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800191e:	2101      	movs	r1, #1
 8001920:	fa01 f202 	lsl.w	r2, r1, r2
 8001924:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	683a      	ldr	r2, [r7, #0]
 800192c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	2b10      	cmp	r3, #16
 8001934:	d108      	bne.n	8001948 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	687a      	ldr	r2, [r7, #4]
 800193c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	68ba      	ldr	r2, [r7, #8]
 8001944:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001946:	e007      	b.n	8001958 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	68ba      	ldr	r2, [r7, #8]
 800194e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	687a      	ldr	r2, [r7, #4]
 8001956:	60da      	str	r2, [r3, #12]
}
 8001958:	bf00      	nop
 800195a:	3714      	adds	r7, #20
 800195c:	46bd      	mov	sp, r7
 800195e:	bc80      	pop	{r7}
 8001960:	4770      	bx	lr
	...

08001964 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001964:	b480      	push	{r7}
 8001966:	b08b      	sub	sp, #44	; 0x2c
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800196e:	2300      	movs	r3, #0
 8001970:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001972:	2300      	movs	r3, #0
 8001974:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001976:	e169      	b.n	8001c4c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001978:	2201      	movs	r2, #1
 800197a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197c:	fa02 f303 	lsl.w	r3, r2, r3
 8001980:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	69fa      	ldr	r2, [r7, #28]
 8001988:	4013      	ands	r3, r2
 800198a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800198c:	69ba      	ldr	r2, [r7, #24]
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	429a      	cmp	r2, r3
 8001992:	f040 8158 	bne.w	8001c46 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	4a9a      	ldr	r2, [pc, #616]	; (8001c04 <HAL_GPIO_Init+0x2a0>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d05e      	beq.n	8001a5e <HAL_GPIO_Init+0xfa>
 80019a0:	4a98      	ldr	r2, [pc, #608]	; (8001c04 <HAL_GPIO_Init+0x2a0>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d875      	bhi.n	8001a92 <HAL_GPIO_Init+0x12e>
 80019a6:	4a98      	ldr	r2, [pc, #608]	; (8001c08 <HAL_GPIO_Init+0x2a4>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d058      	beq.n	8001a5e <HAL_GPIO_Init+0xfa>
 80019ac:	4a96      	ldr	r2, [pc, #600]	; (8001c08 <HAL_GPIO_Init+0x2a4>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d86f      	bhi.n	8001a92 <HAL_GPIO_Init+0x12e>
 80019b2:	4a96      	ldr	r2, [pc, #600]	; (8001c0c <HAL_GPIO_Init+0x2a8>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d052      	beq.n	8001a5e <HAL_GPIO_Init+0xfa>
 80019b8:	4a94      	ldr	r2, [pc, #592]	; (8001c0c <HAL_GPIO_Init+0x2a8>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d869      	bhi.n	8001a92 <HAL_GPIO_Init+0x12e>
 80019be:	4a94      	ldr	r2, [pc, #592]	; (8001c10 <HAL_GPIO_Init+0x2ac>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d04c      	beq.n	8001a5e <HAL_GPIO_Init+0xfa>
 80019c4:	4a92      	ldr	r2, [pc, #584]	; (8001c10 <HAL_GPIO_Init+0x2ac>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d863      	bhi.n	8001a92 <HAL_GPIO_Init+0x12e>
 80019ca:	4a92      	ldr	r2, [pc, #584]	; (8001c14 <HAL_GPIO_Init+0x2b0>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d046      	beq.n	8001a5e <HAL_GPIO_Init+0xfa>
 80019d0:	4a90      	ldr	r2, [pc, #576]	; (8001c14 <HAL_GPIO_Init+0x2b0>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d85d      	bhi.n	8001a92 <HAL_GPIO_Init+0x12e>
 80019d6:	2b12      	cmp	r3, #18
 80019d8:	d82a      	bhi.n	8001a30 <HAL_GPIO_Init+0xcc>
 80019da:	2b12      	cmp	r3, #18
 80019dc:	d859      	bhi.n	8001a92 <HAL_GPIO_Init+0x12e>
 80019de:	a201      	add	r2, pc, #4	; (adr r2, 80019e4 <HAL_GPIO_Init+0x80>)
 80019e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019e4:	08001a5f 	.word	0x08001a5f
 80019e8:	08001a39 	.word	0x08001a39
 80019ec:	08001a4b 	.word	0x08001a4b
 80019f0:	08001a8d 	.word	0x08001a8d
 80019f4:	08001a93 	.word	0x08001a93
 80019f8:	08001a93 	.word	0x08001a93
 80019fc:	08001a93 	.word	0x08001a93
 8001a00:	08001a93 	.word	0x08001a93
 8001a04:	08001a93 	.word	0x08001a93
 8001a08:	08001a93 	.word	0x08001a93
 8001a0c:	08001a93 	.word	0x08001a93
 8001a10:	08001a93 	.word	0x08001a93
 8001a14:	08001a93 	.word	0x08001a93
 8001a18:	08001a93 	.word	0x08001a93
 8001a1c:	08001a93 	.word	0x08001a93
 8001a20:	08001a93 	.word	0x08001a93
 8001a24:	08001a93 	.word	0x08001a93
 8001a28:	08001a41 	.word	0x08001a41
 8001a2c:	08001a55 	.word	0x08001a55
 8001a30:	4a79      	ldr	r2, [pc, #484]	; (8001c18 <HAL_GPIO_Init+0x2b4>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d013      	beq.n	8001a5e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a36:	e02c      	b.n	8001a92 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	623b      	str	r3, [r7, #32]
          break;
 8001a3e:	e029      	b.n	8001a94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	3304      	adds	r3, #4
 8001a46:	623b      	str	r3, [r7, #32]
          break;
 8001a48:	e024      	b.n	8001a94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	68db      	ldr	r3, [r3, #12]
 8001a4e:	3308      	adds	r3, #8
 8001a50:	623b      	str	r3, [r7, #32]
          break;
 8001a52:	e01f      	b.n	8001a94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	330c      	adds	r3, #12
 8001a5a:	623b      	str	r3, [r7, #32]
          break;
 8001a5c:	e01a      	b.n	8001a94 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d102      	bne.n	8001a6c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a66:	2304      	movs	r3, #4
 8001a68:	623b      	str	r3, [r7, #32]
          break;
 8001a6a:	e013      	b.n	8001a94 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d105      	bne.n	8001a80 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a74:	2308      	movs	r3, #8
 8001a76:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	69fa      	ldr	r2, [r7, #28]
 8001a7c:	611a      	str	r2, [r3, #16]
          break;
 8001a7e:	e009      	b.n	8001a94 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a80:	2308      	movs	r3, #8
 8001a82:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	69fa      	ldr	r2, [r7, #28]
 8001a88:	615a      	str	r2, [r3, #20]
          break;
 8001a8a:	e003      	b.n	8001a94 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	623b      	str	r3, [r7, #32]
          break;
 8001a90:	e000      	b.n	8001a94 <HAL_GPIO_Init+0x130>
          break;
 8001a92:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	2bff      	cmp	r3, #255	; 0xff
 8001a98:	d801      	bhi.n	8001a9e <HAL_GPIO_Init+0x13a>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	e001      	b.n	8001aa2 <HAL_GPIO_Init+0x13e>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	3304      	adds	r3, #4
 8001aa2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001aa4:	69bb      	ldr	r3, [r7, #24]
 8001aa6:	2bff      	cmp	r3, #255	; 0xff
 8001aa8:	d802      	bhi.n	8001ab0 <HAL_GPIO_Init+0x14c>
 8001aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	e002      	b.n	8001ab6 <HAL_GPIO_Init+0x152>
 8001ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab2:	3b08      	subs	r3, #8
 8001ab4:	009b      	lsls	r3, r3, #2
 8001ab6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	210f      	movs	r1, #15
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ac4:	43db      	mvns	r3, r3
 8001ac6:	401a      	ands	r2, r3
 8001ac8:	6a39      	ldr	r1, [r7, #32]
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad0:	431a      	orrs	r2, r3
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	f000 80b1 	beq.w	8001c46 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ae4:	4b4d      	ldr	r3, [pc, #308]	; (8001c1c <HAL_GPIO_Init+0x2b8>)
 8001ae6:	699b      	ldr	r3, [r3, #24]
 8001ae8:	4a4c      	ldr	r2, [pc, #304]	; (8001c1c <HAL_GPIO_Init+0x2b8>)
 8001aea:	f043 0301 	orr.w	r3, r3, #1
 8001aee:	6193      	str	r3, [r2, #24]
 8001af0:	4b4a      	ldr	r3, [pc, #296]	; (8001c1c <HAL_GPIO_Init+0x2b8>)
 8001af2:	699b      	ldr	r3, [r3, #24]
 8001af4:	f003 0301 	and.w	r3, r3, #1
 8001af8:	60bb      	str	r3, [r7, #8]
 8001afa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001afc:	4a48      	ldr	r2, [pc, #288]	; (8001c20 <HAL_GPIO_Init+0x2bc>)
 8001afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b00:	089b      	lsrs	r3, r3, #2
 8001b02:	3302      	adds	r3, #2
 8001b04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b08:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0c:	f003 0303 	and.w	r3, r3, #3
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	220f      	movs	r2, #15
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	43db      	mvns	r3, r3
 8001b1a:	68fa      	ldr	r2, [r7, #12]
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	4a40      	ldr	r2, [pc, #256]	; (8001c24 <HAL_GPIO_Init+0x2c0>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d013      	beq.n	8001b50 <HAL_GPIO_Init+0x1ec>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	4a3f      	ldr	r2, [pc, #252]	; (8001c28 <HAL_GPIO_Init+0x2c4>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d00d      	beq.n	8001b4c <HAL_GPIO_Init+0x1e8>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	4a3e      	ldr	r2, [pc, #248]	; (8001c2c <HAL_GPIO_Init+0x2c8>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d007      	beq.n	8001b48 <HAL_GPIO_Init+0x1e4>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	4a3d      	ldr	r2, [pc, #244]	; (8001c30 <HAL_GPIO_Init+0x2cc>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d101      	bne.n	8001b44 <HAL_GPIO_Init+0x1e0>
 8001b40:	2303      	movs	r3, #3
 8001b42:	e006      	b.n	8001b52 <HAL_GPIO_Init+0x1ee>
 8001b44:	2304      	movs	r3, #4
 8001b46:	e004      	b.n	8001b52 <HAL_GPIO_Init+0x1ee>
 8001b48:	2302      	movs	r3, #2
 8001b4a:	e002      	b.n	8001b52 <HAL_GPIO_Init+0x1ee>
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e000      	b.n	8001b52 <HAL_GPIO_Init+0x1ee>
 8001b50:	2300      	movs	r3, #0
 8001b52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b54:	f002 0203 	and.w	r2, r2, #3
 8001b58:	0092      	lsls	r2, r2, #2
 8001b5a:	4093      	lsls	r3, r2
 8001b5c:	68fa      	ldr	r2, [r7, #12]
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b62:	492f      	ldr	r1, [pc, #188]	; (8001c20 <HAL_GPIO_Init+0x2bc>)
 8001b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b66:	089b      	lsrs	r3, r3, #2
 8001b68:	3302      	adds	r3, #2
 8001b6a:	68fa      	ldr	r2, [r7, #12]
 8001b6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d006      	beq.n	8001b8a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b7c:	4b2d      	ldr	r3, [pc, #180]	; (8001c34 <HAL_GPIO_Init+0x2d0>)
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	492c      	ldr	r1, [pc, #176]	; (8001c34 <HAL_GPIO_Init+0x2d0>)
 8001b82:	69bb      	ldr	r3, [r7, #24]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	600b      	str	r3, [r1, #0]
 8001b88:	e006      	b.n	8001b98 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b8a:	4b2a      	ldr	r3, [pc, #168]	; (8001c34 <HAL_GPIO_Init+0x2d0>)
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	69bb      	ldr	r3, [r7, #24]
 8001b90:	43db      	mvns	r3, r3
 8001b92:	4928      	ldr	r1, [pc, #160]	; (8001c34 <HAL_GPIO_Init+0x2d0>)
 8001b94:	4013      	ands	r3, r2
 8001b96:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d006      	beq.n	8001bb2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ba4:	4b23      	ldr	r3, [pc, #140]	; (8001c34 <HAL_GPIO_Init+0x2d0>)
 8001ba6:	685a      	ldr	r2, [r3, #4]
 8001ba8:	4922      	ldr	r1, [pc, #136]	; (8001c34 <HAL_GPIO_Init+0x2d0>)
 8001baa:	69bb      	ldr	r3, [r7, #24]
 8001bac:	4313      	orrs	r3, r2
 8001bae:	604b      	str	r3, [r1, #4]
 8001bb0:	e006      	b.n	8001bc0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001bb2:	4b20      	ldr	r3, [pc, #128]	; (8001c34 <HAL_GPIO_Init+0x2d0>)
 8001bb4:	685a      	ldr	r2, [r3, #4]
 8001bb6:	69bb      	ldr	r3, [r7, #24]
 8001bb8:	43db      	mvns	r3, r3
 8001bba:	491e      	ldr	r1, [pc, #120]	; (8001c34 <HAL_GPIO_Init+0x2d0>)
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d006      	beq.n	8001bda <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001bcc:	4b19      	ldr	r3, [pc, #100]	; (8001c34 <HAL_GPIO_Init+0x2d0>)
 8001bce:	689a      	ldr	r2, [r3, #8]
 8001bd0:	4918      	ldr	r1, [pc, #96]	; (8001c34 <HAL_GPIO_Init+0x2d0>)
 8001bd2:	69bb      	ldr	r3, [r7, #24]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	608b      	str	r3, [r1, #8]
 8001bd8:	e006      	b.n	8001be8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001bda:	4b16      	ldr	r3, [pc, #88]	; (8001c34 <HAL_GPIO_Init+0x2d0>)
 8001bdc:	689a      	ldr	r2, [r3, #8]
 8001bde:	69bb      	ldr	r3, [r7, #24]
 8001be0:	43db      	mvns	r3, r3
 8001be2:	4914      	ldr	r1, [pc, #80]	; (8001c34 <HAL_GPIO_Init+0x2d0>)
 8001be4:	4013      	ands	r3, r2
 8001be6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d021      	beq.n	8001c38 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001bf4:	4b0f      	ldr	r3, [pc, #60]	; (8001c34 <HAL_GPIO_Init+0x2d0>)
 8001bf6:	68da      	ldr	r2, [r3, #12]
 8001bf8:	490e      	ldr	r1, [pc, #56]	; (8001c34 <HAL_GPIO_Init+0x2d0>)
 8001bfa:	69bb      	ldr	r3, [r7, #24]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	60cb      	str	r3, [r1, #12]
 8001c00:	e021      	b.n	8001c46 <HAL_GPIO_Init+0x2e2>
 8001c02:	bf00      	nop
 8001c04:	10320000 	.word	0x10320000
 8001c08:	10310000 	.word	0x10310000
 8001c0c:	10220000 	.word	0x10220000
 8001c10:	10210000 	.word	0x10210000
 8001c14:	10120000 	.word	0x10120000
 8001c18:	10110000 	.word	0x10110000
 8001c1c:	40021000 	.word	0x40021000
 8001c20:	40010000 	.word	0x40010000
 8001c24:	40010800 	.word	0x40010800
 8001c28:	40010c00 	.word	0x40010c00
 8001c2c:	40011000 	.word	0x40011000
 8001c30:	40011400 	.word	0x40011400
 8001c34:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c38:	4b0b      	ldr	r3, [pc, #44]	; (8001c68 <HAL_GPIO_Init+0x304>)
 8001c3a:	68da      	ldr	r2, [r3, #12]
 8001c3c:	69bb      	ldr	r3, [r7, #24]
 8001c3e:	43db      	mvns	r3, r3
 8001c40:	4909      	ldr	r1, [pc, #36]	; (8001c68 <HAL_GPIO_Init+0x304>)
 8001c42:	4013      	ands	r3, r2
 8001c44:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c48:	3301      	adds	r3, #1
 8001c4a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c52:	fa22 f303 	lsr.w	r3, r2, r3
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	f47f ae8e 	bne.w	8001978 <HAL_GPIO_Init+0x14>
  }
}
 8001c5c:	bf00      	nop
 8001c5e:	bf00      	nop
 8001c60:	372c      	adds	r7, #44	; 0x2c
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bc80      	pop	{r7}
 8001c66:	4770      	bx	lr
 8001c68:	40010400 	.word	0x40010400

08001c6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	460b      	mov	r3, r1
 8001c76:	807b      	strh	r3, [r7, #2]
 8001c78:	4613      	mov	r3, r2
 8001c7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c7c:	787b      	ldrb	r3, [r7, #1]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d003      	beq.n	8001c8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c82:	887a      	ldrh	r2, [r7, #2]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c88:	e003      	b.n	8001c92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c8a:	887b      	ldrh	r3, [r7, #2]
 8001c8c:	041a      	lsls	r2, r3, #16
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	611a      	str	r2, [r3, #16]
}
 8001c92:	bf00      	nop
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bc80      	pop	{r7}
 8001c9a:	4770      	bx	lr

08001c9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b086      	sub	sp, #24
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d101      	bne.n	8001cae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e272      	b.n	8002194 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 0301 	and.w	r3, r3, #1
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	f000 8087 	beq.w	8001dca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001cbc:	4b92      	ldr	r3, [pc, #584]	; (8001f08 <HAL_RCC_OscConfig+0x26c>)
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f003 030c 	and.w	r3, r3, #12
 8001cc4:	2b04      	cmp	r3, #4
 8001cc6:	d00c      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001cc8:	4b8f      	ldr	r3, [pc, #572]	; (8001f08 <HAL_RCC_OscConfig+0x26c>)
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f003 030c 	and.w	r3, r3, #12
 8001cd0:	2b08      	cmp	r3, #8
 8001cd2:	d112      	bne.n	8001cfa <HAL_RCC_OscConfig+0x5e>
 8001cd4:	4b8c      	ldr	r3, [pc, #560]	; (8001f08 <HAL_RCC_OscConfig+0x26c>)
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ce0:	d10b      	bne.n	8001cfa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ce2:	4b89      	ldr	r3, [pc, #548]	; (8001f08 <HAL_RCC_OscConfig+0x26c>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d06c      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x12c>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d168      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e24c      	b.n	8002194 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d02:	d106      	bne.n	8001d12 <HAL_RCC_OscConfig+0x76>
 8001d04:	4b80      	ldr	r3, [pc, #512]	; (8001f08 <HAL_RCC_OscConfig+0x26c>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a7f      	ldr	r2, [pc, #508]	; (8001f08 <HAL_RCC_OscConfig+0x26c>)
 8001d0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d0e:	6013      	str	r3, [r2, #0]
 8001d10:	e02e      	b.n	8001d70 <HAL_RCC_OscConfig+0xd4>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d10c      	bne.n	8001d34 <HAL_RCC_OscConfig+0x98>
 8001d1a:	4b7b      	ldr	r3, [pc, #492]	; (8001f08 <HAL_RCC_OscConfig+0x26c>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a7a      	ldr	r2, [pc, #488]	; (8001f08 <HAL_RCC_OscConfig+0x26c>)
 8001d20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d24:	6013      	str	r3, [r2, #0]
 8001d26:	4b78      	ldr	r3, [pc, #480]	; (8001f08 <HAL_RCC_OscConfig+0x26c>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a77      	ldr	r2, [pc, #476]	; (8001f08 <HAL_RCC_OscConfig+0x26c>)
 8001d2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d30:	6013      	str	r3, [r2, #0]
 8001d32:	e01d      	b.n	8001d70 <HAL_RCC_OscConfig+0xd4>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d3c:	d10c      	bne.n	8001d58 <HAL_RCC_OscConfig+0xbc>
 8001d3e:	4b72      	ldr	r3, [pc, #456]	; (8001f08 <HAL_RCC_OscConfig+0x26c>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a71      	ldr	r2, [pc, #452]	; (8001f08 <HAL_RCC_OscConfig+0x26c>)
 8001d44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d48:	6013      	str	r3, [r2, #0]
 8001d4a:	4b6f      	ldr	r3, [pc, #444]	; (8001f08 <HAL_RCC_OscConfig+0x26c>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a6e      	ldr	r2, [pc, #440]	; (8001f08 <HAL_RCC_OscConfig+0x26c>)
 8001d50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d54:	6013      	str	r3, [r2, #0]
 8001d56:	e00b      	b.n	8001d70 <HAL_RCC_OscConfig+0xd4>
 8001d58:	4b6b      	ldr	r3, [pc, #428]	; (8001f08 <HAL_RCC_OscConfig+0x26c>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a6a      	ldr	r2, [pc, #424]	; (8001f08 <HAL_RCC_OscConfig+0x26c>)
 8001d5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d62:	6013      	str	r3, [r2, #0]
 8001d64:	4b68      	ldr	r3, [pc, #416]	; (8001f08 <HAL_RCC_OscConfig+0x26c>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a67      	ldr	r2, [pc, #412]	; (8001f08 <HAL_RCC_OscConfig+0x26c>)
 8001d6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d6e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d013      	beq.n	8001da0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d78:	f7fe fdf0 	bl	800095c <HAL_GetTick>
 8001d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d7e:	e008      	b.n	8001d92 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d80:	f7fe fdec 	bl	800095c <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	2b64      	cmp	r3, #100	; 0x64
 8001d8c:	d901      	bls.n	8001d92 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e200      	b.n	8002194 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d92:	4b5d      	ldr	r3, [pc, #372]	; (8001f08 <HAL_RCC_OscConfig+0x26c>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d0f0      	beq.n	8001d80 <HAL_RCC_OscConfig+0xe4>
 8001d9e:	e014      	b.n	8001dca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da0:	f7fe fddc 	bl	800095c <HAL_GetTick>
 8001da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001da6:	e008      	b.n	8001dba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001da8:	f7fe fdd8 	bl	800095c <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	2b64      	cmp	r3, #100	; 0x64
 8001db4:	d901      	bls.n	8001dba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	e1ec      	b.n	8002194 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dba:	4b53      	ldr	r3, [pc, #332]	; (8001f08 <HAL_RCC_OscConfig+0x26c>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d1f0      	bne.n	8001da8 <HAL_RCC_OscConfig+0x10c>
 8001dc6:	e000      	b.n	8001dca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 0302 	and.w	r3, r3, #2
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d063      	beq.n	8001e9e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001dd6:	4b4c      	ldr	r3, [pc, #304]	; (8001f08 <HAL_RCC_OscConfig+0x26c>)
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	f003 030c 	and.w	r3, r3, #12
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d00b      	beq.n	8001dfa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001de2:	4b49      	ldr	r3, [pc, #292]	; (8001f08 <HAL_RCC_OscConfig+0x26c>)
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f003 030c 	and.w	r3, r3, #12
 8001dea:	2b08      	cmp	r3, #8
 8001dec:	d11c      	bne.n	8001e28 <HAL_RCC_OscConfig+0x18c>
 8001dee:	4b46      	ldr	r3, [pc, #280]	; (8001f08 <HAL_RCC_OscConfig+0x26c>)
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d116      	bne.n	8001e28 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dfa:	4b43      	ldr	r3, [pc, #268]	; (8001f08 <HAL_RCC_OscConfig+0x26c>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 0302 	and.w	r3, r3, #2
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d005      	beq.n	8001e12 <HAL_RCC_OscConfig+0x176>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	691b      	ldr	r3, [r3, #16]
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d001      	beq.n	8001e12 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e1c0      	b.n	8002194 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e12:	4b3d      	ldr	r3, [pc, #244]	; (8001f08 <HAL_RCC_OscConfig+0x26c>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	695b      	ldr	r3, [r3, #20]
 8001e1e:	00db      	lsls	r3, r3, #3
 8001e20:	4939      	ldr	r1, [pc, #228]	; (8001f08 <HAL_RCC_OscConfig+0x26c>)
 8001e22:	4313      	orrs	r3, r2
 8001e24:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e26:	e03a      	b.n	8001e9e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	691b      	ldr	r3, [r3, #16]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d020      	beq.n	8001e72 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e30:	4b36      	ldr	r3, [pc, #216]	; (8001f0c <HAL_RCC_OscConfig+0x270>)
 8001e32:	2201      	movs	r2, #1
 8001e34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e36:	f7fe fd91 	bl	800095c <HAL_GetTick>
 8001e3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e3c:	e008      	b.n	8001e50 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e3e:	f7fe fd8d 	bl	800095c <HAL_GetTick>
 8001e42:	4602      	mov	r2, r0
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d901      	bls.n	8001e50 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	e1a1      	b.n	8002194 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e50:	4b2d      	ldr	r3, [pc, #180]	; (8001f08 <HAL_RCC_OscConfig+0x26c>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0302 	and.w	r3, r3, #2
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d0f0      	beq.n	8001e3e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e5c:	4b2a      	ldr	r3, [pc, #168]	; (8001f08 <HAL_RCC_OscConfig+0x26c>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	695b      	ldr	r3, [r3, #20]
 8001e68:	00db      	lsls	r3, r3, #3
 8001e6a:	4927      	ldr	r1, [pc, #156]	; (8001f08 <HAL_RCC_OscConfig+0x26c>)
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	600b      	str	r3, [r1, #0]
 8001e70:	e015      	b.n	8001e9e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e72:	4b26      	ldr	r3, [pc, #152]	; (8001f0c <HAL_RCC_OscConfig+0x270>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e78:	f7fe fd70 	bl	800095c <HAL_GetTick>
 8001e7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e7e:	e008      	b.n	8001e92 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e80:	f7fe fd6c 	bl	800095c <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d901      	bls.n	8001e92 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e180      	b.n	8002194 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e92:	4b1d      	ldr	r3, [pc, #116]	; (8001f08 <HAL_RCC_OscConfig+0x26c>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 0302 	and.w	r3, r3, #2
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d1f0      	bne.n	8001e80 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0308 	and.w	r3, r3, #8
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d03a      	beq.n	8001f20 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	699b      	ldr	r3, [r3, #24]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d019      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001eb2:	4b17      	ldr	r3, [pc, #92]	; (8001f10 <HAL_RCC_OscConfig+0x274>)
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eb8:	f7fe fd50 	bl	800095c <HAL_GetTick>
 8001ebc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ebe:	e008      	b.n	8001ed2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ec0:	f7fe fd4c 	bl	800095c <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d901      	bls.n	8001ed2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e160      	b.n	8002194 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ed2:	4b0d      	ldr	r3, [pc, #52]	; (8001f08 <HAL_RCC_OscConfig+0x26c>)
 8001ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed6:	f003 0302 	and.w	r3, r3, #2
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d0f0      	beq.n	8001ec0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001ede:	2001      	movs	r0, #1
 8001ee0:	f000 fad8 	bl	8002494 <RCC_Delay>
 8001ee4:	e01c      	b.n	8001f20 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ee6:	4b0a      	ldr	r3, [pc, #40]	; (8001f10 <HAL_RCC_OscConfig+0x274>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eec:	f7fe fd36 	bl	800095c <HAL_GetTick>
 8001ef0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ef2:	e00f      	b.n	8001f14 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ef4:	f7fe fd32 	bl	800095c <HAL_GetTick>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d908      	bls.n	8001f14 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001f02:	2303      	movs	r3, #3
 8001f04:	e146      	b.n	8002194 <HAL_RCC_OscConfig+0x4f8>
 8001f06:	bf00      	nop
 8001f08:	40021000 	.word	0x40021000
 8001f0c:	42420000 	.word	0x42420000
 8001f10:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f14:	4b92      	ldr	r3, [pc, #584]	; (8002160 <HAL_RCC_OscConfig+0x4c4>)
 8001f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f18:	f003 0302 	and.w	r3, r3, #2
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d1e9      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0304 	and.w	r3, r3, #4
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	f000 80a6 	beq.w	800207a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f32:	4b8b      	ldr	r3, [pc, #556]	; (8002160 <HAL_RCC_OscConfig+0x4c4>)
 8001f34:	69db      	ldr	r3, [r3, #28]
 8001f36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d10d      	bne.n	8001f5a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f3e:	4b88      	ldr	r3, [pc, #544]	; (8002160 <HAL_RCC_OscConfig+0x4c4>)
 8001f40:	69db      	ldr	r3, [r3, #28]
 8001f42:	4a87      	ldr	r2, [pc, #540]	; (8002160 <HAL_RCC_OscConfig+0x4c4>)
 8001f44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f48:	61d3      	str	r3, [r2, #28]
 8001f4a:	4b85      	ldr	r3, [pc, #532]	; (8002160 <HAL_RCC_OscConfig+0x4c4>)
 8001f4c:	69db      	ldr	r3, [r3, #28]
 8001f4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f52:	60bb      	str	r3, [r7, #8]
 8001f54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f56:	2301      	movs	r3, #1
 8001f58:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f5a:	4b82      	ldr	r3, [pc, #520]	; (8002164 <HAL_RCC_OscConfig+0x4c8>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d118      	bne.n	8001f98 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f66:	4b7f      	ldr	r3, [pc, #508]	; (8002164 <HAL_RCC_OscConfig+0x4c8>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a7e      	ldr	r2, [pc, #504]	; (8002164 <HAL_RCC_OscConfig+0x4c8>)
 8001f6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f72:	f7fe fcf3 	bl	800095c <HAL_GetTick>
 8001f76:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f78:	e008      	b.n	8001f8c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f7a:	f7fe fcef 	bl	800095c <HAL_GetTick>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	2b64      	cmp	r3, #100	; 0x64
 8001f86:	d901      	bls.n	8001f8c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f88:	2303      	movs	r3, #3
 8001f8a:	e103      	b.n	8002194 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f8c:	4b75      	ldr	r3, [pc, #468]	; (8002164 <HAL_RCC_OscConfig+0x4c8>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d0f0      	beq.n	8001f7a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d106      	bne.n	8001fae <HAL_RCC_OscConfig+0x312>
 8001fa0:	4b6f      	ldr	r3, [pc, #444]	; (8002160 <HAL_RCC_OscConfig+0x4c4>)
 8001fa2:	6a1b      	ldr	r3, [r3, #32]
 8001fa4:	4a6e      	ldr	r2, [pc, #440]	; (8002160 <HAL_RCC_OscConfig+0x4c4>)
 8001fa6:	f043 0301 	orr.w	r3, r3, #1
 8001faa:	6213      	str	r3, [r2, #32]
 8001fac:	e02d      	b.n	800200a <HAL_RCC_OscConfig+0x36e>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	68db      	ldr	r3, [r3, #12]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d10c      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x334>
 8001fb6:	4b6a      	ldr	r3, [pc, #424]	; (8002160 <HAL_RCC_OscConfig+0x4c4>)
 8001fb8:	6a1b      	ldr	r3, [r3, #32]
 8001fba:	4a69      	ldr	r2, [pc, #420]	; (8002160 <HAL_RCC_OscConfig+0x4c4>)
 8001fbc:	f023 0301 	bic.w	r3, r3, #1
 8001fc0:	6213      	str	r3, [r2, #32]
 8001fc2:	4b67      	ldr	r3, [pc, #412]	; (8002160 <HAL_RCC_OscConfig+0x4c4>)
 8001fc4:	6a1b      	ldr	r3, [r3, #32]
 8001fc6:	4a66      	ldr	r2, [pc, #408]	; (8002160 <HAL_RCC_OscConfig+0x4c4>)
 8001fc8:	f023 0304 	bic.w	r3, r3, #4
 8001fcc:	6213      	str	r3, [r2, #32]
 8001fce:	e01c      	b.n	800200a <HAL_RCC_OscConfig+0x36e>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	2b05      	cmp	r3, #5
 8001fd6:	d10c      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x356>
 8001fd8:	4b61      	ldr	r3, [pc, #388]	; (8002160 <HAL_RCC_OscConfig+0x4c4>)
 8001fda:	6a1b      	ldr	r3, [r3, #32]
 8001fdc:	4a60      	ldr	r2, [pc, #384]	; (8002160 <HAL_RCC_OscConfig+0x4c4>)
 8001fde:	f043 0304 	orr.w	r3, r3, #4
 8001fe2:	6213      	str	r3, [r2, #32]
 8001fe4:	4b5e      	ldr	r3, [pc, #376]	; (8002160 <HAL_RCC_OscConfig+0x4c4>)
 8001fe6:	6a1b      	ldr	r3, [r3, #32]
 8001fe8:	4a5d      	ldr	r2, [pc, #372]	; (8002160 <HAL_RCC_OscConfig+0x4c4>)
 8001fea:	f043 0301 	orr.w	r3, r3, #1
 8001fee:	6213      	str	r3, [r2, #32]
 8001ff0:	e00b      	b.n	800200a <HAL_RCC_OscConfig+0x36e>
 8001ff2:	4b5b      	ldr	r3, [pc, #364]	; (8002160 <HAL_RCC_OscConfig+0x4c4>)
 8001ff4:	6a1b      	ldr	r3, [r3, #32]
 8001ff6:	4a5a      	ldr	r2, [pc, #360]	; (8002160 <HAL_RCC_OscConfig+0x4c4>)
 8001ff8:	f023 0301 	bic.w	r3, r3, #1
 8001ffc:	6213      	str	r3, [r2, #32]
 8001ffe:	4b58      	ldr	r3, [pc, #352]	; (8002160 <HAL_RCC_OscConfig+0x4c4>)
 8002000:	6a1b      	ldr	r3, [r3, #32]
 8002002:	4a57      	ldr	r2, [pc, #348]	; (8002160 <HAL_RCC_OscConfig+0x4c4>)
 8002004:	f023 0304 	bic.w	r3, r3, #4
 8002008:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	68db      	ldr	r3, [r3, #12]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d015      	beq.n	800203e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002012:	f7fe fca3 	bl	800095c <HAL_GetTick>
 8002016:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002018:	e00a      	b.n	8002030 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800201a:	f7fe fc9f 	bl	800095c <HAL_GetTick>
 800201e:	4602      	mov	r2, r0
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	f241 3288 	movw	r2, #5000	; 0x1388
 8002028:	4293      	cmp	r3, r2
 800202a:	d901      	bls.n	8002030 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800202c:	2303      	movs	r3, #3
 800202e:	e0b1      	b.n	8002194 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002030:	4b4b      	ldr	r3, [pc, #300]	; (8002160 <HAL_RCC_OscConfig+0x4c4>)
 8002032:	6a1b      	ldr	r3, [r3, #32]
 8002034:	f003 0302 	and.w	r3, r3, #2
 8002038:	2b00      	cmp	r3, #0
 800203a:	d0ee      	beq.n	800201a <HAL_RCC_OscConfig+0x37e>
 800203c:	e014      	b.n	8002068 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800203e:	f7fe fc8d 	bl	800095c <HAL_GetTick>
 8002042:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002044:	e00a      	b.n	800205c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002046:	f7fe fc89 	bl	800095c <HAL_GetTick>
 800204a:	4602      	mov	r2, r0
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	f241 3288 	movw	r2, #5000	; 0x1388
 8002054:	4293      	cmp	r3, r2
 8002056:	d901      	bls.n	800205c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002058:	2303      	movs	r3, #3
 800205a:	e09b      	b.n	8002194 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800205c:	4b40      	ldr	r3, [pc, #256]	; (8002160 <HAL_RCC_OscConfig+0x4c4>)
 800205e:	6a1b      	ldr	r3, [r3, #32]
 8002060:	f003 0302 	and.w	r3, r3, #2
 8002064:	2b00      	cmp	r3, #0
 8002066:	d1ee      	bne.n	8002046 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002068:	7dfb      	ldrb	r3, [r7, #23]
 800206a:	2b01      	cmp	r3, #1
 800206c:	d105      	bne.n	800207a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800206e:	4b3c      	ldr	r3, [pc, #240]	; (8002160 <HAL_RCC_OscConfig+0x4c4>)
 8002070:	69db      	ldr	r3, [r3, #28]
 8002072:	4a3b      	ldr	r2, [pc, #236]	; (8002160 <HAL_RCC_OscConfig+0x4c4>)
 8002074:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002078:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	69db      	ldr	r3, [r3, #28]
 800207e:	2b00      	cmp	r3, #0
 8002080:	f000 8087 	beq.w	8002192 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002084:	4b36      	ldr	r3, [pc, #216]	; (8002160 <HAL_RCC_OscConfig+0x4c4>)
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f003 030c 	and.w	r3, r3, #12
 800208c:	2b08      	cmp	r3, #8
 800208e:	d061      	beq.n	8002154 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	69db      	ldr	r3, [r3, #28]
 8002094:	2b02      	cmp	r3, #2
 8002096:	d146      	bne.n	8002126 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002098:	4b33      	ldr	r3, [pc, #204]	; (8002168 <HAL_RCC_OscConfig+0x4cc>)
 800209a:	2200      	movs	r2, #0
 800209c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800209e:	f7fe fc5d 	bl	800095c <HAL_GetTick>
 80020a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020a4:	e008      	b.n	80020b8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020a6:	f7fe fc59 	bl	800095c <HAL_GetTick>
 80020aa:	4602      	mov	r2, r0
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d901      	bls.n	80020b8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80020b4:	2303      	movs	r3, #3
 80020b6:	e06d      	b.n	8002194 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020b8:	4b29      	ldr	r3, [pc, #164]	; (8002160 <HAL_RCC_OscConfig+0x4c4>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d1f0      	bne.n	80020a6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6a1b      	ldr	r3, [r3, #32]
 80020c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020cc:	d108      	bne.n	80020e0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80020ce:	4b24      	ldr	r3, [pc, #144]	; (8002160 <HAL_RCC_OscConfig+0x4c4>)
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	4921      	ldr	r1, [pc, #132]	; (8002160 <HAL_RCC_OscConfig+0x4c4>)
 80020dc:	4313      	orrs	r3, r2
 80020de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020e0:	4b1f      	ldr	r3, [pc, #124]	; (8002160 <HAL_RCC_OscConfig+0x4c4>)
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6a19      	ldr	r1, [r3, #32]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f0:	430b      	orrs	r3, r1
 80020f2:	491b      	ldr	r1, [pc, #108]	; (8002160 <HAL_RCC_OscConfig+0x4c4>)
 80020f4:	4313      	orrs	r3, r2
 80020f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020f8:	4b1b      	ldr	r3, [pc, #108]	; (8002168 <HAL_RCC_OscConfig+0x4cc>)
 80020fa:	2201      	movs	r2, #1
 80020fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020fe:	f7fe fc2d 	bl	800095c <HAL_GetTick>
 8002102:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002104:	e008      	b.n	8002118 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002106:	f7fe fc29 	bl	800095c <HAL_GetTick>
 800210a:	4602      	mov	r2, r0
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	2b02      	cmp	r3, #2
 8002112:	d901      	bls.n	8002118 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002114:	2303      	movs	r3, #3
 8002116:	e03d      	b.n	8002194 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002118:	4b11      	ldr	r3, [pc, #68]	; (8002160 <HAL_RCC_OscConfig+0x4c4>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002120:	2b00      	cmp	r3, #0
 8002122:	d0f0      	beq.n	8002106 <HAL_RCC_OscConfig+0x46a>
 8002124:	e035      	b.n	8002192 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002126:	4b10      	ldr	r3, [pc, #64]	; (8002168 <HAL_RCC_OscConfig+0x4cc>)
 8002128:	2200      	movs	r2, #0
 800212a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800212c:	f7fe fc16 	bl	800095c <HAL_GetTick>
 8002130:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002132:	e008      	b.n	8002146 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002134:	f7fe fc12 	bl	800095c <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	2b02      	cmp	r3, #2
 8002140:	d901      	bls.n	8002146 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e026      	b.n	8002194 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002146:	4b06      	ldr	r3, [pc, #24]	; (8002160 <HAL_RCC_OscConfig+0x4c4>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d1f0      	bne.n	8002134 <HAL_RCC_OscConfig+0x498>
 8002152:	e01e      	b.n	8002192 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	69db      	ldr	r3, [r3, #28]
 8002158:	2b01      	cmp	r3, #1
 800215a:	d107      	bne.n	800216c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e019      	b.n	8002194 <HAL_RCC_OscConfig+0x4f8>
 8002160:	40021000 	.word	0x40021000
 8002164:	40007000 	.word	0x40007000
 8002168:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800216c:	4b0b      	ldr	r3, [pc, #44]	; (800219c <HAL_RCC_OscConfig+0x500>)
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6a1b      	ldr	r3, [r3, #32]
 800217c:	429a      	cmp	r2, r3
 800217e:	d106      	bne.n	800218e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800218a:	429a      	cmp	r2, r3
 800218c:	d001      	beq.n	8002192 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e000      	b.n	8002194 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002192:	2300      	movs	r3, #0
}
 8002194:	4618      	mov	r0, r3
 8002196:	3718      	adds	r7, #24
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	40021000 	.word	0x40021000

080021a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d101      	bne.n	80021b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e0d0      	b.n	8002356 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021b4:	4b6a      	ldr	r3, [pc, #424]	; (8002360 <HAL_RCC_ClockConfig+0x1c0>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0307 	and.w	r3, r3, #7
 80021bc:	683a      	ldr	r2, [r7, #0]
 80021be:	429a      	cmp	r2, r3
 80021c0:	d910      	bls.n	80021e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021c2:	4b67      	ldr	r3, [pc, #412]	; (8002360 <HAL_RCC_ClockConfig+0x1c0>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f023 0207 	bic.w	r2, r3, #7
 80021ca:	4965      	ldr	r1, [pc, #404]	; (8002360 <HAL_RCC_ClockConfig+0x1c0>)
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021d2:	4b63      	ldr	r3, [pc, #396]	; (8002360 <HAL_RCC_ClockConfig+0x1c0>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0307 	and.w	r3, r3, #7
 80021da:	683a      	ldr	r2, [r7, #0]
 80021dc:	429a      	cmp	r2, r3
 80021de:	d001      	beq.n	80021e4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e0b8      	b.n	8002356 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0302 	and.w	r3, r3, #2
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d020      	beq.n	8002232 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0304 	and.w	r3, r3, #4
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d005      	beq.n	8002208 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021fc:	4b59      	ldr	r3, [pc, #356]	; (8002364 <HAL_RCC_ClockConfig+0x1c4>)
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	4a58      	ldr	r2, [pc, #352]	; (8002364 <HAL_RCC_ClockConfig+0x1c4>)
 8002202:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002206:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0308 	and.w	r3, r3, #8
 8002210:	2b00      	cmp	r3, #0
 8002212:	d005      	beq.n	8002220 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002214:	4b53      	ldr	r3, [pc, #332]	; (8002364 <HAL_RCC_ClockConfig+0x1c4>)
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	4a52      	ldr	r2, [pc, #328]	; (8002364 <HAL_RCC_ClockConfig+0x1c4>)
 800221a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800221e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002220:	4b50      	ldr	r3, [pc, #320]	; (8002364 <HAL_RCC_ClockConfig+0x1c4>)
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	494d      	ldr	r1, [pc, #308]	; (8002364 <HAL_RCC_ClockConfig+0x1c4>)
 800222e:	4313      	orrs	r3, r2
 8002230:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0301 	and.w	r3, r3, #1
 800223a:	2b00      	cmp	r3, #0
 800223c:	d040      	beq.n	80022c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	2b01      	cmp	r3, #1
 8002244:	d107      	bne.n	8002256 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002246:	4b47      	ldr	r3, [pc, #284]	; (8002364 <HAL_RCC_ClockConfig+0x1c4>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d115      	bne.n	800227e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e07f      	b.n	8002356 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	2b02      	cmp	r3, #2
 800225c:	d107      	bne.n	800226e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800225e:	4b41      	ldr	r3, [pc, #260]	; (8002364 <HAL_RCC_ClockConfig+0x1c4>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d109      	bne.n	800227e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e073      	b.n	8002356 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800226e:	4b3d      	ldr	r3, [pc, #244]	; (8002364 <HAL_RCC_ClockConfig+0x1c4>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0302 	and.w	r3, r3, #2
 8002276:	2b00      	cmp	r3, #0
 8002278:	d101      	bne.n	800227e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e06b      	b.n	8002356 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800227e:	4b39      	ldr	r3, [pc, #228]	; (8002364 <HAL_RCC_ClockConfig+0x1c4>)
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	f023 0203 	bic.w	r2, r3, #3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	4936      	ldr	r1, [pc, #216]	; (8002364 <HAL_RCC_ClockConfig+0x1c4>)
 800228c:	4313      	orrs	r3, r2
 800228e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002290:	f7fe fb64 	bl	800095c <HAL_GetTick>
 8002294:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002296:	e00a      	b.n	80022ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002298:	f7fe fb60 	bl	800095c <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d901      	bls.n	80022ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e053      	b.n	8002356 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ae:	4b2d      	ldr	r3, [pc, #180]	; (8002364 <HAL_RCC_ClockConfig+0x1c4>)
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f003 020c 	and.w	r2, r3, #12
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	429a      	cmp	r2, r3
 80022be:	d1eb      	bne.n	8002298 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022c0:	4b27      	ldr	r3, [pc, #156]	; (8002360 <HAL_RCC_ClockConfig+0x1c0>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0307 	and.w	r3, r3, #7
 80022c8:	683a      	ldr	r2, [r7, #0]
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d210      	bcs.n	80022f0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ce:	4b24      	ldr	r3, [pc, #144]	; (8002360 <HAL_RCC_ClockConfig+0x1c0>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f023 0207 	bic.w	r2, r3, #7
 80022d6:	4922      	ldr	r1, [pc, #136]	; (8002360 <HAL_RCC_ClockConfig+0x1c0>)
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	4313      	orrs	r3, r2
 80022dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022de:	4b20      	ldr	r3, [pc, #128]	; (8002360 <HAL_RCC_ClockConfig+0x1c0>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0307 	and.w	r3, r3, #7
 80022e6:	683a      	ldr	r2, [r7, #0]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d001      	beq.n	80022f0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e032      	b.n	8002356 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0304 	and.w	r3, r3, #4
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d008      	beq.n	800230e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022fc:	4b19      	ldr	r3, [pc, #100]	; (8002364 <HAL_RCC_ClockConfig+0x1c4>)
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	4916      	ldr	r1, [pc, #88]	; (8002364 <HAL_RCC_ClockConfig+0x1c4>)
 800230a:	4313      	orrs	r3, r2
 800230c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0308 	and.w	r3, r3, #8
 8002316:	2b00      	cmp	r3, #0
 8002318:	d009      	beq.n	800232e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800231a:	4b12      	ldr	r3, [pc, #72]	; (8002364 <HAL_RCC_ClockConfig+0x1c4>)
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	691b      	ldr	r3, [r3, #16]
 8002326:	00db      	lsls	r3, r3, #3
 8002328:	490e      	ldr	r1, [pc, #56]	; (8002364 <HAL_RCC_ClockConfig+0x1c4>)
 800232a:	4313      	orrs	r3, r2
 800232c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800232e:	f000 f821 	bl	8002374 <HAL_RCC_GetSysClockFreq>
 8002332:	4602      	mov	r2, r0
 8002334:	4b0b      	ldr	r3, [pc, #44]	; (8002364 <HAL_RCC_ClockConfig+0x1c4>)
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	091b      	lsrs	r3, r3, #4
 800233a:	f003 030f 	and.w	r3, r3, #15
 800233e:	490a      	ldr	r1, [pc, #40]	; (8002368 <HAL_RCC_ClockConfig+0x1c8>)
 8002340:	5ccb      	ldrb	r3, [r1, r3]
 8002342:	fa22 f303 	lsr.w	r3, r2, r3
 8002346:	4a09      	ldr	r2, [pc, #36]	; (800236c <HAL_RCC_ClockConfig+0x1cc>)
 8002348:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800234a:	4b09      	ldr	r3, [pc, #36]	; (8002370 <HAL_RCC_ClockConfig+0x1d0>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4618      	mov	r0, r3
 8002350:	f7fe fac2 	bl	80008d8 <HAL_InitTick>

  return HAL_OK;
 8002354:	2300      	movs	r3, #0
}
 8002356:	4618      	mov	r0, r3
 8002358:	3710      	adds	r7, #16
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	40022000 	.word	0x40022000
 8002364:	40021000 	.word	0x40021000
 8002368:	080036bc 	.word	0x080036bc
 800236c:	20000008 	.word	0x20000008
 8002370:	2000000c 	.word	0x2000000c

08002374 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002374:	b490      	push	{r4, r7}
 8002376:	b08a      	sub	sp, #40	; 0x28
 8002378:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800237a:	4b29      	ldr	r3, [pc, #164]	; (8002420 <HAL_RCC_GetSysClockFreq+0xac>)
 800237c:	1d3c      	adds	r4, r7, #4
 800237e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002380:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002384:	f240 2301 	movw	r3, #513	; 0x201
 8002388:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800238a:	2300      	movs	r3, #0
 800238c:	61fb      	str	r3, [r7, #28]
 800238e:	2300      	movs	r3, #0
 8002390:	61bb      	str	r3, [r7, #24]
 8002392:	2300      	movs	r3, #0
 8002394:	627b      	str	r3, [r7, #36]	; 0x24
 8002396:	2300      	movs	r3, #0
 8002398:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800239a:	2300      	movs	r3, #0
 800239c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800239e:	4b21      	ldr	r3, [pc, #132]	; (8002424 <HAL_RCC_GetSysClockFreq+0xb0>)
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	f003 030c 	and.w	r3, r3, #12
 80023aa:	2b04      	cmp	r3, #4
 80023ac:	d002      	beq.n	80023b4 <HAL_RCC_GetSysClockFreq+0x40>
 80023ae:	2b08      	cmp	r3, #8
 80023b0:	d003      	beq.n	80023ba <HAL_RCC_GetSysClockFreq+0x46>
 80023b2:	e02b      	b.n	800240c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80023b4:	4b1c      	ldr	r3, [pc, #112]	; (8002428 <HAL_RCC_GetSysClockFreq+0xb4>)
 80023b6:	623b      	str	r3, [r7, #32]
      break;
 80023b8:	e02b      	b.n	8002412 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	0c9b      	lsrs	r3, r3, #18
 80023be:	f003 030f 	and.w	r3, r3, #15
 80023c2:	3328      	adds	r3, #40	; 0x28
 80023c4:	443b      	add	r3, r7
 80023c6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80023ca:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d012      	beq.n	80023fc <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80023d6:	4b13      	ldr	r3, [pc, #76]	; (8002424 <HAL_RCC_GetSysClockFreq+0xb0>)
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	0c5b      	lsrs	r3, r3, #17
 80023dc:	f003 0301 	and.w	r3, r3, #1
 80023e0:	3328      	adds	r3, #40	; 0x28
 80023e2:	443b      	add	r3, r7
 80023e4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80023e8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	4a0e      	ldr	r2, [pc, #56]	; (8002428 <HAL_RCC_GetSysClockFreq+0xb4>)
 80023ee:	fb03 f202 	mul.w	r2, r3, r2
 80023f2:	69bb      	ldr	r3, [r7, #24]
 80023f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80023f8:	627b      	str	r3, [r7, #36]	; 0x24
 80023fa:	e004      	b.n	8002406 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	4a0b      	ldr	r2, [pc, #44]	; (800242c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002400:	fb02 f303 	mul.w	r3, r2, r3
 8002404:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002408:	623b      	str	r3, [r7, #32]
      break;
 800240a:	e002      	b.n	8002412 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800240c:	4b06      	ldr	r3, [pc, #24]	; (8002428 <HAL_RCC_GetSysClockFreq+0xb4>)
 800240e:	623b      	str	r3, [r7, #32]
      break;
 8002410:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002412:	6a3b      	ldr	r3, [r7, #32]
}
 8002414:	4618      	mov	r0, r3
 8002416:	3728      	adds	r7, #40	; 0x28
 8002418:	46bd      	mov	sp, r7
 800241a:	bc90      	pop	{r4, r7}
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	080036ac 	.word	0x080036ac
 8002424:	40021000 	.word	0x40021000
 8002428:	007a1200 	.word	0x007a1200
 800242c:	003d0900 	.word	0x003d0900

08002430 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002430:	b480      	push	{r7}
 8002432:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002434:	4b02      	ldr	r3, [pc, #8]	; (8002440 <HAL_RCC_GetHCLKFreq+0x10>)
 8002436:	681b      	ldr	r3, [r3, #0]
}
 8002438:	4618      	mov	r0, r3
 800243a:	46bd      	mov	sp, r7
 800243c:	bc80      	pop	{r7}
 800243e:	4770      	bx	lr
 8002440:	20000008 	.word	0x20000008

08002444 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002448:	f7ff fff2 	bl	8002430 <HAL_RCC_GetHCLKFreq>
 800244c:	4602      	mov	r2, r0
 800244e:	4b05      	ldr	r3, [pc, #20]	; (8002464 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	0a1b      	lsrs	r3, r3, #8
 8002454:	f003 0307 	and.w	r3, r3, #7
 8002458:	4903      	ldr	r1, [pc, #12]	; (8002468 <HAL_RCC_GetPCLK1Freq+0x24>)
 800245a:	5ccb      	ldrb	r3, [r1, r3]
 800245c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002460:	4618      	mov	r0, r3
 8002462:	bd80      	pop	{r7, pc}
 8002464:	40021000 	.word	0x40021000
 8002468:	080036cc 	.word	0x080036cc

0800246c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002470:	f7ff ffde 	bl	8002430 <HAL_RCC_GetHCLKFreq>
 8002474:	4602      	mov	r2, r0
 8002476:	4b05      	ldr	r3, [pc, #20]	; (800248c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	0adb      	lsrs	r3, r3, #11
 800247c:	f003 0307 	and.w	r3, r3, #7
 8002480:	4903      	ldr	r1, [pc, #12]	; (8002490 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002482:	5ccb      	ldrb	r3, [r1, r3]
 8002484:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002488:	4618      	mov	r0, r3
 800248a:	bd80      	pop	{r7, pc}
 800248c:	40021000 	.word	0x40021000
 8002490:	080036cc 	.word	0x080036cc

08002494 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002494:	b480      	push	{r7}
 8002496:	b085      	sub	sp, #20
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800249c:	4b0a      	ldr	r3, [pc, #40]	; (80024c8 <RCC_Delay+0x34>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a0a      	ldr	r2, [pc, #40]	; (80024cc <RCC_Delay+0x38>)
 80024a2:	fba2 2303 	umull	r2, r3, r2, r3
 80024a6:	0a5b      	lsrs	r3, r3, #9
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	fb02 f303 	mul.w	r3, r2, r3
 80024ae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80024b0:	bf00      	nop
  }
  while (Delay --);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	1e5a      	subs	r2, r3, #1
 80024b6:	60fa      	str	r2, [r7, #12]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d1f9      	bne.n	80024b0 <RCC_Delay+0x1c>
}
 80024bc:	bf00      	nop
 80024be:	bf00      	nop
 80024c0:	3714      	adds	r7, #20
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bc80      	pop	{r7}
 80024c6:	4770      	bx	lr
 80024c8:	20000008 	.word	0x20000008
 80024cc:	10624dd3 	.word	0x10624dd3

080024d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b086      	sub	sp, #24
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80024d8:	2300      	movs	r3, #0
 80024da:	613b      	str	r3, [r7, #16]
 80024dc:	2300      	movs	r3, #0
 80024de:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0301 	and.w	r3, r3, #1
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d07d      	beq.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80024ec:	2300      	movs	r3, #0
 80024ee:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024f0:	4b4f      	ldr	r3, [pc, #316]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024f2:	69db      	ldr	r3, [r3, #28]
 80024f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d10d      	bne.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024fc:	4b4c      	ldr	r3, [pc, #304]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024fe:	69db      	ldr	r3, [r3, #28]
 8002500:	4a4b      	ldr	r2, [pc, #300]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002502:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002506:	61d3      	str	r3, [r2, #28]
 8002508:	4b49      	ldr	r3, [pc, #292]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800250a:	69db      	ldr	r3, [r3, #28]
 800250c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002510:	60bb      	str	r3, [r7, #8]
 8002512:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002514:	2301      	movs	r3, #1
 8002516:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002518:	4b46      	ldr	r3, [pc, #280]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002520:	2b00      	cmp	r3, #0
 8002522:	d118      	bne.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002524:	4b43      	ldr	r3, [pc, #268]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a42      	ldr	r2, [pc, #264]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800252a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800252e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002530:	f7fe fa14 	bl	800095c <HAL_GetTick>
 8002534:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002536:	e008      	b.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002538:	f7fe fa10 	bl	800095c <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b64      	cmp	r3, #100	; 0x64
 8002544:	d901      	bls.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e06d      	b.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800254a:	4b3a      	ldr	r3, [pc, #232]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002552:	2b00      	cmp	r3, #0
 8002554:	d0f0      	beq.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002556:	4b36      	ldr	r3, [pc, #216]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002558:	6a1b      	ldr	r3, [r3, #32]
 800255a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800255e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d02e      	beq.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800256e:	68fa      	ldr	r2, [r7, #12]
 8002570:	429a      	cmp	r2, r3
 8002572:	d027      	beq.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002574:	4b2e      	ldr	r3, [pc, #184]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002576:	6a1b      	ldr	r3, [r3, #32]
 8002578:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800257c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800257e:	4b2e      	ldr	r3, [pc, #184]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002580:	2201      	movs	r2, #1
 8002582:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002584:	4b2c      	ldr	r3, [pc, #176]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002586:	2200      	movs	r2, #0
 8002588:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800258a:	4a29      	ldr	r2, [pc, #164]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f003 0301 	and.w	r3, r3, #1
 8002596:	2b00      	cmp	r3, #0
 8002598:	d014      	beq.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800259a:	f7fe f9df 	bl	800095c <HAL_GetTick>
 800259e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025a0:	e00a      	b.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025a2:	f7fe f9db 	bl	800095c <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d901      	bls.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80025b4:	2303      	movs	r3, #3
 80025b6:	e036      	b.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025b8:	4b1d      	ldr	r3, [pc, #116]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025ba:	6a1b      	ldr	r3, [r3, #32]
 80025bc:	f003 0302 	and.w	r3, r3, #2
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d0ee      	beq.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025c4:	4b1a      	ldr	r3, [pc, #104]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025c6:	6a1b      	ldr	r3, [r3, #32]
 80025c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	4917      	ldr	r1, [pc, #92]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025d2:	4313      	orrs	r3, r2
 80025d4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80025d6:	7dfb      	ldrb	r3, [r7, #23]
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d105      	bne.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025dc:	4b14      	ldr	r3, [pc, #80]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025de:	69db      	ldr	r3, [r3, #28]
 80025e0:	4a13      	ldr	r2, [pc, #76]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025e6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0302 	and.w	r3, r3, #2
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d008      	beq.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80025f4:	4b0e      	ldr	r3, [pc, #56]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	490b      	ldr	r1, [pc, #44]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002602:	4313      	orrs	r3, r2
 8002604:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0310 	and.w	r3, r3, #16
 800260e:	2b00      	cmp	r3, #0
 8002610:	d008      	beq.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002612:	4b07      	ldr	r3, [pc, #28]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	4904      	ldr	r1, [pc, #16]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002620:	4313      	orrs	r3, r2
 8002622:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002624:	2300      	movs	r3, #0
}
 8002626:	4618      	mov	r0, r3
 8002628:	3718      	adds	r7, #24
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	40021000 	.word	0x40021000
 8002634:	40007000 	.word	0x40007000
 8002638:	42420440 	.word	0x42420440

0800263c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d101      	bne.n	800264e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e03f      	b.n	80026ce <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002654:	b2db      	uxtb	r3, r3
 8002656:	2b00      	cmp	r3, #0
 8002658:	d106      	bne.n	8002668 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f7fd ffd0 	bl	8000608 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2224      	movs	r2, #36	; 0x24
 800266c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	68da      	ldr	r2, [r3, #12]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800267e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f000 fac9 	bl	8002c18 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	691a      	ldr	r2, [r3, #16]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002694:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	695a      	ldr	r2, [r3, #20]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80026a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	68da      	ldr	r2, [r3, #12]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80026b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2200      	movs	r2, #0
 80026ba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2220      	movs	r2, #32
 80026c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2220      	movs	r2, #32
 80026c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80026cc:	2300      	movs	r3, #0
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3708      	adds	r7, #8
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
	...

080026d8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b086      	sub	sp, #24
 80026dc:	af00      	add	r7, sp, #0
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	60b9      	str	r1, [r7, #8]
 80026e2:	4613      	mov	r3, r2
 80026e4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	2b20      	cmp	r3, #32
 80026f0:	d153      	bne.n	800279a <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d002      	beq.n	80026fe <HAL_UART_Transmit_DMA+0x26>
 80026f8:	88fb      	ldrh	r3, [r7, #6]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d101      	bne.n	8002702 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e04c      	b.n	800279c <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002708:	2b01      	cmp	r3, #1
 800270a:	d101      	bne.n	8002710 <HAL_UART_Transmit_DMA+0x38>
 800270c:	2302      	movs	r3, #2
 800270e:	e045      	b.n	800279c <HAL_UART_Transmit_DMA+0xc4>
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2201      	movs	r2, #1
 8002714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8002718:	68ba      	ldr	r2, [r7, #8]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	88fa      	ldrh	r2, [r7, #6]
 8002722:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	88fa      	ldrh	r2, [r7, #6]
 8002728:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2200      	movs	r2, #0
 800272e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2221      	movs	r2, #33	; 0x21
 8002734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800273c:	4a19      	ldr	r2, [pc, #100]	; (80027a4 <HAL_UART_Transmit_DMA+0xcc>)
 800273e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002744:	4a18      	ldr	r2, [pc, #96]	; (80027a8 <HAL_UART_Transmit_DMA+0xd0>)
 8002746:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800274c:	4a17      	ldr	r2, [pc, #92]	; (80027ac <HAL_UART_Transmit_DMA+0xd4>)
 800274e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002754:	2200      	movs	r2, #0
 8002756:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 8002758:	f107 0308 	add.w	r3, r7, #8
 800275c:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	6819      	ldr	r1, [r3, #0]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	3304      	adds	r3, #4
 800276c:	461a      	mov	r2, r3
 800276e:	88fb      	ldrh	r3, [r7, #6]
 8002770:	f7fe ff2a 	bl	80015c8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800277c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2200      	movs	r2, #0
 8002782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	695a      	ldr	r2, [r3, #20]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002794:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8002796:	2300      	movs	r3, #0
 8002798:	e000      	b.n	800279c <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800279a:	2302      	movs	r3, #2
  }
}
 800279c:	4618      	mov	r0, r3
 800279e:	3718      	adds	r7, #24
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	080028fd 	.word	0x080028fd
 80027a8:	0800294f 	.word	0x0800294f
 80027ac:	08002a37 	.word	0x08002a37

080027b0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	60b9      	str	r1, [r7, #8]
 80027ba:	4613      	mov	r3, r2
 80027bc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	2b20      	cmp	r3, #32
 80027c8:	d11d      	bne.n	8002806 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d002      	beq.n	80027d6 <HAL_UART_Receive_DMA+0x26>
 80027d0:	88fb      	ldrh	r3, [r7, #6]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d101      	bne.n	80027da <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e016      	b.n	8002808 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d101      	bne.n	80027e8 <HAL_UART_Receive_DMA+0x38>
 80027e4:	2302      	movs	r3, #2
 80027e6:	e00f      	b.n	8002808 <HAL_UART_Receive_DMA+0x58>
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2201      	movs	r2, #1
 80027ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2200      	movs	r2, #0
 80027f4:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 80027f6:	88fb      	ldrh	r3, [r7, #6]
 80027f8:	461a      	mov	r2, r3
 80027fa:	68b9      	ldr	r1, [r7, #8]
 80027fc:	68f8      	ldr	r0, [r7, #12]
 80027fe:	f000 f965 	bl	8002acc <UART_Start_Receive_DMA>
 8002802:	4603      	mov	r3, r0
 8002804:	e000      	b.n	8002808 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002806:	2302      	movs	r3, #2
  }
}
 8002808:	4618      	mov	r0, r3
 800280a:	3710      	adds	r7, #16
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}

08002810 <HAL_UART_DMA_Tx_Stop>:

  return HAL_OK;
}

HAL_StatusTypeDef HAL_UART_DMA_Tx_Stop(UART_HandleTypeDef *huart)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002818:	2300      	movs	r3, #0
 800281a:	60fb      	str	r3, [r7, #12]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	695b      	ldr	r3, [r3, #20]
 8002822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002826:	2b00      	cmp	r3, #0
 8002828:	bf14      	ite	ne
 800282a:	2301      	movne	r3, #1
 800282c:	2300      	moveq	r3, #0
 800282e:	b2db      	uxtb	r3, r3
 8002830:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002838:	b2db      	uxtb	r3, r3
 800283a:	2b21      	cmp	r3, #33	; 0x21
 800283c:	d116      	bne.n	800286c <HAL_UART_DMA_Tx_Stop+0x5c>
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d013      	beq.n	800286c <HAL_UART_DMA_Tx_Stop+0x5c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	695a      	ldr	r2, [r3, #20]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002852:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002858:	2b00      	cmp	r3, #0
 800285a:	d004      	beq.n	8002866 <HAL_UART_DMA_Tx_Stop+0x56>
    {
      HAL_DMA_Abort(huart->hdmatx);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002860:	4618      	mov	r0, r3
 8002862:	f7fe ff10 	bl	8001686 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f000 f994 	bl	8002b94 <UART_EndTxTransfer>
  }
  return HAL_OK;
 800286c:	2300      	movs	r3, #0
}
 800286e:	4618      	mov	r0, r3
 8002870:	3710      	adds	r7, #16
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}

08002876 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002876:	b480      	push	{r7}
 8002878:	b083      	sub	sp, #12
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800287e:	bf00      	nop
 8002880:	370c      	adds	r7, #12
 8002882:	46bd      	mov	sp, r7
 8002884:	bc80      	pop	{r7}
 8002886:	4770      	bx	lr

08002888 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002890:	bf00      	nop
 8002892:	370c      	adds	r7, #12
 8002894:	46bd      	mov	sp, r7
 8002896:	bc80      	pop	{r7}
 8002898:	4770      	bx	lr

0800289a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800289a:	b480      	push	{r7}
 800289c:	b083      	sub	sp, #12
 800289e:	af00      	add	r7, sp, #0
 80028a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80028a2:	bf00      	nop
 80028a4:	370c      	adds	r7, #12
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bc80      	pop	{r7}
 80028aa:	4770      	bx	lr

080028ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	460b      	mov	r3, r1
 80028b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80028b8:	bf00      	nop
 80028ba:	370c      	adds	r7, #12
 80028bc:	46bd      	mov	sp, r7
 80028be:	bc80      	pop	{r7}
 80028c0:	4770      	bx	lr

080028c2 <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 80028c2:	b480      	push	{r7}
 80028c4:	b085      	sub	sp, #20
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 80028ca:	2300      	movs	r3, #0
 80028cc:	60fb      	str	r3, [r7, #12]
 80028ce:	2300      	movs	r3, #0
 80028d0:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	b2da      	uxtb	r2, r3
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	4313      	orrs	r3, r2
 80028f0:	b2db      	uxtb	r3, r3
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3714      	adds	r7, #20
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bc80      	pop	{r7}
 80028fa:	4770      	bx	lr

080028fc <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b084      	sub	sp, #16
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002908:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0320 	and.w	r3, r3, #32
 8002914:	2b00      	cmp	r3, #0
 8002916:	d113      	bne.n	8002940 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2200      	movs	r2, #0
 800291c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	695a      	ldr	r2, [r3, #20]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800292c:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	68da      	ldr	r2, [r3, #12]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800293c:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800293e:	e002      	b.n	8002946 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8002940:	68f8      	ldr	r0, [r7, #12]
 8002942:	f7fd fc03 	bl	800014c <HAL_UART_TxCpltCallback>
}
 8002946:	bf00      	nop
 8002948:	3710      	adds	r7, #16
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}

0800294e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800294e:	b580      	push	{r7, lr}
 8002950:	b084      	sub	sp, #16
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800295c:	68f8      	ldr	r0, [r7, #12]
 800295e:	f7ff ff8a 	bl	8002876 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002962:	bf00      	nop
 8002964:	3710      	adds	r7, #16
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}

0800296a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800296a:	b580      	push	{r7, lr}
 800296c:	b084      	sub	sp, #16
 800296e:	af00      	add	r7, sp, #0
 8002970:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002976:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0320 	and.w	r3, r3, #32
 8002982:	2b00      	cmp	r3, #0
 8002984:	d12a      	bne.n	80029dc <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2200      	movs	r2, #0
 800298a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	68da      	ldr	r2, [r3, #12]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800299a:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	695a      	ldr	r2, [r3, #20]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f022 0201 	bic.w	r2, r2, #1
 80029aa:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	695a      	ldr	r2, [r3, #20]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029ba:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2220      	movs	r2, #32
 80029c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d107      	bne.n	80029dc <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	68da      	ldr	r2, [r3, #12]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f022 0210 	bic.w	r2, r2, #16
 80029da:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d106      	bne.n	80029f2 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80029e8:	4619      	mov	r1, r3
 80029ea:	68f8      	ldr	r0, [r7, #12]
 80029ec:	f7ff ff5e 	bl	80028ac <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80029f0:	e002      	b.n	80029f8 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 80029f2:	68f8      	ldr	r0, [r7, #12]
 80029f4:	f7fd fbc0 	bl	8000178 <HAL_UART_RxCpltCallback>
}
 80029f8:	bf00      	nop
 80029fa:	3710      	adds	r7, #16
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}

08002a00 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d108      	bne.n	8002a28 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002a1a:	085b      	lsrs	r3, r3, #1
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	4619      	mov	r1, r3
 8002a20:	68f8      	ldr	r0, [r7, #12]
 8002a22:	f7ff ff43 	bl	80028ac <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002a26:	e002      	b.n	8002a2e <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8002a28:	68f8      	ldr	r0, [r7, #12]
 8002a2a:	f7ff ff2d 	bl	8002888 <HAL_UART_RxHalfCpltCallback>
}
 8002a2e:	bf00      	nop
 8002a30:	3710      	adds	r7, #16
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}

08002a36 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002a36:	b580      	push	{r7, lr}
 8002a38:	b084      	sub	sp, #16
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a46:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	695b      	ldr	r3, [r3, #20]
 8002a4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	bf14      	ite	ne
 8002a56:	2301      	movne	r3, #1
 8002a58:	2300      	moveq	r3, #0
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	2b21      	cmp	r3, #33	; 0x21
 8002a68:	d108      	bne.n	8002a7c <UART_DMAError+0x46>
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d005      	beq.n	8002a7c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	2200      	movs	r2, #0
 8002a74:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8002a76:	68b8      	ldr	r0, [r7, #8]
 8002a78:	f000 f88c 	bl	8002b94 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	695b      	ldr	r3, [r3, #20]
 8002a82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	bf14      	ite	ne
 8002a8a:	2301      	movne	r3, #1
 8002a8c:	2300      	moveq	r3, #0
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	2b22      	cmp	r3, #34	; 0x22
 8002a9c:	d108      	bne.n	8002ab0 <UART_DMAError+0x7a>
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d005      	beq.n	8002ab0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002aaa:	68b8      	ldr	r0, [r7, #8]
 8002aac:	f000 f887 	bl	8002bbe <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab4:	f043 0210 	orr.w	r2, r3, #16
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002abc:	68b8      	ldr	r0, [r7, #8]
 8002abe:	f7ff feec 	bl	800289a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002ac2:	bf00      	nop
 8002ac4:	3710      	adds	r7, #16
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
	...

08002acc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b086      	sub	sp, #24
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	60b9      	str	r1, [r7, #8]
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8002ada:	68ba      	ldr	r2, [r7, #8]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	88fa      	ldrh	r2, [r7, #6]
 8002ae4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2222      	movs	r2, #34	; 0x22
 8002af0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002af8:	4a23      	ldr	r2, [pc, #140]	; (8002b88 <UART_Start_Receive_DMA+0xbc>)
 8002afa:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b00:	4a22      	ldr	r2, [pc, #136]	; (8002b8c <UART_Start_Receive_DMA+0xc0>)
 8002b02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b08:	4a21      	ldr	r2, [pc, #132]	; (8002b90 <UART_Start_Receive_DMA+0xc4>)
 8002b0a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b10:	2200      	movs	r2, #0
 8002b12:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8002b14:	f107 0308 	add.w	r3, r7, #8
 8002b18:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	3304      	adds	r3, #4
 8002b24:	4619      	mov	r1, r3
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	88fb      	ldrh	r3, [r7, #6]
 8002b2c:	f7fe fd4c 	bl	80015c8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8002b30:	2300      	movs	r3, #0
 8002b32:	613b      	str	r3, [r7, #16]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	613b      	str	r3, [r7, #16]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	613b      	str	r3, [r7, #16]
 8002b44:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	68da      	ldr	r2, [r3, #12]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b5c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	695a      	ldr	r2, [r3, #20]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f042 0201 	orr.w	r2, r2, #1
 8002b6c:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	695a      	ldr	r2, [r3, #20]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b7c:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8002b7e:	2300      	movs	r3, #0
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3718      	adds	r7, #24
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	0800296b 	.word	0x0800296b
 8002b8c:	08002a01 	.word	0x08002a01
 8002b90:	08002a37 	.word	0x08002a37

08002b94 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	68da      	ldr	r2, [r3, #12]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002baa:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2220      	movs	r2, #32
 8002bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8002bb4:	bf00      	nop
 8002bb6:	370c      	adds	r7, #12
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bc80      	pop	{r7}
 8002bbc:	4770      	bx	lr

08002bbe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002bbe:	b480      	push	{r7}
 8002bc0:	b083      	sub	sp, #12
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	68da      	ldr	r2, [r3, #12]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002bd4:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	695a      	ldr	r2, [r3, #20]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f022 0201 	bic.w	r2, r2, #1
 8002be4:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d107      	bne.n	8002bfe <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	68da      	ldr	r2, [r3, #12]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f022 0210 	bic.w	r2, r2, #16
 8002bfc:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2220      	movs	r2, #32
 8002c02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002c0c:	bf00      	nop
 8002c0e:	370c      	adds	r7, #12
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bc80      	pop	{r7}
 8002c14:	4770      	bx	lr
	...

08002c18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b084      	sub	sp, #16
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	691b      	ldr	r3, [r3, #16]
 8002c26:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	68da      	ldr	r2, [r3, #12]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	430a      	orrs	r2, r1
 8002c34:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	689a      	ldr	r2, [r3, #8]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	691b      	ldr	r3, [r3, #16]
 8002c3e:	431a      	orrs	r2, r3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	695b      	ldr	r3, [r3, #20]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002c52:	f023 030c 	bic.w	r3, r3, #12
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	6812      	ldr	r2, [r2, #0]
 8002c5a:	68b9      	ldr	r1, [r7, #8]
 8002c5c:	430b      	orrs	r3, r1
 8002c5e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	695b      	ldr	r3, [r3, #20]
 8002c66:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	699a      	ldr	r2, [r3, #24]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	430a      	orrs	r2, r1
 8002c74:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a2c      	ldr	r2, [pc, #176]	; (8002d2c <UART_SetConfig+0x114>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d103      	bne.n	8002c88 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002c80:	f7ff fbf4 	bl	800246c <HAL_RCC_GetPCLK2Freq>
 8002c84:	60f8      	str	r0, [r7, #12]
 8002c86:	e002      	b.n	8002c8e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002c88:	f7ff fbdc 	bl	8002444 <HAL_RCC_GetPCLK1Freq>
 8002c8c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c8e:	68fa      	ldr	r2, [r7, #12]
 8002c90:	4613      	mov	r3, r2
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	4413      	add	r3, r2
 8002c96:	009a      	lsls	r2, r3, #2
 8002c98:	441a      	add	r2, r3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ca4:	4a22      	ldr	r2, [pc, #136]	; (8002d30 <UART_SetConfig+0x118>)
 8002ca6:	fba2 2303 	umull	r2, r3, r2, r3
 8002caa:	095b      	lsrs	r3, r3, #5
 8002cac:	0119      	lsls	r1, r3, #4
 8002cae:	68fa      	ldr	r2, [r7, #12]
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	4413      	add	r3, r2
 8002cb6:	009a      	lsls	r2, r3, #2
 8002cb8:	441a      	add	r2, r3
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002cc4:	4b1a      	ldr	r3, [pc, #104]	; (8002d30 <UART_SetConfig+0x118>)
 8002cc6:	fba3 0302 	umull	r0, r3, r3, r2
 8002cca:	095b      	lsrs	r3, r3, #5
 8002ccc:	2064      	movs	r0, #100	; 0x64
 8002cce:	fb00 f303 	mul.w	r3, r0, r3
 8002cd2:	1ad3      	subs	r3, r2, r3
 8002cd4:	011b      	lsls	r3, r3, #4
 8002cd6:	3332      	adds	r3, #50	; 0x32
 8002cd8:	4a15      	ldr	r2, [pc, #84]	; (8002d30 <UART_SetConfig+0x118>)
 8002cda:	fba2 2303 	umull	r2, r3, r2, r3
 8002cde:	095b      	lsrs	r3, r3, #5
 8002ce0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ce4:	4419      	add	r1, r3
 8002ce6:	68fa      	ldr	r2, [r7, #12]
 8002ce8:	4613      	mov	r3, r2
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	4413      	add	r3, r2
 8002cee:	009a      	lsls	r2, r3, #2
 8002cf0:	441a      	add	r2, r3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002cfc:	4b0c      	ldr	r3, [pc, #48]	; (8002d30 <UART_SetConfig+0x118>)
 8002cfe:	fba3 0302 	umull	r0, r3, r3, r2
 8002d02:	095b      	lsrs	r3, r3, #5
 8002d04:	2064      	movs	r0, #100	; 0x64
 8002d06:	fb00 f303 	mul.w	r3, r0, r3
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	011b      	lsls	r3, r3, #4
 8002d0e:	3332      	adds	r3, #50	; 0x32
 8002d10:	4a07      	ldr	r2, [pc, #28]	; (8002d30 <UART_SetConfig+0x118>)
 8002d12:	fba2 2303 	umull	r2, r3, r2, r3
 8002d16:	095b      	lsrs	r3, r3, #5
 8002d18:	f003 020f 	and.w	r2, r3, #15
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	440a      	add	r2, r1
 8002d22:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002d24:	bf00      	nop
 8002d26:	3710      	adds	r7, #16
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	40013800 	.word	0x40013800
 8002d30:	51eb851f 	.word	0x51eb851f

08002d34 <__errno>:
 8002d34:	4b01      	ldr	r3, [pc, #4]	; (8002d3c <__errno+0x8>)
 8002d36:	6818      	ldr	r0, [r3, #0]
 8002d38:	4770      	bx	lr
 8002d3a:	bf00      	nop
 8002d3c:	20000014 	.word	0x20000014

08002d40 <__libc_init_array>:
 8002d40:	b570      	push	{r4, r5, r6, lr}
 8002d42:	2600      	movs	r6, #0
 8002d44:	4d0c      	ldr	r5, [pc, #48]	; (8002d78 <__libc_init_array+0x38>)
 8002d46:	4c0d      	ldr	r4, [pc, #52]	; (8002d7c <__libc_init_array+0x3c>)
 8002d48:	1b64      	subs	r4, r4, r5
 8002d4a:	10a4      	asrs	r4, r4, #2
 8002d4c:	42a6      	cmp	r6, r4
 8002d4e:	d109      	bne.n	8002d64 <__libc_init_array+0x24>
 8002d50:	f000 fc9c 	bl	800368c <_init>
 8002d54:	2600      	movs	r6, #0
 8002d56:	4d0a      	ldr	r5, [pc, #40]	; (8002d80 <__libc_init_array+0x40>)
 8002d58:	4c0a      	ldr	r4, [pc, #40]	; (8002d84 <__libc_init_array+0x44>)
 8002d5a:	1b64      	subs	r4, r4, r5
 8002d5c:	10a4      	asrs	r4, r4, #2
 8002d5e:	42a6      	cmp	r6, r4
 8002d60:	d105      	bne.n	8002d6e <__libc_init_array+0x2e>
 8002d62:	bd70      	pop	{r4, r5, r6, pc}
 8002d64:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d68:	4798      	blx	r3
 8002d6a:	3601      	adds	r6, #1
 8002d6c:	e7ee      	b.n	8002d4c <__libc_init_array+0xc>
 8002d6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d72:	4798      	blx	r3
 8002d74:	3601      	adds	r6, #1
 8002d76:	e7f2      	b.n	8002d5e <__libc_init_array+0x1e>
 8002d78:	08003708 	.word	0x08003708
 8002d7c:	08003708 	.word	0x08003708
 8002d80:	08003708 	.word	0x08003708
 8002d84:	0800370c 	.word	0x0800370c

08002d88 <memset>:
 8002d88:	4603      	mov	r3, r0
 8002d8a:	4402      	add	r2, r0
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d100      	bne.n	8002d92 <memset+0xa>
 8002d90:	4770      	bx	lr
 8002d92:	f803 1b01 	strb.w	r1, [r3], #1
 8002d96:	e7f9      	b.n	8002d8c <memset+0x4>

08002d98 <siprintf>:
 8002d98:	b40e      	push	{r1, r2, r3}
 8002d9a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002d9e:	b500      	push	{lr}
 8002da0:	b09c      	sub	sp, #112	; 0x70
 8002da2:	ab1d      	add	r3, sp, #116	; 0x74
 8002da4:	9002      	str	r0, [sp, #8]
 8002da6:	9006      	str	r0, [sp, #24]
 8002da8:	9107      	str	r1, [sp, #28]
 8002daa:	9104      	str	r1, [sp, #16]
 8002dac:	4808      	ldr	r0, [pc, #32]	; (8002dd0 <siprintf+0x38>)
 8002dae:	4909      	ldr	r1, [pc, #36]	; (8002dd4 <siprintf+0x3c>)
 8002db0:	f853 2b04 	ldr.w	r2, [r3], #4
 8002db4:	9105      	str	r1, [sp, #20]
 8002db6:	6800      	ldr	r0, [r0, #0]
 8002db8:	a902      	add	r1, sp, #8
 8002dba:	9301      	str	r3, [sp, #4]
 8002dbc:	f000 f868 	bl	8002e90 <_svfiprintf_r>
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	9b02      	ldr	r3, [sp, #8]
 8002dc4:	701a      	strb	r2, [r3, #0]
 8002dc6:	b01c      	add	sp, #112	; 0x70
 8002dc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8002dcc:	b003      	add	sp, #12
 8002dce:	4770      	bx	lr
 8002dd0:	20000014 	.word	0x20000014
 8002dd4:	ffff0208 	.word	0xffff0208

08002dd8 <__ssputs_r>:
 8002dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ddc:	688e      	ldr	r6, [r1, #8]
 8002dde:	4682      	mov	sl, r0
 8002de0:	429e      	cmp	r6, r3
 8002de2:	460c      	mov	r4, r1
 8002de4:	4690      	mov	r8, r2
 8002de6:	461f      	mov	r7, r3
 8002de8:	d838      	bhi.n	8002e5c <__ssputs_r+0x84>
 8002dea:	898a      	ldrh	r2, [r1, #12]
 8002dec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002df0:	d032      	beq.n	8002e58 <__ssputs_r+0x80>
 8002df2:	6825      	ldr	r5, [r4, #0]
 8002df4:	6909      	ldr	r1, [r1, #16]
 8002df6:	3301      	adds	r3, #1
 8002df8:	eba5 0901 	sub.w	r9, r5, r1
 8002dfc:	6965      	ldr	r5, [r4, #20]
 8002dfe:	444b      	add	r3, r9
 8002e00:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002e04:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002e08:	106d      	asrs	r5, r5, #1
 8002e0a:	429d      	cmp	r5, r3
 8002e0c:	bf38      	it	cc
 8002e0e:	461d      	movcc	r5, r3
 8002e10:	0553      	lsls	r3, r2, #21
 8002e12:	d531      	bpl.n	8002e78 <__ssputs_r+0xa0>
 8002e14:	4629      	mov	r1, r5
 8002e16:	f000 fb6f 	bl	80034f8 <_malloc_r>
 8002e1a:	4606      	mov	r6, r0
 8002e1c:	b950      	cbnz	r0, 8002e34 <__ssputs_r+0x5c>
 8002e1e:	230c      	movs	r3, #12
 8002e20:	f04f 30ff 	mov.w	r0, #4294967295
 8002e24:	f8ca 3000 	str.w	r3, [sl]
 8002e28:	89a3      	ldrh	r3, [r4, #12]
 8002e2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e2e:	81a3      	strh	r3, [r4, #12]
 8002e30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e34:	464a      	mov	r2, r9
 8002e36:	6921      	ldr	r1, [r4, #16]
 8002e38:	f000 face 	bl	80033d8 <memcpy>
 8002e3c:	89a3      	ldrh	r3, [r4, #12]
 8002e3e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002e42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e46:	81a3      	strh	r3, [r4, #12]
 8002e48:	6126      	str	r6, [r4, #16]
 8002e4a:	444e      	add	r6, r9
 8002e4c:	6026      	str	r6, [r4, #0]
 8002e4e:	463e      	mov	r6, r7
 8002e50:	6165      	str	r5, [r4, #20]
 8002e52:	eba5 0509 	sub.w	r5, r5, r9
 8002e56:	60a5      	str	r5, [r4, #8]
 8002e58:	42be      	cmp	r6, r7
 8002e5a:	d900      	bls.n	8002e5e <__ssputs_r+0x86>
 8002e5c:	463e      	mov	r6, r7
 8002e5e:	4632      	mov	r2, r6
 8002e60:	4641      	mov	r1, r8
 8002e62:	6820      	ldr	r0, [r4, #0]
 8002e64:	f000 fac6 	bl	80033f4 <memmove>
 8002e68:	68a3      	ldr	r3, [r4, #8]
 8002e6a:	2000      	movs	r0, #0
 8002e6c:	1b9b      	subs	r3, r3, r6
 8002e6e:	60a3      	str	r3, [r4, #8]
 8002e70:	6823      	ldr	r3, [r4, #0]
 8002e72:	4433      	add	r3, r6
 8002e74:	6023      	str	r3, [r4, #0]
 8002e76:	e7db      	b.n	8002e30 <__ssputs_r+0x58>
 8002e78:	462a      	mov	r2, r5
 8002e7a:	f000 fbb1 	bl	80035e0 <_realloc_r>
 8002e7e:	4606      	mov	r6, r0
 8002e80:	2800      	cmp	r0, #0
 8002e82:	d1e1      	bne.n	8002e48 <__ssputs_r+0x70>
 8002e84:	4650      	mov	r0, sl
 8002e86:	6921      	ldr	r1, [r4, #16]
 8002e88:	f000 face 	bl	8003428 <_free_r>
 8002e8c:	e7c7      	b.n	8002e1e <__ssputs_r+0x46>
	...

08002e90 <_svfiprintf_r>:
 8002e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e94:	4698      	mov	r8, r3
 8002e96:	898b      	ldrh	r3, [r1, #12]
 8002e98:	4607      	mov	r7, r0
 8002e9a:	061b      	lsls	r3, r3, #24
 8002e9c:	460d      	mov	r5, r1
 8002e9e:	4614      	mov	r4, r2
 8002ea0:	b09d      	sub	sp, #116	; 0x74
 8002ea2:	d50e      	bpl.n	8002ec2 <_svfiprintf_r+0x32>
 8002ea4:	690b      	ldr	r3, [r1, #16]
 8002ea6:	b963      	cbnz	r3, 8002ec2 <_svfiprintf_r+0x32>
 8002ea8:	2140      	movs	r1, #64	; 0x40
 8002eaa:	f000 fb25 	bl	80034f8 <_malloc_r>
 8002eae:	6028      	str	r0, [r5, #0]
 8002eb0:	6128      	str	r0, [r5, #16]
 8002eb2:	b920      	cbnz	r0, 8002ebe <_svfiprintf_r+0x2e>
 8002eb4:	230c      	movs	r3, #12
 8002eb6:	603b      	str	r3, [r7, #0]
 8002eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8002ebc:	e0d1      	b.n	8003062 <_svfiprintf_r+0x1d2>
 8002ebe:	2340      	movs	r3, #64	; 0x40
 8002ec0:	616b      	str	r3, [r5, #20]
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	9309      	str	r3, [sp, #36]	; 0x24
 8002ec6:	2320      	movs	r3, #32
 8002ec8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002ecc:	2330      	movs	r3, #48	; 0x30
 8002ece:	f04f 0901 	mov.w	r9, #1
 8002ed2:	f8cd 800c 	str.w	r8, [sp, #12]
 8002ed6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800307c <_svfiprintf_r+0x1ec>
 8002eda:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002ede:	4623      	mov	r3, r4
 8002ee0:	469a      	mov	sl, r3
 8002ee2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002ee6:	b10a      	cbz	r2, 8002eec <_svfiprintf_r+0x5c>
 8002ee8:	2a25      	cmp	r2, #37	; 0x25
 8002eea:	d1f9      	bne.n	8002ee0 <_svfiprintf_r+0x50>
 8002eec:	ebba 0b04 	subs.w	fp, sl, r4
 8002ef0:	d00b      	beq.n	8002f0a <_svfiprintf_r+0x7a>
 8002ef2:	465b      	mov	r3, fp
 8002ef4:	4622      	mov	r2, r4
 8002ef6:	4629      	mov	r1, r5
 8002ef8:	4638      	mov	r0, r7
 8002efa:	f7ff ff6d 	bl	8002dd8 <__ssputs_r>
 8002efe:	3001      	adds	r0, #1
 8002f00:	f000 80aa 	beq.w	8003058 <_svfiprintf_r+0x1c8>
 8002f04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002f06:	445a      	add	r2, fp
 8002f08:	9209      	str	r2, [sp, #36]	; 0x24
 8002f0a:	f89a 3000 	ldrb.w	r3, [sl]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	f000 80a2 	beq.w	8003058 <_svfiprintf_r+0x1c8>
 8002f14:	2300      	movs	r3, #0
 8002f16:	f04f 32ff 	mov.w	r2, #4294967295
 8002f1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002f1e:	f10a 0a01 	add.w	sl, sl, #1
 8002f22:	9304      	str	r3, [sp, #16]
 8002f24:	9307      	str	r3, [sp, #28]
 8002f26:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002f2a:	931a      	str	r3, [sp, #104]	; 0x68
 8002f2c:	4654      	mov	r4, sl
 8002f2e:	2205      	movs	r2, #5
 8002f30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f34:	4851      	ldr	r0, [pc, #324]	; (800307c <_svfiprintf_r+0x1ec>)
 8002f36:	f000 fa41 	bl	80033bc <memchr>
 8002f3a:	9a04      	ldr	r2, [sp, #16]
 8002f3c:	b9d8      	cbnz	r0, 8002f76 <_svfiprintf_r+0xe6>
 8002f3e:	06d0      	lsls	r0, r2, #27
 8002f40:	bf44      	itt	mi
 8002f42:	2320      	movmi	r3, #32
 8002f44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002f48:	0711      	lsls	r1, r2, #28
 8002f4a:	bf44      	itt	mi
 8002f4c:	232b      	movmi	r3, #43	; 0x2b
 8002f4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002f52:	f89a 3000 	ldrb.w	r3, [sl]
 8002f56:	2b2a      	cmp	r3, #42	; 0x2a
 8002f58:	d015      	beq.n	8002f86 <_svfiprintf_r+0xf6>
 8002f5a:	4654      	mov	r4, sl
 8002f5c:	2000      	movs	r0, #0
 8002f5e:	f04f 0c0a 	mov.w	ip, #10
 8002f62:	9a07      	ldr	r2, [sp, #28]
 8002f64:	4621      	mov	r1, r4
 8002f66:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002f6a:	3b30      	subs	r3, #48	; 0x30
 8002f6c:	2b09      	cmp	r3, #9
 8002f6e:	d94e      	bls.n	800300e <_svfiprintf_r+0x17e>
 8002f70:	b1b0      	cbz	r0, 8002fa0 <_svfiprintf_r+0x110>
 8002f72:	9207      	str	r2, [sp, #28]
 8002f74:	e014      	b.n	8002fa0 <_svfiprintf_r+0x110>
 8002f76:	eba0 0308 	sub.w	r3, r0, r8
 8002f7a:	fa09 f303 	lsl.w	r3, r9, r3
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	46a2      	mov	sl, r4
 8002f82:	9304      	str	r3, [sp, #16]
 8002f84:	e7d2      	b.n	8002f2c <_svfiprintf_r+0x9c>
 8002f86:	9b03      	ldr	r3, [sp, #12]
 8002f88:	1d19      	adds	r1, r3, #4
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	9103      	str	r1, [sp, #12]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	bfbb      	ittet	lt
 8002f92:	425b      	neglt	r3, r3
 8002f94:	f042 0202 	orrlt.w	r2, r2, #2
 8002f98:	9307      	strge	r3, [sp, #28]
 8002f9a:	9307      	strlt	r3, [sp, #28]
 8002f9c:	bfb8      	it	lt
 8002f9e:	9204      	strlt	r2, [sp, #16]
 8002fa0:	7823      	ldrb	r3, [r4, #0]
 8002fa2:	2b2e      	cmp	r3, #46	; 0x2e
 8002fa4:	d10c      	bne.n	8002fc0 <_svfiprintf_r+0x130>
 8002fa6:	7863      	ldrb	r3, [r4, #1]
 8002fa8:	2b2a      	cmp	r3, #42	; 0x2a
 8002faa:	d135      	bne.n	8003018 <_svfiprintf_r+0x188>
 8002fac:	9b03      	ldr	r3, [sp, #12]
 8002fae:	3402      	adds	r4, #2
 8002fb0:	1d1a      	adds	r2, r3, #4
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	9203      	str	r2, [sp, #12]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	bfb8      	it	lt
 8002fba:	f04f 33ff 	movlt.w	r3, #4294967295
 8002fbe:	9305      	str	r3, [sp, #20]
 8002fc0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8003080 <_svfiprintf_r+0x1f0>
 8002fc4:	2203      	movs	r2, #3
 8002fc6:	4650      	mov	r0, sl
 8002fc8:	7821      	ldrb	r1, [r4, #0]
 8002fca:	f000 f9f7 	bl	80033bc <memchr>
 8002fce:	b140      	cbz	r0, 8002fe2 <_svfiprintf_r+0x152>
 8002fd0:	2340      	movs	r3, #64	; 0x40
 8002fd2:	eba0 000a 	sub.w	r0, r0, sl
 8002fd6:	fa03 f000 	lsl.w	r0, r3, r0
 8002fda:	9b04      	ldr	r3, [sp, #16]
 8002fdc:	3401      	adds	r4, #1
 8002fde:	4303      	orrs	r3, r0
 8002fe0:	9304      	str	r3, [sp, #16]
 8002fe2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002fe6:	2206      	movs	r2, #6
 8002fe8:	4826      	ldr	r0, [pc, #152]	; (8003084 <_svfiprintf_r+0x1f4>)
 8002fea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002fee:	f000 f9e5 	bl	80033bc <memchr>
 8002ff2:	2800      	cmp	r0, #0
 8002ff4:	d038      	beq.n	8003068 <_svfiprintf_r+0x1d8>
 8002ff6:	4b24      	ldr	r3, [pc, #144]	; (8003088 <_svfiprintf_r+0x1f8>)
 8002ff8:	bb1b      	cbnz	r3, 8003042 <_svfiprintf_r+0x1b2>
 8002ffa:	9b03      	ldr	r3, [sp, #12]
 8002ffc:	3307      	adds	r3, #7
 8002ffe:	f023 0307 	bic.w	r3, r3, #7
 8003002:	3308      	adds	r3, #8
 8003004:	9303      	str	r3, [sp, #12]
 8003006:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003008:	4433      	add	r3, r6
 800300a:	9309      	str	r3, [sp, #36]	; 0x24
 800300c:	e767      	b.n	8002ede <_svfiprintf_r+0x4e>
 800300e:	460c      	mov	r4, r1
 8003010:	2001      	movs	r0, #1
 8003012:	fb0c 3202 	mla	r2, ip, r2, r3
 8003016:	e7a5      	b.n	8002f64 <_svfiprintf_r+0xd4>
 8003018:	2300      	movs	r3, #0
 800301a:	f04f 0c0a 	mov.w	ip, #10
 800301e:	4619      	mov	r1, r3
 8003020:	3401      	adds	r4, #1
 8003022:	9305      	str	r3, [sp, #20]
 8003024:	4620      	mov	r0, r4
 8003026:	f810 2b01 	ldrb.w	r2, [r0], #1
 800302a:	3a30      	subs	r2, #48	; 0x30
 800302c:	2a09      	cmp	r2, #9
 800302e:	d903      	bls.n	8003038 <_svfiprintf_r+0x1a8>
 8003030:	2b00      	cmp	r3, #0
 8003032:	d0c5      	beq.n	8002fc0 <_svfiprintf_r+0x130>
 8003034:	9105      	str	r1, [sp, #20]
 8003036:	e7c3      	b.n	8002fc0 <_svfiprintf_r+0x130>
 8003038:	4604      	mov	r4, r0
 800303a:	2301      	movs	r3, #1
 800303c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003040:	e7f0      	b.n	8003024 <_svfiprintf_r+0x194>
 8003042:	ab03      	add	r3, sp, #12
 8003044:	9300      	str	r3, [sp, #0]
 8003046:	462a      	mov	r2, r5
 8003048:	4638      	mov	r0, r7
 800304a:	4b10      	ldr	r3, [pc, #64]	; (800308c <_svfiprintf_r+0x1fc>)
 800304c:	a904      	add	r1, sp, #16
 800304e:	f3af 8000 	nop.w
 8003052:	1c42      	adds	r2, r0, #1
 8003054:	4606      	mov	r6, r0
 8003056:	d1d6      	bne.n	8003006 <_svfiprintf_r+0x176>
 8003058:	89ab      	ldrh	r3, [r5, #12]
 800305a:	065b      	lsls	r3, r3, #25
 800305c:	f53f af2c 	bmi.w	8002eb8 <_svfiprintf_r+0x28>
 8003060:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003062:	b01d      	add	sp, #116	; 0x74
 8003064:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003068:	ab03      	add	r3, sp, #12
 800306a:	9300      	str	r3, [sp, #0]
 800306c:	462a      	mov	r2, r5
 800306e:	4638      	mov	r0, r7
 8003070:	4b06      	ldr	r3, [pc, #24]	; (800308c <_svfiprintf_r+0x1fc>)
 8003072:	a904      	add	r1, sp, #16
 8003074:	f000 f87c 	bl	8003170 <_printf_i>
 8003078:	e7eb      	b.n	8003052 <_svfiprintf_r+0x1c2>
 800307a:	bf00      	nop
 800307c:	080036d4 	.word	0x080036d4
 8003080:	080036da 	.word	0x080036da
 8003084:	080036de 	.word	0x080036de
 8003088:	00000000 	.word	0x00000000
 800308c:	08002dd9 	.word	0x08002dd9

08003090 <_printf_common>:
 8003090:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003094:	4616      	mov	r6, r2
 8003096:	4699      	mov	r9, r3
 8003098:	688a      	ldr	r2, [r1, #8]
 800309a:	690b      	ldr	r3, [r1, #16]
 800309c:	4607      	mov	r7, r0
 800309e:	4293      	cmp	r3, r2
 80030a0:	bfb8      	it	lt
 80030a2:	4613      	movlt	r3, r2
 80030a4:	6033      	str	r3, [r6, #0]
 80030a6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80030aa:	460c      	mov	r4, r1
 80030ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80030b0:	b10a      	cbz	r2, 80030b6 <_printf_common+0x26>
 80030b2:	3301      	adds	r3, #1
 80030b4:	6033      	str	r3, [r6, #0]
 80030b6:	6823      	ldr	r3, [r4, #0]
 80030b8:	0699      	lsls	r1, r3, #26
 80030ba:	bf42      	ittt	mi
 80030bc:	6833      	ldrmi	r3, [r6, #0]
 80030be:	3302      	addmi	r3, #2
 80030c0:	6033      	strmi	r3, [r6, #0]
 80030c2:	6825      	ldr	r5, [r4, #0]
 80030c4:	f015 0506 	ands.w	r5, r5, #6
 80030c8:	d106      	bne.n	80030d8 <_printf_common+0x48>
 80030ca:	f104 0a19 	add.w	sl, r4, #25
 80030ce:	68e3      	ldr	r3, [r4, #12]
 80030d0:	6832      	ldr	r2, [r6, #0]
 80030d2:	1a9b      	subs	r3, r3, r2
 80030d4:	42ab      	cmp	r3, r5
 80030d6:	dc28      	bgt.n	800312a <_printf_common+0x9a>
 80030d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80030dc:	1e13      	subs	r3, r2, #0
 80030de:	6822      	ldr	r2, [r4, #0]
 80030e0:	bf18      	it	ne
 80030e2:	2301      	movne	r3, #1
 80030e4:	0692      	lsls	r2, r2, #26
 80030e6:	d42d      	bmi.n	8003144 <_printf_common+0xb4>
 80030e8:	4649      	mov	r1, r9
 80030ea:	4638      	mov	r0, r7
 80030ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80030f0:	47c0      	blx	r8
 80030f2:	3001      	adds	r0, #1
 80030f4:	d020      	beq.n	8003138 <_printf_common+0xa8>
 80030f6:	6823      	ldr	r3, [r4, #0]
 80030f8:	68e5      	ldr	r5, [r4, #12]
 80030fa:	f003 0306 	and.w	r3, r3, #6
 80030fe:	2b04      	cmp	r3, #4
 8003100:	bf18      	it	ne
 8003102:	2500      	movne	r5, #0
 8003104:	6832      	ldr	r2, [r6, #0]
 8003106:	f04f 0600 	mov.w	r6, #0
 800310a:	68a3      	ldr	r3, [r4, #8]
 800310c:	bf08      	it	eq
 800310e:	1aad      	subeq	r5, r5, r2
 8003110:	6922      	ldr	r2, [r4, #16]
 8003112:	bf08      	it	eq
 8003114:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003118:	4293      	cmp	r3, r2
 800311a:	bfc4      	itt	gt
 800311c:	1a9b      	subgt	r3, r3, r2
 800311e:	18ed      	addgt	r5, r5, r3
 8003120:	341a      	adds	r4, #26
 8003122:	42b5      	cmp	r5, r6
 8003124:	d11a      	bne.n	800315c <_printf_common+0xcc>
 8003126:	2000      	movs	r0, #0
 8003128:	e008      	b.n	800313c <_printf_common+0xac>
 800312a:	2301      	movs	r3, #1
 800312c:	4652      	mov	r2, sl
 800312e:	4649      	mov	r1, r9
 8003130:	4638      	mov	r0, r7
 8003132:	47c0      	blx	r8
 8003134:	3001      	adds	r0, #1
 8003136:	d103      	bne.n	8003140 <_printf_common+0xb0>
 8003138:	f04f 30ff 	mov.w	r0, #4294967295
 800313c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003140:	3501      	adds	r5, #1
 8003142:	e7c4      	b.n	80030ce <_printf_common+0x3e>
 8003144:	2030      	movs	r0, #48	; 0x30
 8003146:	18e1      	adds	r1, r4, r3
 8003148:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800314c:	1c5a      	adds	r2, r3, #1
 800314e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003152:	4422      	add	r2, r4
 8003154:	3302      	adds	r3, #2
 8003156:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800315a:	e7c5      	b.n	80030e8 <_printf_common+0x58>
 800315c:	2301      	movs	r3, #1
 800315e:	4622      	mov	r2, r4
 8003160:	4649      	mov	r1, r9
 8003162:	4638      	mov	r0, r7
 8003164:	47c0      	blx	r8
 8003166:	3001      	adds	r0, #1
 8003168:	d0e6      	beq.n	8003138 <_printf_common+0xa8>
 800316a:	3601      	adds	r6, #1
 800316c:	e7d9      	b.n	8003122 <_printf_common+0x92>
	...

08003170 <_printf_i>:
 8003170:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003174:	7e0f      	ldrb	r7, [r1, #24]
 8003176:	4691      	mov	r9, r2
 8003178:	2f78      	cmp	r7, #120	; 0x78
 800317a:	4680      	mov	r8, r0
 800317c:	460c      	mov	r4, r1
 800317e:	469a      	mov	sl, r3
 8003180:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003182:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003186:	d807      	bhi.n	8003198 <_printf_i+0x28>
 8003188:	2f62      	cmp	r7, #98	; 0x62
 800318a:	d80a      	bhi.n	80031a2 <_printf_i+0x32>
 800318c:	2f00      	cmp	r7, #0
 800318e:	f000 80d9 	beq.w	8003344 <_printf_i+0x1d4>
 8003192:	2f58      	cmp	r7, #88	; 0x58
 8003194:	f000 80a4 	beq.w	80032e0 <_printf_i+0x170>
 8003198:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800319c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80031a0:	e03a      	b.n	8003218 <_printf_i+0xa8>
 80031a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80031a6:	2b15      	cmp	r3, #21
 80031a8:	d8f6      	bhi.n	8003198 <_printf_i+0x28>
 80031aa:	a101      	add	r1, pc, #4	; (adr r1, 80031b0 <_printf_i+0x40>)
 80031ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80031b0:	08003209 	.word	0x08003209
 80031b4:	0800321d 	.word	0x0800321d
 80031b8:	08003199 	.word	0x08003199
 80031bc:	08003199 	.word	0x08003199
 80031c0:	08003199 	.word	0x08003199
 80031c4:	08003199 	.word	0x08003199
 80031c8:	0800321d 	.word	0x0800321d
 80031cc:	08003199 	.word	0x08003199
 80031d0:	08003199 	.word	0x08003199
 80031d4:	08003199 	.word	0x08003199
 80031d8:	08003199 	.word	0x08003199
 80031dc:	0800332b 	.word	0x0800332b
 80031e0:	0800324d 	.word	0x0800324d
 80031e4:	0800330d 	.word	0x0800330d
 80031e8:	08003199 	.word	0x08003199
 80031ec:	08003199 	.word	0x08003199
 80031f0:	0800334d 	.word	0x0800334d
 80031f4:	08003199 	.word	0x08003199
 80031f8:	0800324d 	.word	0x0800324d
 80031fc:	08003199 	.word	0x08003199
 8003200:	08003199 	.word	0x08003199
 8003204:	08003315 	.word	0x08003315
 8003208:	682b      	ldr	r3, [r5, #0]
 800320a:	1d1a      	adds	r2, r3, #4
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	602a      	str	r2, [r5, #0]
 8003210:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003214:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003218:	2301      	movs	r3, #1
 800321a:	e0a4      	b.n	8003366 <_printf_i+0x1f6>
 800321c:	6820      	ldr	r0, [r4, #0]
 800321e:	6829      	ldr	r1, [r5, #0]
 8003220:	0606      	lsls	r6, r0, #24
 8003222:	f101 0304 	add.w	r3, r1, #4
 8003226:	d50a      	bpl.n	800323e <_printf_i+0xce>
 8003228:	680e      	ldr	r6, [r1, #0]
 800322a:	602b      	str	r3, [r5, #0]
 800322c:	2e00      	cmp	r6, #0
 800322e:	da03      	bge.n	8003238 <_printf_i+0xc8>
 8003230:	232d      	movs	r3, #45	; 0x2d
 8003232:	4276      	negs	r6, r6
 8003234:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003238:	230a      	movs	r3, #10
 800323a:	485e      	ldr	r0, [pc, #376]	; (80033b4 <_printf_i+0x244>)
 800323c:	e019      	b.n	8003272 <_printf_i+0x102>
 800323e:	680e      	ldr	r6, [r1, #0]
 8003240:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003244:	602b      	str	r3, [r5, #0]
 8003246:	bf18      	it	ne
 8003248:	b236      	sxthne	r6, r6
 800324a:	e7ef      	b.n	800322c <_printf_i+0xbc>
 800324c:	682b      	ldr	r3, [r5, #0]
 800324e:	6820      	ldr	r0, [r4, #0]
 8003250:	1d19      	adds	r1, r3, #4
 8003252:	6029      	str	r1, [r5, #0]
 8003254:	0601      	lsls	r1, r0, #24
 8003256:	d501      	bpl.n	800325c <_printf_i+0xec>
 8003258:	681e      	ldr	r6, [r3, #0]
 800325a:	e002      	b.n	8003262 <_printf_i+0xf2>
 800325c:	0646      	lsls	r6, r0, #25
 800325e:	d5fb      	bpl.n	8003258 <_printf_i+0xe8>
 8003260:	881e      	ldrh	r6, [r3, #0]
 8003262:	2f6f      	cmp	r7, #111	; 0x6f
 8003264:	bf0c      	ite	eq
 8003266:	2308      	moveq	r3, #8
 8003268:	230a      	movne	r3, #10
 800326a:	4852      	ldr	r0, [pc, #328]	; (80033b4 <_printf_i+0x244>)
 800326c:	2100      	movs	r1, #0
 800326e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003272:	6865      	ldr	r5, [r4, #4]
 8003274:	2d00      	cmp	r5, #0
 8003276:	bfa8      	it	ge
 8003278:	6821      	ldrge	r1, [r4, #0]
 800327a:	60a5      	str	r5, [r4, #8]
 800327c:	bfa4      	itt	ge
 800327e:	f021 0104 	bicge.w	r1, r1, #4
 8003282:	6021      	strge	r1, [r4, #0]
 8003284:	b90e      	cbnz	r6, 800328a <_printf_i+0x11a>
 8003286:	2d00      	cmp	r5, #0
 8003288:	d04d      	beq.n	8003326 <_printf_i+0x1b6>
 800328a:	4615      	mov	r5, r2
 800328c:	fbb6 f1f3 	udiv	r1, r6, r3
 8003290:	fb03 6711 	mls	r7, r3, r1, r6
 8003294:	5dc7      	ldrb	r7, [r0, r7]
 8003296:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800329a:	4637      	mov	r7, r6
 800329c:	42bb      	cmp	r3, r7
 800329e:	460e      	mov	r6, r1
 80032a0:	d9f4      	bls.n	800328c <_printf_i+0x11c>
 80032a2:	2b08      	cmp	r3, #8
 80032a4:	d10b      	bne.n	80032be <_printf_i+0x14e>
 80032a6:	6823      	ldr	r3, [r4, #0]
 80032a8:	07de      	lsls	r6, r3, #31
 80032aa:	d508      	bpl.n	80032be <_printf_i+0x14e>
 80032ac:	6923      	ldr	r3, [r4, #16]
 80032ae:	6861      	ldr	r1, [r4, #4]
 80032b0:	4299      	cmp	r1, r3
 80032b2:	bfde      	ittt	le
 80032b4:	2330      	movle	r3, #48	; 0x30
 80032b6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80032ba:	f105 35ff 	addle.w	r5, r5, #4294967295
 80032be:	1b52      	subs	r2, r2, r5
 80032c0:	6122      	str	r2, [r4, #16]
 80032c2:	464b      	mov	r3, r9
 80032c4:	4621      	mov	r1, r4
 80032c6:	4640      	mov	r0, r8
 80032c8:	f8cd a000 	str.w	sl, [sp]
 80032cc:	aa03      	add	r2, sp, #12
 80032ce:	f7ff fedf 	bl	8003090 <_printf_common>
 80032d2:	3001      	adds	r0, #1
 80032d4:	d14c      	bne.n	8003370 <_printf_i+0x200>
 80032d6:	f04f 30ff 	mov.w	r0, #4294967295
 80032da:	b004      	add	sp, #16
 80032dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032e0:	4834      	ldr	r0, [pc, #208]	; (80033b4 <_printf_i+0x244>)
 80032e2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80032e6:	6829      	ldr	r1, [r5, #0]
 80032e8:	6823      	ldr	r3, [r4, #0]
 80032ea:	f851 6b04 	ldr.w	r6, [r1], #4
 80032ee:	6029      	str	r1, [r5, #0]
 80032f0:	061d      	lsls	r5, r3, #24
 80032f2:	d514      	bpl.n	800331e <_printf_i+0x1ae>
 80032f4:	07df      	lsls	r7, r3, #31
 80032f6:	bf44      	itt	mi
 80032f8:	f043 0320 	orrmi.w	r3, r3, #32
 80032fc:	6023      	strmi	r3, [r4, #0]
 80032fe:	b91e      	cbnz	r6, 8003308 <_printf_i+0x198>
 8003300:	6823      	ldr	r3, [r4, #0]
 8003302:	f023 0320 	bic.w	r3, r3, #32
 8003306:	6023      	str	r3, [r4, #0]
 8003308:	2310      	movs	r3, #16
 800330a:	e7af      	b.n	800326c <_printf_i+0xfc>
 800330c:	6823      	ldr	r3, [r4, #0]
 800330e:	f043 0320 	orr.w	r3, r3, #32
 8003312:	6023      	str	r3, [r4, #0]
 8003314:	2378      	movs	r3, #120	; 0x78
 8003316:	4828      	ldr	r0, [pc, #160]	; (80033b8 <_printf_i+0x248>)
 8003318:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800331c:	e7e3      	b.n	80032e6 <_printf_i+0x176>
 800331e:	0659      	lsls	r1, r3, #25
 8003320:	bf48      	it	mi
 8003322:	b2b6      	uxthmi	r6, r6
 8003324:	e7e6      	b.n	80032f4 <_printf_i+0x184>
 8003326:	4615      	mov	r5, r2
 8003328:	e7bb      	b.n	80032a2 <_printf_i+0x132>
 800332a:	682b      	ldr	r3, [r5, #0]
 800332c:	6826      	ldr	r6, [r4, #0]
 800332e:	1d18      	adds	r0, r3, #4
 8003330:	6961      	ldr	r1, [r4, #20]
 8003332:	6028      	str	r0, [r5, #0]
 8003334:	0635      	lsls	r5, r6, #24
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	d501      	bpl.n	800333e <_printf_i+0x1ce>
 800333a:	6019      	str	r1, [r3, #0]
 800333c:	e002      	b.n	8003344 <_printf_i+0x1d4>
 800333e:	0670      	lsls	r0, r6, #25
 8003340:	d5fb      	bpl.n	800333a <_printf_i+0x1ca>
 8003342:	8019      	strh	r1, [r3, #0]
 8003344:	2300      	movs	r3, #0
 8003346:	4615      	mov	r5, r2
 8003348:	6123      	str	r3, [r4, #16]
 800334a:	e7ba      	b.n	80032c2 <_printf_i+0x152>
 800334c:	682b      	ldr	r3, [r5, #0]
 800334e:	2100      	movs	r1, #0
 8003350:	1d1a      	adds	r2, r3, #4
 8003352:	602a      	str	r2, [r5, #0]
 8003354:	681d      	ldr	r5, [r3, #0]
 8003356:	6862      	ldr	r2, [r4, #4]
 8003358:	4628      	mov	r0, r5
 800335a:	f000 f82f 	bl	80033bc <memchr>
 800335e:	b108      	cbz	r0, 8003364 <_printf_i+0x1f4>
 8003360:	1b40      	subs	r0, r0, r5
 8003362:	6060      	str	r0, [r4, #4]
 8003364:	6863      	ldr	r3, [r4, #4]
 8003366:	6123      	str	r3, [r4, #16]
 8003368:	2300      	movs	r3, #0
 800336a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800336e:	e7a8      	b.n	80032c2 <_printf_i+0x152>
 8003370:	462a      	mov	r2, r5
 8003372:	4649      	mov	r1, r9
 8003374:	4640      	mov	r0, r8
 8003376:	6923      	ldr	r3, [r4, #16]
 8003378:	47d0      	blx	sl
 800337a:	3001      	adds	r0, #1
 800337c:	d0ab      	beq.n	80032d6 <_printf_i+0x166>
 800337e:	6823      	ldr	r3, [r4, #0]
 8003380:	079b      	lsls	r3, r3, #30
 8003382:	d413      	bmi.n	80033ac <_printf_i+0x23c>
 8003384:	68e0      	ldr	r0, [r4, #12]
 8003386:	9b03      	ldr	r3, [sp, #12]
 8003388:	4298      	cmp	r0, r3
 800338a:	bfb8      	it	lt
 800338c:	4618      	movlt	r0, r3
 800338e:	e7a4      	b.n	80032da <_printf_i+0x16a>
 8003390:	2301      	movs	r3, #1
 8003392:	4632      	mov	r2, r6
 8003394:	4649      	mov	r1, r9
 8003396:	4640      	mov	r0, r8
 8003398:	47d0      	blx	sl
 800339a:	3001      	adds	r0, #1
 800339c:	d09b      	beq.n	80032d6 <_printf_i+0x166>
 800339e:	3501      	adds	r5, #1
 80033a0:	68e3      	ldr	r3, [r4, #12]
 80033a2:	9903      	ldr	r1, [sp, #12]
 80033a4:	1a5b      	subs	r3, r3, r1
 80033a6:	42ab      	cmp	r3, r5
 80033a8:	dcf2      	bgt.n	8003390 <_printf_i+0x220>
 80033aa:	e7eb      	b.n	8003384 <_printf_i+0x214>
 80033ac:	2500      	movs	r5, #0
 80033ae:	f104 0619 	add.w	r6, r4, #25
 80033b2:	e7f5      	b.n	80033a0 <_printf_i+0x230>
 80033b4:	080036e5 	.word	0x080036e5
 80033b8:	080036f6 	.word	0x080036f6

080033bc <memchr>:
 80033bc:	4603      	mov	r3, r0
 80033be:	b510      	push	{r4, lr}
 80033c0:	b2c9      	uxtb	r1, r1
 80033c2:	4402      	add	r2, r0
 80033c4:	4293      	cmp	r3, r2
 80033c6:	4618      	mov	r0, r3
 80033c8:	d101      	bne.n	80033ce <memchr+0x12>
 80033ca:	2000      	movs	r0, #0
 80033cc:	e003      	b.n	80033d6 <memchr+0x1a>
 80033ce:	7804      	ldrb	r4, [r0, #0]
 80033d0:	3301      	adds	r3, #1
 80033d2:	428c      	cmp	r4, r1
 80033d4:	d1f6      	bne.n	80033c4 <memchr+0x8>
 80033d6:	bd10      	pop	{r4, pc}

080033d8 <memcpy>:
 80033d8:	440a      	add	r2, r1
 80033da:	4291      	cmp	r1, r2
 80033dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80033e0:	d100      	bne.n	80033e4 <memcpy+0xc>
 80033e2:	4770      	bx	lr
 80033e4:	b510      	push	{r4, lr}
 80033e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80033ea:	4291      	cmp	r1, r2
 80033ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80033f0:	d1f9      	bne.n	80033e6 <memcpy+0xe>
 80033f2:	bd10      	pop	{r4, pc}

080033f4 <memmove>:
 80033f4:	4288      	cmp	r0, r1
 80033f6:	b510      	push	{r4, lr}
 80033f8:	eb01 0402 	add.w	r4, r1, r2
 80033fc:	d902      	bls.n	8003404 <memmove+0x10>
 80033fe:	4284      	cmp	r4, r0
 8003400:	4623      	mov	r3, r4
 8003402:	d807      	bhi.n	8003414 <memmove+0x20>
 8003404:	1e43      	subs	r3, r0, #1
 8003406:	42a1      	cmp	r1, r4
 8003408:	d008      	beq.n	800341c <memmove+0x28>
 800340a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800340e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003412:	e7f8      	b.n	8003406 <memmove+0x12>
 8003414:	4601      	mov	r1, r0
 8003416:	4402      	add	r2, r0
 8003418:	428a      	cmp	r2, r1
 800341a:	d100      	bne.n	800341e <memmove+0x2a>
 800341c:	bd10      	pop	{r4, pc}
 800341e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003422:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003426:	e7f7      	b.n	8003418 <memmove+0x24>

08003428 <_free_r>:
 8003428:	b538      	push	{r3, r4, r5, lr}
 800342a:	4605      	mov	r5, r0
 800342c:	2900      	cmp	r1, #0
 800342e:	d040      	beq.n	80034b2 <_free_r+0x8a>
 8003430:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003434:	1f0c      	subs	r4, r1, #4
 8003436:	2b00      	cmp	r3, #0
 8003438:	bfb8      	it	lt
 800343a:	18e4      	addlt	r4, r4, r3
 800343c:	f000 f910 	bl	8003660 <__malloc_lock>
 8003440:	4a1c      	ldr	r2, [pc, #112]	; (80034b4 <_free_r+0x8c>)
 8003442:	6813      	ldr	r3, [r2, #0]
 8003444:	b933      	cbnz	r3, 8003454 <_free_r+0x2c>
 8003446:	6063      	str	r3, [r4, #4]
 8003448:	6014      	str	r4, [r2, #0]
 800344a:	4628      	mov	r0, r5
 800344c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003450:	f000 b90c 	b.w	800366c <__malloc_unlock>
 8003454:	42a3      	cmp	r3, r4
 8003456:	d908      	bls.n	800346a <_free_r+0x42>
 8003458:	6820      	ldr	r0, [r4, #0]
 800345a:	1821      	adds	r1, r4, r0
 800345c:	428b      	cmp	r3, r1
 800345e:	bf01      	itttt	eq
 8003460:	6819      	ldreq	r1, [r3, #0]
 8003462:	685b      	ldreq	r3, [r3, #4]
 8003464:	1809      	addeq	r1, r1, r0
 8003466:	6021      	streq	r1, [r4, #0]
 8003468:	e7ed      	b.n	8003446 <_free_r+0x1e>
 800346a:	461a      	mov	r2, r3
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	b10b      	cbz	r3, 8003474 <_free_r+0x4c>
 8003470:	42a3      	cmp	r3, r4
 8003472:	d9fa      	bls.n	800346a <_free_r+0x42>
 8003474:	6811      	ldr	r1, [r2, #0]
 8003476:	1850      	adds	r0, r2, r1
 8003478:	42a0      	cmp	r0, r4
 800347a:	d10b      	bne.n	8003494 <_free_r+0x6c>
 800347c:	6820      	ldr	r0, [r4, #0]
 800347e:	4401      	add	r1, r0
 8003480:	1850      	adds	r0, r2, r1
 8003482:	4283      	cmp	r3, r0
 8003484:	6011      	str	r1, [r2, #0]
 8003486:	d1e0      	bne.n	800344a <_free_r+0x22>
 8003488:	6818      	ldr	r0, [r3, #0]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	4401      	add	r1, r0
 800348e:	6011      	str	r1, [r2, #0]
 8003490:	6053      	str	r3, [r2, #4]
 8003492:	e7da      	b.n	800344a <_free_r+0x22>
 8003494:	d902      	bls.n	800349c <_free_r+0x74>
 8003496:	230c      	movs	r3, #12
 8003498:	602b      	str	r3, [r5, #0]
 800349a:	e7d6      	b.n	800344a <_free_r+0x22>
 800349c:	6820      	ldr	r0, [r4, #0]
 800349e:	1821      	adds	r1, r4, r0
 80034a0:	428b      	cmp	r3, r1
 80034a2:	bf01      	itttt	eq
 80034a4:	6819      	ldreq	r1, [r3, #0]
 80034a6:	685b      	ldreq	r3, [r3, #4]
 80034a8:	1809      	addeq	r1, r1, r0
 80034aa:	6021      	streq	r1, [r4, #0]
 80034ac:	6063      	str	r3, [r4, #4]
 80034ae:	6054      	str	r4, [r2, #4]
 80034b0:	e7cb      	b.n	800344a <_free_r+0x22>
 80034b2:	bd38      	pop	{r3, r4, r5, pc}
 80034b4:	200001ec 	.word	0x200001ec

080034b8 <sbrk_aligned>:
 80034b8:	b570      	push	{r4, r5, r6, lr}
 80034ba:	4e0e      	ldr	r6, [pc, #56]	; (80034f4 <sbrk_aligned+0x3c>)
 80034bc:	460c      	mov	r4, r1
 80034be:	6831      	ldr	r1, [r6, #0]
 80034c0:	4605      	mov	r5, r0
 80034c2:	b911      	cbnz	r1, 80034ca <sbrk_aligned+0x12>
 80034c4:	f000 f8bc 	bl	8003640 <_sbrk_r>
 80034c8:	6030      	str	r0, [r6, #0]
 80034ca:	4621      	mov	r1, r4
 80034cc:	4628      	mov	r0, r5
 80034ce:	f000 f8b7 	bl	8003640 <_sbrk_r>
 80034d2:	1c43      	adds	r3, r0, #1
 80034d4:	d00a      	beq.n	80034ec <sbrk_aligned+0x34>
 80034d6:	1cc4      	adds	r4, r0, #3
 80034d8:	f024 0403 	bic.w	r4, r4, #3
 80034dc:	42a0      	cmp	r0, r4
 80034de:	d007      	beq.n	80034f0 <sbrk_aligned+0x38>
 80034e0:	1a21      	subs	r1, r4, r0
 80034e2:	4628      	mov	r0, r5
 80034e4:	f000 f8ac 	bl	8003640 <_sbrk_r>
 80034e8:	3001      	adds	r0, #1
 80034ea:	d101      	bne.n	80034f0 <sbrk_aligned+0x38>
 80034ec:	f04f 34ff 	mov.w	r4, #4294967295
 80034f0:	4620      	mov	r0, r4
 80034f2:	bd70      	pop	{r4, r5, r6, pc}
 80034f4:	200001f0 	.word	0x200001f0

080034f8 <_malloc_r>:
 80034f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034fc:	1ccd      	adds	r5, r1, #3
 80034fe:	f025 0503 	bic.w	r5, r5, #3
 8003502:	3508      	adds	r5, #8
 8003504:	2d0c      	cmp	r5, #12
 8003506:	bf38      	it	cc
 8003508:	250c      	movcc	r5, #12
 800350a:	2d00      	cmp	r5, #0
 800350c:	4607      	mov	r7, r0
 800350e:	db01      	blt.n	8003514 <_malloc_r+0x1c>
 8003510:	42a9      	cmp	r1, r5
 8003512:	d905      	bls.n	8003520 <_malloc_r+0x28>
 8003514:	230c      	movs	r3, #12
 8003516:	2600      	movs	r6, #0
 8003518:	603b      	str	r3, [r7, #0]
 800351a:	4630      	mov	r0, r6
 800351c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003520:	4e2e      	ldr	r6, [pc, #184]	; (80035dc <_malloc_r+0xe4>)
 8003522:	f000 f89d 	bl	8003660 <__malloc_lock>
 8003526:	6833      	ldr	r3, [r6, #0]
 8003528:	461c      	mov	r4, r3
 800352a:	bb34      	cbnz	r4, 800357a <_malloc_r+0x82>
 800352c:	4629      	mov	r1, r5
 800352e:	4638      	mov	r0, r7
 8003530:	f7ff ffc2 	bl	80034b8 <sbrk_aligned>
 8003534:	1c43      	adds	r3, r0, #1
 8003536:	4604      	mov	r4, r0
 8003538:	d14d      	bne.n	80035d6 <_malloc_r+0xde>
 800353a:	6834      	ldr	r4, [r6, #0]
 800353c:	4626      	mov	r6, r4
 800353e:	2e00      	cmp	r6, #0
 8003540:	d140      	bne.n	80035c4 <_malloc_r+0xcc>
 8003542:	6823      	ldr	r3, [r4, #0]
 8003544:	4631      	mov	r1, r6
 8003546:	4638      	mov	r0, r7
 8003548:	eb04 0803 	add.w	r8, r4, r3
 800354c:	f000 f878 	bl	8003640 <_sbrk_r>
 8003550:	4580      	cmp	r8, r0
 8003552:	d13a      	bne.n	80035ca <_malloc_r+0xd2>
 8003554:	6821      	ldr	r1, [r4, #0]
 8003556:	3503      	adds	r5, #3
 8003558:	1a6d      	subs	r5, r5, r1
 800355a:	f025 0503 	bic.w	r5, r5, #3
 800355e:	3508      	adds	r5, #8
 8003560:	2d0c      	cmp	r5, #12
 8003562:	bf38      	it	cc
 8003564:	250c      	movcc	r5, #12
 8003566:	4638      	mov	r0, r7
 8003568:	4629      	mov	r1, r5
 800356a:	f7ff ffa5 	bl	80034b8 <sbrk_aligned>
 800356e:	3001      	adds	r0, #1
 8003570:	d02b      	beq.n	80035ca <_malloc_r+0xd2>
 8003572:	6823      	ldr	r3, [r4, #0]
 8003574:	442b      	add	r3, r5
 8003576:	6023      	str	r3, [r4, #0]
 8003578:	e00e      	b.n	8003598 <_malloc_r+0xa0>
 800357a:	6822      	ldr	r2, [r4, #0]
 800357c:	1b52      	subs	r2, r2, r5
 800357e:	d41e      	bmi.n	80035be <_malloc_r+0xc6>
 8003580:	2a0b      	cmp	r2, #11
 8003582:	d916      	bls.n	80035b2 <_malloc_r+0xba>
 8003584:	1961      	adds	r1, r4, r5
 8003586:	42a3      	cmp	r3, r4
 8003588:	6025      	str	r5, [r4, #0]
 800358a:	bf18      	it	ne
 800358c:	6059      	strne	r1, [r3, #4]
 800358e:	6863      	ldr	r3, [r4, #4]
 8003590:	bf08      	it	eq
 8003592:	6031      	streq	r1, [r6, #0]
 8003594:	5162      	str	r2, [r4, r5]
 8003596:	604b      	str	r3, [r1, #4]
 8003598:	4638      	mov	r0, r7
 800359a:	f104 060b 	add.w	r6, r4, #11
 800359e:	f000 f865 	bl	800366c <__malloc_unlock>
 80035a2:	f026 0607 	bic.w	r6, r6, #7
 80035a6:	1d23      	adds	r3, r4, #4
 80035a8:	1af2      	subs	r2, r6, r3
 80035aa:	d0b6      	beq.n	800351a <_malloc_r+0x22>
 80035ac:	1b9b      	subs	r3, r3, r6
 80035ae:	50a3      	str	r3, [r4, r2]
 80035b0:	e7b3      	b.n	800351a <_malloc_r+0x22>
 80035b2:	6862      	ldr	r2, [r4, #4]
 80035b4:	42a3      	cmp	r3, r4
 80035b6:	bf0c      	ite	eq
 80035b8:	6032      	streq	r2, [r6, #0]
 80035ba:	605a      	strne	r2, [r3, #4]
 80035bc:	e7ec      	b.n	8003598 <_malloc_r+0xa0>
 80035be:	4623      	mov	r3, r4
 80035c0:	6864      	ldr	r4, [r4, #4]
 80035c2:	e7b2      	b.n	800352a <_malloc_r+0x32>
 80035c4:	4634      	mov	r4, r6
 80035c6:	6876      	ldr	r6, [r6, #4]
 80035c8:	e7b9      	b.n	800353e <_malloc_r+0x46>
 80035ca:	230c      	movs	r3, #12
 80035cc:	4638      	mov	r0, r7
 80035ce:	603b      	str	r3, [r7, #0]
 80035d0:	f000 f84c 	bl	800366c <__malloc_unlock>
 80035d4:	e7a1      	b.n	800351a <_malloc_r+0x22>
 80035d6:	6025      	str	r5, [r4, #0]
 80035d8:	e7de      	b.n	8003598 <_malloc_r+0xa0>
 80035da:	bf00      	nop
 80035dc:	200001ec 	.word	0x200001ec

080035e0 <_realloc_r>:
 80035e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035e4:	4680      	mov	r8, r0
 80035e6:	4614      	mov	r4, r2
 80035e8:	460e      	mov	r6, r1
 80035ea:	b921      	cbnz	r1, 80035f6 <_realloc_r+0x16>
 80035ec:	4611      	mov	r1, r2
 80035ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80035f2:	f7ff bf81 	b.w	80034f8 <_malloc_r>
 80035f6:	b92a      	cbnz	r2, 8003604 <_realloc_r+0x24>
 80035f8:	f7ff ff16 	bl	8003428 <_free_r>
 80035fc:	4625      	mov	r5, r4
 80035fe:	4628      	mov	r0, r5
 8003600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003604:	f000 f838 	bl	8003678 <_malloc_usable_size_r>
 8003608:	4284      	cmp	r4, r0
 800360a:	4607      	mov	r7, r0
 800360c:	d802      	bhi.n	8003614 <_realloc_r+0x34>
 800360e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003612:	d812      	bhi.n	800363a <_realloc_r+0x5a>
 8003614:	4621      	mov	r1, r4
 8003616:	4640      	mov	r0, r8
 8003618:	f7ff ff6e 	bl	80034f8 <_malloc_r>
 800361c:	4605      	mov	r5, r0
 800361e:	2800      	cmp	r0, #0
 8003620:	d0ed      	beq.n	80035fe <_realloc_r+0x1e>
 8003622:	42bc      	cmp	r4, r7
 8003624:	4622      	mov	r2, r4
 8003626:	4631      	mov	r1, r6
 8003628:	bf28      	it	cs
 800362a:	463a      	movcs	r2, r7
 800362c:	f7ff fed4 	bl	80033d8 <memcpy>
 8003630:	4631      	mov	r1, r6
 8003632:	4640      	mov	r0, r8
 8003634:	f7ff fef8 	bl	8003428 <_free_r>
 8003638:	e7e1      	b.n	80035fe <_realloc_r+0x1e>
 800363a:	4635      	mov	r5, r6
 800363c:	e7df      	b.n	80035fe <_realloc_r+0x1e>
	...

08003640 <_sbrk_r>:
 8003640:	b538      	push	{r3, r4, r5, lr}
 8003642:	2300      	movs	r3, #0
 8003644:	4d05      	ldr	r5, [pc, #20]	; (800365c <_sbrk_r+0x1c>)
 8003646:	4604      	mov	r4, r0
 8003648:	4608      	mov	r0, r1
 800364a:	602b      	str	r3, [r5, #0]
 800364c:	f7fd f8cc 	bl	80007e8 <_sbrk>
 8003650:	1c43      	adds	r3, r0, #1
 8003652:	d102      	bne.n	800365a <_sbrk_r+0x1a>
 8003654:	682b      	ldr	r3, [r5, #0]
 8003656:	b103      	cbz	r3, 800365a <_sbrk_r+0x1a>
 8003658:	6023      	str	r3, [r4, #0]
 800365a:	bd38      	pop	{r3, r4, r5, pc}
 800365c:	200001f4 	.word	0x200001f4

08003660 <__malloc_lock>:
 8003660:	4801      	ldr	r0, [pc, #4]	; (8003668 <__malloc_lock+0x8>)
 8003662:	f000 b811 	b.w	8003688 <__retarget_lock_acquire_recursive>
 8003666:	bf00      	nop
 8003668:	200001f8 	.word	0x200001f8

0800366c <__malloc_unlock>:
 800366c:	4801      	ldr	r0, [pc, #4]	; (8003674 <__malloc_unlock+0x8>)
 800366e:	f000 b80c 	b.w	800368a <__retarget_lock_release_recursive>
 8003672:	bf00      	nop
 8003674:	200001f8 	.word	0x200001f8

08003678 <_malloc_usable_size_r>:
 8003678:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800367c:	1f18      	subs	r0, r3, #4
 800367e:	2b00      	cmp	r3, #0
 8003680:	bfbc      	itt	lt
 8003682:	580b      	ldrlt	r3, [r1, r0]
 8003684:	18c0      	addlt	r0, r0, r3
 8003686:	4770      	bx	lr

08003688 <__retarget_lock_acquire_recursive>:
 8003688:	4770      	bx	lr

0800368a <__retarget_lock_release_recursive>:
 800368a:	4770      	bx	lr

0800368c <_init>:
 800368c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800368e:	bf00      	nop
 8003690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003692:	bc08      	pop	{r3}
 8003694:	469e      	mov	lr, r3
 8003696:	4770      	bx	lr

08003698 <_fini>:
 8003698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800369a:	bf00      	nop
 800369c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800369e:	bc08      	pop	{r3}
 80036a0:	469e      	mov	lr, r3
 80036a2:	4770      	bx	lr
