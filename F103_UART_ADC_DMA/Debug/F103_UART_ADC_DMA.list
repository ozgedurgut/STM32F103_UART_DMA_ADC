
F103_UART_ADC_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004608  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08004714  08004714  00014714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800478c  0800478c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800478c  0800478c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800478c  0800478c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800478c  0800478c  0001478c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004790  08004790  00014790  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004794  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c8  20000070  08004804  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000238  08004804  00020238  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ce60  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000211c  00000000  00000000  0002cef9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e00  00000000  00000000  0002f018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d28  00000000  00000000  0002fe18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000187c9  00000000  00000000  00030b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fe18  00000000  00000000  00049309  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fc78  00000000  00000000  00059121  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e8d99  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e34  00000000  00000000  000e8dec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080046fc 	.word	0x080046fc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080046fc 	.word	0x080046fc

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <sendData>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void sendData(char *data) {
 800015c:	b580      	push	{r7, lr}
 800015e:	b084      	sub	sp, #16
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
	len = sizeof(txdata) / sizeof(txdata[0]);
 8000164:	4b15      	ldr	r3, [pc, #84]	; (80001bc <sendData+0x60>)
 8000166:	2208      	movs	r2, #8
 8000168:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < len; i++) {
 800016a:	2300      	movs	r3, #0
 800016c:	60fb      	str	r3, [r7, #12]
 800016e:	e00b      	b.n	8000188 <sendData+0x2c>
		txdata[i] = data[i];
 8000170:	68fb      	ldr	r3, [r7, #12]
 8000172:	687a      	ldr	r2, [r7, #4]
 8000174:	4413      	add	r3, r2
 8000176:	7819      	ldrb	r1, [r3, #0]
 8000178:	4a11      	ldr	r2, [pc, #68]	; (80001c0 <sendData+0x64>)
 800017a:	68fb      	ldr	r3, [r7, #12]
 800017c:	4413      	add	r3, r2
 800017e:	460a      	mov	r2, r1
 8000180:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < len; i++) {
 8000182:	68fb      	ldr	r3, [r7, #12]
 8000184:	3301      	adds	r3, #1
 8000186:	60fb      	str	r3, [r7, #12]
 8000188:	4b0c      	ldr	r3, [pc, #48]	; (80001bc <sendData+0x60>)
 800018a:	781b      	ldrb	r3, [r3, #0]
 800018c:	461a      	mov	r2, r3
 800018e:	68fb      	ldr	r3, [r7, #12]
 8000190:	4293      	cmp	r3, r2
 8000192:	dbed      	blt.n	8000170 <sendData+0x14>
	}
	sprintf(txdatanew, "%s",txdata);
 8000194:	4a0a      	ldr	r2, [pc, #40]	; (80001c0 <sendData+0x64>)
 8000196:	490b      	ldr	r1, [pc, #44]	; (80001c4 <sendData+0x68>)
 8000198:	480b      	ldr	r0, [pc, #44]	; (80001c8 <sendData+0x6c>)
 800019a:	f003 fe35 	bl	8003e08 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)&txdatanew, strlen(txdatanew), 500);
 800019e:	480a      	ldr	r0, [pc, #40]	; (80001c8 <sendData+0x6c>)
 80001a0:	f7ff ffd4 	bl	800014c <strlen>
 80001a4:	4603      	mov	r3, r0
 80001a6:	b29a      	uxth	r2, r3
 80001a8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80001ac:	4906      	ldr	r1, [pc, #24]	; (80001c8 <sendData+0x6c>)
 80001ae:	4807      	ldr	r0, [pc, #28]	; (80001cc <sendData+0x70>)
 80001b0:	f003 f813 	bl	80031da <HAL_UART_Transmit>
}
 80001b4:	bf00      	nop
 80001b6:	3710      	adds	r7, #16
 80001b8:	46bd      	mov	sp, r7
 80001ba:	bd80      	pop	{r7, pc}
 80001bc:	2000020d 	.word	0x2000020d
 80001c0:	200001f0 	.word	0x200001f0
 80001c4:	08004714 	.word	0x08004714
 80001c8:	200001f8 	.word	0x200001f8
 80001cc:	20000148 	.word	0x20000148

080001d0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80001d0:	b580      	push	{r7, lr}
 80001d2:	b082      	sub	sp, #8
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	6078      	str	r0, [r7, #4]
	if (huart == &huart1) {
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	4a17      	ldr	r2, [pc, #92]	; (8000238 <HAL_UART_RxCpltCallback+0x68>)
 80001dc:	4293      	cmp	r3, r2
 80001de:	d126      	bne.n	800022e <HAL_UART_RxCpltCallback+0x5e>
		previousTime = currentTime;
 80001e0:	4b16      	ldr	r3, [pc, #88]	; (800023c <HAL_UART_RxCpltCallback+0x6c>)
 80001e2:	681b      	ldr	r3, [r3, #0]
 80001e4:	4a16      	ldr	r2, [pc, #88]	; (8000240 <HAL_UART_RxCpltCallback+0x70>)
 80001e6:	6013      	str	r3, [r2, #0]
		rxBuf[rxindex] = Buf_1ch[0];
 80001e8:	4b16      	ldr	r3, [pc, #88]	; (8000244 <HAL_UART_RxCpltCallback+0x74>)
 80001ea:	781b      	ldrb	r3, [r3, #0]
 80001ec:	461a      	mov	r2, r3
 80001ee:	4b16      	ldr	r3, [pc, #88]	; (8000248 <HAL_UART_RxCpltCallback+0x78>)
 80001f0:	7819      	ldrb	r1, [r3, #0]
 80001f2:	4b16      	ldr	r3, [pc, #88]	; (800024c <HAL_UART_RxCpltCallback+0x7c>)
 80001f4:	5499      	strb	r1, [r3, r2]
		final_data[rxindex] = rxBuf[rxindex];
 80001f6:	4b13      	ldr	r3, [pc, #76]	; (8000244 <HAL_UART_RxCpltCallback+0x74>)
 80001f8:	781b      	ldrb	r3, [r3, #0]
 80001fa:	4619      	mov	r1, r3
 80001fc:	4b11      	ldr	r3, [pc, #68]	; (8000244 <HAL_UART_RxCpltCallback+0x74>)
 80001fe:	781b      	ldrb	r3, [r3, #0]
 8000200:	461a      	mov	r2, r3
 8000202:	4b12      	ldr	r3, [pc, #72]	; (800024c <HAL_UART_RxCpltCallback+0x7c>)
 8000204:	5c59      	ldrb	r1, [r3, r1]
 8000206:	4b12      	ldr	r3, [pc, #72]	; (8000250 <HAL_UART_RxCpltCallback+0x80>)
 8000208:	5499      	strb	r1, [r3, r2]
		rxindex++;
 800020a:	4b0e      	ldr	r3, [pc, #56]	; (8000244 <HAL_UART_RxCpltCallback+0x74>)
 800020c:	781b      	ldrb	r3, [r3, #0]
 800020e:	3301      	adds	r3, #1
 8000210:	b2da      	uxtb	r2, r3
 8000212:	4b0c      	ldr	r3, [pc, #48]	; (8000244 <HAL_UART_RxCpltCallback+0x74>)
 8000214:	701a      	strb	r2, [r3, #0]

		HAL_UART_Receive_DMA(&huart1, Buf_1ch, 1);
 8000216:	2201      	movs	r2, #1
 8000218:	490b      	ldr	r1, [pc, #44]	; (8000248 <HAL_UART_RxCpltCallback+0x78>)
 800021a:	4807      	ldr	r0, [pc, #28]	; (8000238 <HAL_UART_RxCpltCallback+0x68>)
 800021c:	f003 f86f 	bl	80032fe <HAL_UART_Receive_DMA>
		if (rxindex >= 8) {
 8000220:	4b08      	ldr	r3, [pc, #32]	; (8000244 <HAL_UART_RxCpltCallback+0x74>)
 8000222:	781b      	ldrb	r3, [r3, #0]
 8000224:	2b07      	cmp	r3, #7
 8000226:	d902      	bls.n	800022e <HAL_UART_RxCpltCallback+0x5e>
			rxindex = 0;
 8000228:	4b06      	ldr	r3, [pc, #24]	; (8000244 <HAL_UART_RxCpltCallback+0x74>)
 800022a:	2200      	movs	r2, #0
 800022c:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800022e:	bf00      	nop
 8000230:	3708      	adds	r7, #8
 8000232:	46bd      	mov	sp, r7
 8000234:	bd80      	pop	{r7, pc}
 8000236:	bf00      	nop
 8000238:	20000148 	.word	0x20000148
 800023c:	20000210 	.word	0x20000210
 8000240:	20000214 	.word	0x20000214
 8000244:	20000208 	.word	0x20000208
 8000248:	2000020c 	.word	0x2000020c
 800024c:	20000200 	.word	0x20000200
 8000250:	20000218 	.word	0x20000218

08000254 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b082      	sub	sp, #8
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1)  // adc1 den deÄŸer geliyorsa
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	4a0d      	ldr	r2, [pc, #52]	; (8000298 <HAL_ADC_ConvCpltCallback+0x44>)
 8000262:	4293      	cmp	r3, r2
 8000264:	d114      	bne.n	8000290 <HAL_ADC_ConvCpltCallback+0x3c>
	{
		data4 = adcbuffer[0];
 8000266:	4b0d      	ldr	r3, [pc, #52]	; (800029c <HAL_ADC_ConvCpltCallback+0x48>)
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	4a0d      	ldr	r2, [pc, #52]	; (80002a0 <HAL_ADC_ConvCpltCallback+0x4c>)
 800026c:	6013      	str	r3, [r2, #0]
		data1  = adcbuffer[1];
 800026e:	4b0b      	ldr	r3, [pc, #44]	; (800029c <HAL_ADC_ConvCpltCallback+0x48>)
 8000270:	685b      	ldr	r3, [r3, #4]
 8000272:	4a0c      	ldr	r2, [pc, #48]	; (80002a4 <HAL_ADC_ConvCpltCallback+0x50>)
 8000274:	6013      	str	r3, [r2, #0]
		data2 = adcbuffer[2];
 8000276:	4b09      	ldr	r3, [pc, #36]	; (800029c <HAL_ADC_ConvCpltCallback+0x48>)
 8000278:	689b      	ldr	r3, [r3, #8]
 800027a:	4a0b      	ldr	r2, [pc, #44]	; (80002a8 <HAL_ADC_ConvCpltCallback+0x54>)
 800027c:	6013      	str	r3, [r2, #0]
		data3 = adcbuffer[3];
 800027e:	4b07      	ldr	r3, [pc, #28]	; (800029c <HAL_ADC_ConvCpltCallback+0x48>)
 8000280:	68db      	ldr	r3, [r3, #12]
 8000282:	4a0a      	ldr	r2, [pc, #40]	; (80002ac <HAL_ADC_ConvCpltCallback+0x58>)
 8000284:	6013      	str	r3, [r2, #0]
		HAL_ADC_Start_DMA(&hadc1, adcbuffer, 4);
 8000286:	2204      	movs	r2, #4
 8000288:	4904      	ldr	r1, [pc, #16]	; (800029c <HAL_ADC_ConvCpltCallback+0x48>)
 800028a:	4809      	ldr	r0, [pc, #36]	; (80002b0 <HAL_ADC_ConvCpltCallback+0x5c>)
 800028c:	f000 fda0 	bl	8000dd0 <HAL_ADC_Start_DMA>
	}
}
 8000290:	bf00      	nop
 8000292:	3708      	adds	r7, #8
 8000294:	46bd      	mov	sp, r7
 8000296:	bd80      	pop	{r7, pc}
 8000298:	40012400 	.word	0x40012400
 800029c:	200001d0 	.word	0x200001d0
 80002a0:	200001ec 	.word	0x200001ec
 80002a4:	200001e0 	.word	0x200001e0
 80002a8:	200001e4 	.word	0x200001e4
 80002ac:	200001e8 	.word	0x200001e8
 80002b0:	2000008c 	.word	0x2000008c

080002b4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b082      	sub	sp, #8
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) { // sadece timer1 den kesmeye girdiginde burayi yapacak
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	4a0f      	ldr	r2, [pc, #60]	; (8000300 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80002c2:	4293      	cmp	r3, r2
 80002c4:	d118      	bne.n	80002f8 <HAL_TIM_PeriodElapsedCallback+0x44>
		currentTime = HAL_GetTick();
 80002c6:	f000 fc7d 	bl	8000bc4 <HAL_GetTick>
 80002ca:	4603      	mov	r3, r0
 80002cc:	4a0d      	ldr	r2, [pc, #52]	; (8000304 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80002ce:	6013      	str	r3, [r2, #0]
		if (currentTime - previousTime >= 600)  { // dizide adres kaymasi yasanmasin diye egerki  300 msnden fazla fark varsa dizinin indexini sifirlama
 80002d0:	4b0c      	ldr	r3, [pc, #48]	; (8000304 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80002d2:	681a      	ldr	r2, [r3, #0]
 80002d4:	4b0c      	ldr	r3, [pc, #48]	; (8000308 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	1ad3      	subs	r3, r2, r3
 80002da:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80002de:	d302      	bcc.n	80002e6 <HAL_TIM_PeriodElapsedCallback+0x32>
			rxindex_2 = 0;
 80002e0:	4b0a      	ldr	r3, [pc, #40]	; (800030c <HAL_TIM_PeriodElapsedCallback+0x58>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	701a      	strb	r2, [r3, #0]
		}
		memset(rxBuf, 0, strlen((char *)rxBuf));
 80002e6:	480a      	ldr	r0, [pc, #40]	; (8000310 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80002e8:	f7ff ff30 	bl	800014c <strlen>
 80002ec:	4603      	mov	r3, r0
 80002ee:	461a      	mov	r2, r3
 80002f0:	2100      	movs	r1, #0
 80002f2:	4807      	ldr	r0, [pc, #28]	; (8000310 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80002f4:	f003 fd80 	bl	8003df8 <memset>
	}
}
 80002f8:	bf00      	nop
 80002fa:	3708      	adds	r7, #8
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bd80      	pop	{r7, pc}
 8000300:	40012c00 	.word	0x40012c00
 8000304:	20000210 	.word	0x20000210
 8000308:	20000214 	.word	0x20000214
 800030c:	20000209 	.word	0x20000209
 8000310:	20000200 	.word	0x20000200

08000314 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000318:	f000 fbfc 	bl	8000b14 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800031c:	f000 f83e 	bl	800039c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000320:	f000 f998 	bl	8000654 <MX_GPIO_Init>
	MX_DMA_Init();
 8000324:	f000 f970 	bl	8000608 <MX_DMA_Init>
	MX_ADC1_Init();
 8000328:	f000 f888 	bl	800043c <MX_ADC1_Init>
	MX_USART1_UART_Init();
 800032c:	f000 f942 	bl	80005b4 <MX_USART1_UART_Init>
	MX_TIM1_Init();
 8000330:	f000 f8ee 	bl	8000510 <MX_TIM1_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim1);
 8000334:	4811      	ldr	r0, [pc, #68]	; (800037c <main+0x68>)
 8000336:	f002 fb59 	bl	80029ec <HAL_TIM_Base_Start_IT>


	HAL_ADC_Start_DMA(&hadc1,adcbuffer,4); // dizi 4 elemanlÄ±
 800033a:	2204      	movs	r2, #4
 800033c:	4910      	ldr	r1, [pc, #64]	; (8000380 <main+0x6c>)
 800033e:	4811      	ldr	r0, [pc, #68]	; (8000384 <main+0x70>)
 8000340:	f000 fd46 	bl	8000dd0 <HAL_ADC_Start_DMA>

	HAL_UART_Receive_DMA(&huart1, Buf_1ch, 1); // dmayÄ± tekrar kurduk yine alabilsin diye
 8000344:	2201      	movs	r2, #1
 8000346:	4910      	ldr	r1, [pc, #64]	; (8000388 <main+0x74>)
 8000348:	4810      	ldr	r0, [pc, #64]	; (800038c <main+0x78>)
 800034a:	f002 ffd8 	bl	80032fe <HAL_UART_Receive_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 800034e:	4b10      	ldr	r3, [pc, #64]	; (8000390 <main+0x7c>)
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	681a      	ldr	r2, [r3, #0]
 8000354:	4b0e      	ldr	r3, [pc, #56]	; (8000390 <main+0x7c>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	f022 0204 	bic.w	r2, r2, #4
 800035c:	601a      	str	r2, [r3, #0]
	while (1)
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		sendData("ozgedurgut");
 800035e:	480d      	ldr	r0, [pc, #52]	; (8000394 <main+0x80>)
 8000360:	f7ff fefc 	bl	800015c <sendData>
		HAL_Delay(1000);
 8000364:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000368:	f000 fc36 	bl	8000bd8 <HAL_Delay>
		sendData("HelloWorld");
 800036c:	480a      	ldr	r0, [pc, #40]	; (8000398 <main+0x84>)
 800036e:	f7ff fef5 	bl	800015c <sendData>
		HAL_Delay(1000);
 8000372:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000376:	f000 fc2f 	bl	8000bd8 <HAL_Delay>
		sendData("ozgedurgut");
 800037a:	e7f0      	b.n	800035e <main+0x4a>
 800037c:	20000100 	.word	0x20000100
 8000380:	200001d0 	.word	0x200001d0
 8000384:	2000008c 	.word	0x2000008c
 8000388:	2000020c 	.word	0x2000020c
 800038c:	20000148 	.word	0x20000148
 8000390:	2000018c 	.word	0x2000018c
 8000394:	08004718 	.word	0x08004718
 8000398:	08004724 	.word	0x08004724

0800039c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b094      	sub	sp, #80	; 0x50
 80003a0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003a6:	2228      	movs	r2, #40	; 0x28
 80003a8:	2100      	movs	r1, #0
 80003aa:	4618      	mov	r0, r3
 80003ac:	f003 fd24 	bl	8003df8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003b0:	f107 0314 	add.w	r3, r7, #20
 80003b4:	2200      	movs	r2, #0
 80003b6:	601a      	str	r2, [r3, #0]
 80003b8:	605a      	str	r2, [r3, #4]
 80003ba:	609a      	str	r2, [r3, #8]
 80003bc:	60da      	str	r2, [r3, #12]
 80003be:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003c0:	1d3b      	adds	r3, r7, #4
 80003c2:	2200      	movs	r2, #0
 80003c4:	601a      	str	r2, [r3, #0]
 80003c6:	605a      	str	r2, [r3, #4]
 80003c8:	609a      	str	r2, [r3, #8]
 80003ca:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003cc:	2302      	movs	r3, #2
 80003ce:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003d0:	2301      	movs	r3, #1
 80003d2:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003d4:	2310      	movs	r3, #16
 80003d6:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003d8:	2300      	movs	r3, #0
 80003da:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003e0:	4618      	mov	r0, r3
 80003e2:	f001 fde3 	bl	8001fac <HAL_RCC_OscConfig>
 80003e6:	4603      	mov	r3, r0
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d001      	beq.n	80003f0 <SystemClock_Config+0x54>
	{
		Error_Handler();
 80003ec:	f000 f954 	bl	8000698 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003f0:	230f      	movs	r3, #15
 80003f2:	617b      	str	r3, [r7, #20]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003f4:	2300      	movs	r3, #0
 80003f6:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003f8:	2300      	movs	r3, #0
 80003fa:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003fc:	2300      	movs	r3, #0
 80003fe:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000400:	2300      	movs	r3, #0
 8000402:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000404:	f107 0314 	add.w	r3, r7, #20
 8000408:	2100      	movs	r1, #0
 800040a:	4618      	mov	r0, r3
 800040c:	f002 f850 	bl	80024b0 <HAL_RCC_ClockConfig>
 8000410:	4603      	mov	r3, r0
 8000412:	2b00      	cmp	r3, #0
 8000414:	d001      	beq.n	800041a <SystemClock_Config+0x7e>
	{
		Error_Handler();
 8000416:	f000 f93f 	bl	8000698 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800041a:	2302      	movs	r3, #2
 800041c:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800041e:	2300      	movs	r3, #0
 8000420:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000422:	1d3b      	adds	r3, r7, #4
 8000424:	4618      	mov	r0, r3
 8000426:	f002 f9db 	bl	80027e0 <HAL_RCCEx_PeriphCLKConfig>
 800042a:	4603      	mov	r3, r0
 800042c:	2b00      	cmp	r3, #0
 800042e:	d001      	beq.n	8000434 <SystemClock_Config+0x98>
	{
		Error_Handler();
 8000430:	f000 f932 	bl	8000698 <Error_Handler>
	}
}
 8000434:	bf00      	nop
 8000436:	3750      	adds	r7, #80	; 0x50
 8000438:	46bd      	mov	sp, r7
 800043a:	bd80      	pop	{r7, pc}

0800043c <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b084      	sub	sp, #16
 8000440:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 8000442:	1d3b      	adds	r3, r7, #4
 8000444:	2200      	movs	r2, #0
 8000446:	601a      	str	r2, [r3, #0]
 8000448:	605a      	str	r2, [r3, #4]
 800044a:	609a      	str	r2, [r3, #8]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 800044c:	4b2e      	ldr	r3, [pc, #184]	; (8000508 <MX_ADC1_Init+0xcc>)
 800044e:	4a2f      	ldr	r2, [pc, #188]	; (800050c <MX_ADC1_Init+0xd0>)
 8000450:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000452:	4b2d      	ldr	r3, [pc, #180]	; (8000508 <MX_ADC1_Init+0xcc>)
 8000454:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000458:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = ENABLE;
 800045a:	4b2b      	ldr	r3, [pc, #172]	; (8000508 <MX_ADC1_Init+0xcc>)
 800045c:	2201      	movs	r2, #1
 800045e:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000460:	4b29      	ldr	r3, [pc, #164]	; (8000508 <MX_ADC1_Init+0xcc>)
 8000462:	2200      	movs	r2, #0
 8000464:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000466:	4b28      	ldr	r3, [pc, #160]	; (8000508 <MX_ADC1_Init+0xcc>)
 8000468:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800046c:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800046e:	4b26      	ldr	r3, [pc, #152]	; (8000508 <MX_ADC1_Init+0xcc>)
 8000470:	2200      	movs	r2, #0
 8000472:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 4;
 8000474:	4b24      	ldr	r3, [pc, #144]	; (8000508 <MX_ADC1_Init+0xcc>)
 8000476:	2204      	movs	r2, #4
 8000478:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800047a:	4823      	ldr	r0, [pc, #140]	; (8000508 <MX_ADC1_Init+0xcc>)
 800047c:	f000 fbd0 	bl	8000c20 <HAL_ADC_Init>
 8000480:	4603      	mov	r3, r0
 8000482:	2b00      	cmp	r3, #0
 8000484:	d001      	beq.n	800048a <MX_ADC1_Init+0x4e>
	{
		Error_Handler();
 8000486:	f000 f907 	bl	8000698 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 800048a:	2300      	movs	r3, #0
 800048c:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800048e:	2301      	movs	r3, #1
 8000490:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000492:	2300      	movs	r3, #0
 8000494:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000496:	1d3b      	adds	r3, r7, #4
 8000498:	4619      	mov	r1, r3
 800049a:	481b      	ldr	r0, [pc, #108]	; (8000508 <MX_ADC1_Init+0xcc>)
 800049c:	f000 fe54 	bl	8001148 <HAL_ADC_ConfigChannel>
 80004a0:	4603      	mov	r3, r0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d001      	beq.n	80004aa <MX_ADC1_Init+0x6e>
	{
		Error_Handler();
 80004a6:	f000 f8f7 	bl	8000698 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 80004aa:	2301      	movs	r3, #1
 80004ac:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 80004ae:	2302      	movs	r3, #2
 80004b0:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004b2:	1d3b      	adds	r3, r7, #4
 80004b4:	4619      	mov	r1, r3
 80004b6:	4814      	ldr	r0, [pc, #80]	; (8000508 <MX_ADC1_Init+0xcc>)
 80004b8:	f000 fe46 	bl	8001148 <HAL_ADC_ConfigChannel>
 80004bc:	4603      	mov	r3, r0
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d001      	beq.n	80004c6 <MX_ADC1_Init+0x8a>
	{
		Error_Handler();
 80004c2:	f000 f8e9 	bl	8000698 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_2;
 80004c6:	2302      	movs	r3, #2
 80004c8:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_3;
 80004ca:	2303      	movs	r3, #3
 80004cc:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004ce:	1d3b      	adds	r3, r7, #4
 80004d0:	4619      	mov	r1, r3
 80004d2:	480d      	ldr	r0, [pc, #52]	; (8000508 <MX_ADC1_Init+0xcc>)
 80004d4:	f000 fe38 	bl	8001148 <HAL_ADC_ConfigChannel>
 80004d8:	4603      	mov	r3, r0
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <MX_ADC1_Init+0xa6>
	{
		Error_Handler();
 80004de:	f000 f8db 	bl	8000698 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_3;
 80004e2:	2303      	movs	r3, #3
 80004e4:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_4;
 80004e6:	2304      	movs	r3, #4
 80004e8:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004ea:	1d3b      	adds	r3, r7, #4
 80004ec:	4619      	mov	r1, r3
 80004ee:	4806      	ldr	r0, [pc, #24]	; (8000508 <MX_ADC1_Init+0xcc>)
 80004f0:	f000 fe2a 	bl	8001148 <HAL_ADC_ConfigChannel>
 80004f4:	4603      	mov	r3, r0
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d001      	beq.n	80004fe <MX_ADC1_Init+0xc2>
	{
		Error_Handler();
 80004fa:	f000 f8cd 	bl	8000698 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80004fe:	bf00      	nop
 8000500:	3710      	adds	r7, #16
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	2000008c 	.word	0x2000008c
 800050c:	40012400 	.word	0x40012400

08000510 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b086      	sub	sp, #24
 8000514:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000516:	f107 0308 	add.w	r3, r7, #8
 800051a:	2200      	movs	r2, #0
 800051c:	601a      	str	r2, [r3, #0]
 800051e:	605a      	str	r2, [r3, #4]
 8000520:	609a      	str	r2, [r3, #8]
 8000522:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000524:	463b      	mov	r3, r7
 8000526:	2200      	movs	r2, #0
 8000528:	601a      	str	r2, [r3, #0]
 800052a:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 800052c:	4b1f      	ldr	r3, [pc, #124]	; (80005ac <MX_TIM1_Init+0x9c>)
 800052e:	4a20      	ldr	r2, [pc, #128]	; (80005b0 <MX_TIM1_Init+0xa0>)
 8000530:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 720-1;
 8000532:	4b1e      	ldr	r3, [pc, #120]	; (80005ac <MX_TIM1_Init+0x9c>)
 8000534:	f240 22cf 	movw	r2, #719	; 0x2cf
 8000538:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800053a:	4b1c      	ldr	r3, [pc, #112]	; (80005ac <MX_TIM1_Init+0x9c>)
 800053c:	2200      	movs	r2, #0
 800053e:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 10000-1;
 8000540:	4b1a      	ldr	r3, [pc, #104]	; (80005ac <MX_TIM1_Init+0x9c>)
 8000542:	f242 720f 	movw	r2, #9999	; 0x270f
 8000546:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000548:	4b18      	ldr	r3, [pc, #96]	; (80005ac <MX_TIM1_Init+0x9c>)
 800054a:	2200      	movs	r2, #0
 800054c:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 800054e:	4b17      	ldr	r3, [pc, #92]	; (80005ac <MX_TIM1_Init+0x9c>)
 8000550:	2200      	movs	r2, #0
 8000552:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000554:	4b15      	ldr	r3, [pc, #84]	; (80005ac <MX_TIM1_Init+0x9c>)
 8000556:	2280      	movs	r2, #128	; 0x80
 8000558:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800055a:	4814      	ldr	r0, [pc, #80]	; (80005ac <MX_TIM1_Init+0x9c>)
 800055c:	f002 f9f6 	bl	800294c <HAL_TIM_Base_Init>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d001      	beq.n	800056a <MX_TIM1_Init+0x5a>
	{
		Error_Handler();
 8000566:	f000 f897 	bl	8000698 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800056a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800056e:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000570:	f107 0308 	add.w	r3, r7, #8
 8000574:	4619      	mov	r1, r3
 8000576:	480d      	ldr	r0, [pc, #52]	; (80005ac <MX_TIM1_Init+0x9c>)
 8000578:	f002 fb92 	bl	8002ca0 <HAL_TIM_ConfigClockSource>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d001      	beq.n	8000586 <MX_TIM1_Init+0x76>
	{
		Error_Handler();
 8000582:	f000 f889 	bl	8000698 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000586:	2300      	movs	r3, #0
 8000588:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800058a:	2300      	movs	r3, #0
 800058c:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800058e:	463b      	mov	r3, r7
 8000590:	4619      	mov	r1, r3
 8000592:	4806      	ldr	r0, [pc, #24]	; (80005ac <MX_TIM1_Init+0x9c>)
 8000594:	f002 fd64 	bl	8003060 <HAL_TIMEx_MasterConfigSynchronization>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <MX_TIM1_Init+0x92>
	{
		Error_Handler();
 800059e:	f000 f87b 	bl	8000698 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 80005a2:	bf00      	nop
 80005a4:	3718      	adds	r7, #24
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	20000100 	.word	0x20000100
 80005b0:	40012c00 	.word	0x40012c00

080005b4 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80005b8:	4b11      	ldr	r3, [pc, #68]	; (8000600 <MX_USART1_UART_Init+0x4c>)
 80005ba:	4a12      	ldr	r2, [pc, #72]	; (8000604 <MX_USART1_UART_Init+0x50>)
 80005bc:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80005be:	4b10      	ldr	r3, [pc, #64]	; (8000600 <MX_USART1_UART_Init+0x4c>)
 80005c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005c4:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005c6:	4b0e      	ldr	r3, [pc, #56]	; (8000600 <MX_USART1_UART_Init+0x4c>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80005cc:	4b0c      	ldr	r3, [pc, #48]	; (8000600 <MX_USART1_UART_Init+0x4c>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80005d2:	4b0b      	ldr	r3, [pc, #44]	; (8000600 <MX_USART1_UART_Init+0x4c>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80005d8:	4b09      	ldr	r3, [pc, #36]	; (8000600 <MX_USART1_UART_Init+0x4c>)
 80005da:	220c      	movs	r2, #12
 80005dc:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005de:	4b08      	ldr	r3, [pc, #32]	; (8000600 <MX_USART1_UART_Init+0x4c>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005e4:	4b06      	ldr	r3, [pc, #24]	; (8000600 <MX_USART1_UART_Init+0x4c>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 80005ea:	4805      	ldr	r0, [pc, #20]	; (8000600 <MX_USART1_UART_Init+0x4c>)
 80005ec:	f002 fda8 	bl	8003140 <HAL_UART_Init>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <MX_USART1_UART_Init+0x46>
	{
		Error_Handler();
 80005f6:	f000 f84f 	bl	8000698 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80005fa:	bf00      	nop
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	20000148 	.word	0x20000148
 8000604:	40013800 	.word	0x40013800

08000608 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 800060e:	4b10      	ldr	r3, [pc, #64]	; (8000650 <MX_DMA_Init+0x48>)
 8000610:	695b      	ldr	r3, [r3, #20]
 8000612:	4a0f      	ldr	r2, [pc, #60]	; (8000650 <MX_DMA_Init+0x48>)
 8000614:	f043 0301 	orr.w	r3, r3, #1
 8000618:	6153      	str	r3, [r2, #20]
 800061a:	4b0d      	ldr	r3, [pc, #52]	; (8000650 <MX_DMA_Init+0x48>)
 800061c:	695b      	ldr	r3, [r3, #20]
 800061e:	f003 0301 	and.w	r3, r3, #1
 8000622:	607b      	str	r3, [r7, #4]
 8000624:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000626:	2200      	movs	r2, #0
 8000628:	2100      	movs	r1, #0
 800062a:	200b      	movs	r0, #11
 800062c:	f001 f865 	bl	80016fa <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000630:	200b      	movs	r0, #11
 8000632:	f001 f87e 	bl	8001732 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000636:	2200      	movs	r2, #0
 8000638:	2100      	movs	r1, #0
 800063a:	200f      	movs	r0, #15
 800063c:	f001 f85d 	bl	80016fa <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000640:	200f      	movs	r0, #15
 8000642:	f001 f876 	bl	8001732 <HAL_NVIC_EnableIRQ>

}
 8000646:	bf00      	nop
 8000648:	3708      	adds	r7, #8
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	40021000 	.word	0x40021000

08000654 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800065a:	4b0e      	ldr	r3, [pc, #56]	; (8000694 <MX_GPIO_Init+0x40>)
 800065c:	699b      	ldr	r3, [r3, #24]
 800065e:	4a0d      	ldr	r2, [pc, #52]	; (8000694 <MX_GPIO_Init+0x40>)
 8000660:	f043 0320 	orr.w	r3, r3, #32
 8000664:	6193      	str	r3, [r2, #24]
 8000666:	4b0b      	ldr	r3, [pc, #44]	; (8000694 <MX_GPIO_Init+0x40>)
 8000668:	699b      	ldr	r3, [r3, #24]
 800066a:	f003 0320 	and.w	r3, r3, #32
 800066e:	607b      	str	r3, [r7, #4]
 8000670:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000672:	4b08      	ldr	r3, [pc, #32]	; (8000694 <MX_GPIO_Init+0x40>)
 8000674:	699b      	ldr	r3, [r3, #24]
 8000676:	4a07      	ldr	r2, [pc, #28]	; (8000694 <MX_GPIO_Init+0x40>)
 8000678:	f043 0304 	orr.w	r3, r3, #4
 800067c:	6193      	str	r3, [r2, #24]
 800067e:	4b05      	ldr	r3, [pc, #20]	; (8000694 <MX_GPIO_Init+0x40>)
 8000680:	699b      	ldr	r3, [r3, #24]
 8000682:	f003 0304 	and.w	r3, r3, #4
 8000686:	603b      	str	r3, [r7, #0]
 8000688:	683b      	ldr	r3, [r7, #0]

}
 800068a:	bf00      	nop
 800068c:	370c      	adds	r7, #12
 800068e:	46bd      	mov	sp, r7
 8000690:	bc80      	pop	{r7}
 8000692:	4770      	bx	lr
 8000694:	40021000 	.word	0x40021000

08000698 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800069c:	b672      	cpsid	i
}
 800069e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80006a0:	e7fe      	b.n	80006a0 <Error_Handler+0x8>
	...

080006a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b085      	sub	sp, #20
 80006a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006aa:	4b15      	ldr	r3, [pc, #84]	; (8000700 <HAL_MspInit+0x5c>)
 80006ac:	699b      	ldr	r3, [r3, #24]
 80006ae:	4a14      	ldr	r2, [pc, #80]	; (8000700 <HAL_MspInit+0x5c>)
 80006b0:	f043 0301 	orr.w	r3, r3, #1
 80006b4:	6193      	str	r3, [r2, #24]
 80006b6:	4b12      	ldr	r3, [pc, #72]	; (8000700 <HAL_MspInit+0x5c>)
 80006b8:	699b      	ldr	r3, [r3, #24]
 80006ba:	f003 0301 	and.w	r3, r3, #1
 80006be:	60bb      	str	r3, [r7, #8]
 80006c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c2:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <HAL_MspInit+0x5c>)
 80006c4:	69db      	ldr	r3, [r3, #28]
 80006c6:	4a0e      	ldr	r2, [pc, #56]	; (8000700 <HAL_MspInit+0x5c>)
 80006c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006cc:	61d3      	str	r3, [r2, #28]
 80006ce:	4b0c      	ldr	r3, [pc, #48]	; (8000700 <HAL_MspInit+0x5c>)
 80006d0:	69db      	ldr	r3, [r3, #28]
 80006d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d6:	607b      	str	r3, [r7, #4]
 80006d8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80006da:	4b0a      	ldr	r3, [pc, #40]	; (8000704 <HAL_MspInit+0x60>)
 80006dc:	685b      	ldr	r3, [r3, #4]
 80006de:	60fb      	str	r3, [r7, #12]
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80006e6:	60fb      	str	r3, [r7, #12]
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006ee:	60fb      	str	r3, [r7, #12]
 80006f0:	4a04      	ldr	r2, [pc, #16]	; (8000704 <HAL_MspInit+0x60>)
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006f6:	bf00      	nop
 80006f8:	3714      	adds	r7, #20
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bc80      	pop	{r7}
 80006fe:	4770      	bx	lr
 8000700:	40021000 	.word	0x40021000
 8000704:	40010000 	.word	0x40010000

08000708 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b088      	sub	sp, #32
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000710:	f107 0310 	add.w	r3, r7, #16
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	605a      	str	r2, [r3, #4]
 800071a:	609a      	str	r2, [r3, #8]
 800071c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	4a2c      	ldr	r2, [pc, #176]	; (80007d4 <HAL_ADC_MspInit+0xcc>)
 8000724:	4293      	cmp	r3, r2
 8000726:	d151      	bne.n	80007cc <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000728:	4b2b      	ldr	r3, [pc, #172]	; (80007d8 <HAL_ADC_MspInit+0xd0>)
 800072a:	699b      	ldr	r3, [r3, #24]
 800072c:	4a2a      	ldr	r2, [pc, #168]	; (80007d8 <HAL_ADC_MspInit+0xd0>)
 800072e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000732:	6193      	str	r3, [r2, #24]
 8000734:	4b28      	ldr	r3, [pc, #160]	; (80007d8 <HAL_ADC_MspInit+0xd0>)
 8000736:	699b      	ldr	r3, [r3, #24]
 8000738:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800073c:	60fb      	str	r3, [r7, #12]
 800073e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000740:	4b25      	ldr	r3, [pc, #148]	; (80007d8 <HAL_ADC_MspInit+0xd0>)
 8000742:	699b      	ldr	r3, [r3, #24]
 8000744:	4a24      	ldr	r2, [pc, #144]	; (80007d8 <HAL_ADC_MspInit+0xd0>)
 8000746:	f043 0304 	orr.w	r3, r3, #4
 800074a:	6193      	str	r3, [r2, #24]
 800074c:	4b22      	ldr	r3, [pc, #136]	; (80007d8 <HAL_ADC_MspInit+0xd0>)
 800074e:	699b      	ldr	r3, [r3, #24]
 8000750:	f003 0304 	and.w	r3, r3, #4
 8000754:	60bb      	str	r3, [r7, #8]
 8000756:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000758:	230f      	movs	r3, #15
 800075a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800075c:	2303      	movs	r3, #3
 800075e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000760:	f107 0310 	add.w	r3, r7, #16
 8000764:	4619      	mov	r1, r3
 8000766:	481d      	ldr	r0, [pc, #116]	; (80007dc <HAL_ADC_MspInit+0xd4>)
 8000768:	f001 fa9c 	bl	8001ca4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800076c:	4b1c      	ldr	r3, [pc, #112]	; (80007e0 <HAL_ADC_MspInit+0xd8>)
 800076e:	4a1d      	ldr	r2, [pc, #116]	; (80007e4 <HAL_ADC_MspInit+0xdc>)
 8000770:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000772:	4b1b      	ldr	r3, [pc, #108]	; (80007e0 <HAL_ADC_MspInit+0xd8>)
 8000774:	2200      	movs	r2, #0
 8000776:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000778:	4b19      	ldr	r3, [pc, #100]	; (80007e0 <HAL_ADC_MspInit+0xd8>)
 800077a:	2200      	movs	r2, #0
 800077c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800077e:	4b18      	ldr	r3, [pc, #96]	; (80007e0 <HAL_ADC_MspInit+0xd8>)
 8000780:	2280      	movs	r2, #128	; 0x80
 8000782:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000784:	4b16      	ldr	r3, [pc, #88]	; (80007e0 <HAL_ADC_MspInit+0xd8>)
 8000786:	f44f 7200 	mov.w	r2, #512	; 0x200
 800078a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800078c:	4b14      	ldr	r3, [pc, #80]	; (80007e0 <HAL_ADC_MspInit+0xd8>)
 800078e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000792:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000794:	4b12      	ldr	r3, [pc, #72]	; (80007e0 <HAL_ADC_MspInit+0xd8>)
 8000796:	2220      	movs	r2, #32
 8000798:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800079a:	4b11      	ldr	r3, [pc, #68]	; (80007e0 <HAL_ADC_MspInit+0xd8>)
 800079c:	2200      	movs	r2, #0
 800079e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80007a0:	480f      	ldr	r0, [pc, #60]	; (80007e0 <HAL_ADC_MspInit+0xd8>)
 80007a2:	f000 ffe1 	bl	8001768 <HAL_DMA_Init>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80007ac:	f7ff ff74 	bl	8000698 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	4a0b      	ldr	r2, [pc, #44]	; (80007e0 <HAL_ADC_MspInit+0xd8>)
 80007b4:	621a      	str	r2, [r3, #32]
 80007b6:	4a0a      	ldr	r2, [pc, #40]	; (80007e0 <HAL_ADC_MspInit+0xd8>)
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80007bc:	2200      	movs	r2, #0
 80007be:	2100      	movs	r1, #0
 80007c0:	2012      	movs	r0, #18
 80007c2:	f000 ff9a 	bl	80016fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80007c6:	2012      	movs	r0, #18
 80007c8:	f000 ffb3 	bl	8001732 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80007cc:	bf00      	nop
 80007ce:	3720      	adds	r7, #32
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	40012400 	.word	0x40012400
 80007d8:	40021000 	.word	0x40021000
 80007dc:	40010800 	.word	0x40010800
 80007e0:	200000bc 	.word	0x200000bc
 80007e4:	40020008 	.word	0x40020008

080007e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b084      	sub	sp, #16
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a19      	ldr	r2, [pc, #100]	; (800085c <HAL_TIM_Base_MspInit+0x74>)
 80007f6:	4293      	cmp	r3, r2
 80007f8:	d12b      	bne.n	8000852 <HAL_TIM_Base_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80007fa:	4b19      	ldr	r3, [pc, #100]	; (8000860 <HAL_TIM_Base_MspInit+0x78>)
 80007fc:	699b      	ldr	r3, [r3, #24]
 80007fe:	4a18      	ldr	r2, [pc, #96]	; (8000860 <HAL_TIM_Base_MspInit+0x78>)
 8000800:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000804:	6193      	str	r3, [r2, #24]
 8000806:	4b16      	ldr	r3, [pc, #88]	; (8000860 <HAL_TIM_Base_MspInit+0x78>)
 8000808:	699b      	ldr	r3, [r3, #24]
 800080a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800080e:	60fb      	str	r3, [r7, #12]
 8000810:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8000812:	2200      	movs	r2, #0
 8000814:	2100      	movs	r1, #0
 8000816:	2018      	movs	r0, #24
 8000818:	f000 ff6f 	bl	80016fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 800081c:	2018      	movs	r0, #24
 800081e:	f000 ff88 	bl	8001732 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000822:	2200      	movs	r2, #0
 8000824:	2100      	movs	r1, #0
 8000826:	2019      	movs	r0, #25
 8000828:	f000 ff67 	bl	80016fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800082c:	2019      	movs	r0, #25
 800082e:	f000 ff80 	bl	8001732 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8000832:	2200      	movs	r2, #0
 8000834:	2100      	movs	r1, #0
 8000836:	201a      	movs	r0, #26
 8000838:	f000 ff5f 	bl	80016fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 800083c:	201a      	movs	r0, #26
 800083e:	f000 ff78 	bl	8001732 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000842:	2200      	movs	r2, #0
 8000844:	2100      	movs	r1, #0
 8000846:	201b      	movs	r0, #27
 8000848:	f000 ff57 	bl	80016fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800084c:	201b      	movs	r0, #27
 800084e:	f000 ff70 	bl	8001732 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000852:	bf00      	nop
 8000854:	3710      	adds	r7, #16
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	40012c00 	.word	0x40012c00
 8000860:	40021000 	.word	0x40021000

08000864 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b088      	sub	sp, #32
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086c:	f107 0310 	add.w	r3, r7, #16
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
 8000874:	605a      	str	r2, [r3, #4]
 8000876:	609a      	str	r2, [r3, #8]
 8000878:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	4a33      	ldr	r2, [pc, #204]	; (800094c <HAL_UART_MspInit+0xe8>)
 8000880:	4293      	cmp	r3, r2
 8000882:	d15f      	bne.n	8000944 <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000884:	4b32      	ldr	r3, [pc, #200]	; (8000950 <HAL_UART_MspInit+0xec>)
 8000886:	699b      	ldr	r3, [r3, #24]
 8000888:	4a31      	ldr	r2, [pc, #196]	; (8000950 <HAL_UART_MspInit+0xec>)
 800088a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800088e:	6193      	str	r3, [r2, #24]
 8000890:	4b2f      	ldr	r3, [pc, #188]	; (8000950 <HAL_UART_MspInit+0xec>)
 8000892:	699b      	ldr	r3, [r3, #24]
 8000894:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000898:	60fb      	str	r3, [r7, #12]
 800089a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800089c:	4b2c      	ldr	r3, [pc, #176]	; (8000950 <HAL_UART_MspInit+0xec>)
 800089e:	699b      	ldr	r3, [r3, #24]
 80008a0:	4a2b      	ldr	r2, [pc, #172]	; (8000950 <HAL_UART_MspInit+0xec>)
 80008a2:	f043 0304 	orr.w	r3, r3, #4
 80008a6:	6193      	str	r3, [r2, #24]
 80008a8:	4b29      	ldr	r3, [pc, #164]	; (8000950 <HAL_UART_MspInit+0xec>)
 80008aa:	699b      	ldr	r3, [r3, #24]
 80008ac:	f003 0304 	and.w	r3, r3, #4
 80008b0:	60bb      	str	r3, [r7, #8]
 80008b2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80008b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008b8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ba:	2302      	movs	r3, #2
 80008bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008be:	2303      	movs	r3, #3
 80008c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c2:	f107 0310 	add.w	r3, r7, #16
 80008c6:	4619      	mov	r1, r3
 80008c8:	4822      	ldr	r0, [pc, #136]	; (8000954 <HAL_UART_MspInit+0xf0>)
 80008ca:	f001 f9eb 	bl	8001ca4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80008ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d4:	2300      	movs	r3, #0
 80008d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d8:	2300      	movs	r3, #0
 80008da:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008dc:	f107 0310 	add.w	r3, r7, #16
 80008e0:	4619      	mov	r1, r3
 80008e2:	481c      	ldr	r0, [pc, #112]	; (8000954 <HAL_UART_MspInit+0xf0>)
 80008e4:	f001 f9de 	bl	8001ca4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80008e8:	4b1b      	ldr	r3, [pc, #108]	; (8000958 <HAL_UART_MspInit+0xf4>)
 80008ea:	4a1c      	ldr	r2, [pc, #112]	; (800095c <HAL_UART_MspInit+0xf8>)
 80008ec:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008ee:	4b1a      	ldr	r3, [pc, #104]	; (8000958 <HAL_UART_MspInit+0xf4>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008f4:	4b18      	ldr	r3, [pc, #96]	; (8000958 <HAL_UART_MspInit+0xf4>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80008fa:	4b17      	ldr	r3, [pc, #92]	; (8000958 <HAL_UART_MspInit+0xf4>)
 80008fc:	2280      	movs	r2, #128	; 0x80
 80008fe:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000900:	4b15      	ldr	r3, [pc, #84]	; (8000958 <HAL_UART_MspInit+0xf4>)
 8000902:	2200      	movs	r2, #0
 8000904:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000906:	4b14      	ldr	r3, [pc, #80]	; (8000958 <HAL_UART_MspInit+0xf4>)
 8000908:	2200      	movs	r2, #0
 800090a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800090c:	4b12      	ldr	r3, [pc, #72]	; (8000958 <HAL_UART_MspInit+0xf4>)
 800090e:	2200      	movs	r2, #0
 8000910:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000912:	4b11      	ldr	r3, [pc, #68]	; (8000958 <HAL_UART_MspInit+0xf4>)
 8000914:	2200      	movs	r2, #0
 8000916:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000918:	480f      	ldr	r0, [pc, #60]	; (8000958 <HAL_UART_MspInit+0xf4>)
 800091a:	f000 ff25 	bl	8001768 <HAL_DMA_Init>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8000924:	f7ff feb8 	bl	8000698 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	4a0b      	ldr	r2, [pc, #44]	; (8000958 <HAL_UART_MspInit+0xf4>)
 800092c:	639a      	str	r2, [r3, #56]	; 0x38
 800092e:	4a0a      	ldr	r2, [pc, #40]	; (8000958 <HAL_UART_MspInit+0xf4>)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000934:	2200      	movs	r2, #0
 8000936:	2100      	movs	r1, #0
 8000938:	2025      	movs	r0, #37	; 0x25
 800093a:	f000 fede 	bl	80016fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800093e:	2025      	movs	r0, #37	; 0x25
 8000940:	f000 fef7 	bl	8001732 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000944:	bf00      	nop
 8000946:	3720      	adds	r7, #32
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	40013800 	.word	0x40013800
 8000950:	40021000 	.word	0x40021000
 8000954:	40010800 	.word	0x40010800
 8000958:	2000018c 	.word	0x2000018c
 800095c:	40020058 	.word	0x40020058

08000960 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000964:	e7fe      	b.n	8000964 <NMI_Handler+0x4>

08000966 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000966:	b480      	push	{r7}
 8000968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800096a:	e7fe      	b.n	800096a <HardFault_Handler+0x4>

0800096c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000970:	e7fe      	b.n	8000970 <MemManage_Handler+0x4>

08000972 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000972:	b480      	push	{r7}
 8000974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000976:	e7fe      	b.n	8000976 <BusFault_Handler+0x4>

08000978 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800097c:	e7fe      	b.n	800097c <UsageFault_Handler+0x4>

0800097e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800097e:	b480      	push	{r7}
 8000980:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000982:	bf00      	nop
 8000984:	46bd      	mov	sp, r7
 8000986:	bc80      	pop	{r7}
 8000988:	4770      	bx	lr

0800098a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800098a:	b480      	push	{r7}
 800098c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800098e:	bf00      	nop
 8000990:	46bd      	mov	sp, r7
 8000992:	bc80      	pop	{r7}
 8000994:	4770      	bx	lr

08000996 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000996:	b480      	push	{r7}
 8000998:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800099a:	bf00      	nop
 800099c:	46bd      	mov	sp, r7
 800099e:	bc80      	pop	{r7}
 80009a0:	4770      	bx	lr

080009a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009a2:	b580      	push	{r7, lr}
 80009a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009a6:	f000 f8fb 	bl	8000ba0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009aa:	bf00      	nop
 80009ac:	bd80      	pop	{r7, pc}
	...

080009b0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80009b4:	4802      	ldr	r0, [pc, #8]	; (80009c0 <DMA1_Channel1_IRQHandler+0x10>)
 80009b6:	f001 f841 	bl	8001a3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	200000bc 	.word	0x200000bc

080009c4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80009c8:	4802      	ldr	r0, [pc, #8]	; (80009d4 <DMA1_Channel5_IRQHandler+0x10>)
 80009ca:	f001 f837 	bl	8001a3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	2000018c 	.word	0x2000018c

080009d8 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80009dc:	4802      	ldr	r0, [pc, #8]	; (80009e8 <ADC1_2_IRQHandler+0x10>)
 80009de:	f000 fad5 	bl	8000f8c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80009e2:	bf00      	nop
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	2000008c 	.word	0x2000008c

080009ec <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80009f0:	4802      	ldr	r0, [pc, #8]	; (80009fc <TIM1_BRK_IRQHandler+0x10>)
 80009f2:	f002 f84d 	bl	8002a90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 80009f6:	bf00      	nop
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	20000100 	.word	0x20000100

08000a00 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a04:	4802      	ldr	r0, [pc, #8]	; (8000a10 <TIM1_UP_IRQHandler+0x10>)
 8000a06:	f002 f843 	bl	8002a90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000a0a:	bf00      	nop
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	20000100 	.word	0x20000100

08000a14 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a18:	4802      	ldr	r0, [pc, #8]	; (8000a24 <TIM1_TRG_COM_IRQHandler+0x10>)
 8000a1a:	f002 f839 	bl	8002a90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	20000100 	.word	0x20000100

08000a28 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a2c:	4802      	ldr	r0, [pc, #8]	; (8000a38 <TIM1_CC_IRQHandler+0x10>)
 8000a2e:	f002 f82f 	bl	8002a90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	20000100 	.word	0x20000100

08000a3c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a40:	4802      	ldr	r0, [pc, #8]	; (8000a4c <USART1_IRQHandler+0x10>)
 8000a42:	f002 fc8d 	bl	8003360 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	20000148 	.word	0x20000148

08000a50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b086      	sub	sp, #24
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a58:	4a14      	ldr	r2, [pc, #80]	; (8000aac <_sbrk+0x5c>)
 8000a5a:	4b15      	ldr	r3, [pc, #84]	; (8000ab0 <_sbrk+0x60>)
 8000a5c:	1ad3      	subs	r3, r2, r3
 8000a5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a60:	697b      	ldr	r3, [r7, #20]
 8000a62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a64:	4b13      	ldr	r3, [pc, #76]	; (8000ab4 <_sbrk+0x64>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d102      	bne.n	8000a72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a6c:	4b11      	ldr	r3, [pc, #68]	; (8000ab4 <_sbrk+0x64>)
 8000a6e:	4a12      	ldr	r2, [pc, #72]	; (8000ab8 <_sbrk+0x68>)
 8000a70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a72:	4b10      	ldr	r3, [pc, #64]	; (8000ab4 <_sbrk+0x64>)
 8000a74:	681a      	ldr	r2, [r3, #0]
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	4413      	add	r3, r2
 8000a7a:	693a      	ldr	r2, [r7, #16]
 8000a7c:	429a      	cmp	r2, r3
 8000a7e:	d207      	bcs.n	8000a90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a80:	f003 f990 	bl	8003da4 <__errno>
 8000a84:	4603      	mov	r3, r0
 8000a86:	220c      	movs	r2, #12
 8000a88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a8e:	e009      	b.n	8000aa4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a90:	4b08      	ldr	r3, [pc, #32]	; (8000ab4 <_sbrk+0x64>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a96:	4b07      	ldr	r3, [pc, #28]	; (8000ab4 <_sbrk+0x64>)
 8000a98:	681a      	ldr	r2, [r3, #0]
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	4413      	add	r3, r2
 8000a9e:	4a05      	ldr	r2, [pc, #20]	; (8000ab4 <_sbrk+0x64>)
 8000aa0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000aa2:	68fb      	ldr	r3, [r7, #12]
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	3718      	adds	r7, #24
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	20005000 	.word	0x20005000
 8000ab0:	00000400 	.word	0x00000400
 8000ab4:	20000220 	.word	0x20000220
 8000ab8:	20000238 	.word	0x20000238

08000abc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ac0:	bf00      	nop
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bc80      	pop	{r7}
 8000ac6:	4770      	bx	lr

08000ac8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ac8:	480c      	ldr	r0, [pc, #48]	; (8000afc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000aca:	490d      	ldr	r1, [pc, #52]	; (8000b00 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000acc:	4a0d      	ldr	r2, [pc, #52]	; (8000b04 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ace:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ad0:	e002      	b.n	8000ad8 <LoopCopyDataInit>

08000ad2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ad2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ad4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ad6:	3304      	adds	r3, #4

08000ad8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ad8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ada:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000adc:	d3f9      	bcc.n	8000ad2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ade:	4a0a      	ldr	r2, [pc, #40]	; (8000b08 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ae0:	4c0a      	ldr	r4, [pc, #40]	; (8000b0c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ae2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ae4:	e001      	b.n	8000aea <LoopFillZerobss>

08000ae6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ae6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ae8:	3204      	adds	r2, #4

08000aea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aec:	d3fb      	bcc.n	8000ae6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000aee:	f7ff ffe5 	bl	8000abc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000af2:	f003 f95d 	bl	8003db0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000af6:	f7ff fc0d 	bl	8000314 <main>
  bx lr
 8000afa:	4770      	bx	lr
  ldr r0, =_sdata
 8000afc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b00:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000b04:	08004794 	.word	0x08004794
  ldr r2, =_sbss
 8000b08:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000b0c:	20000238 	.word	0x20000238

08000b10 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b10:	e7fe      	b.n	8000b10 <CAN1_RX1_IRQHandler>
	...

08000b14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b18:	4b08      	ldr	r3, [pc, #32]	; (8000b3c <HAL_Init+0x28>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a07      	ldr	r2, [pc, #28]	; (8000b3c <HAL_Init+0x28>)
 8000b1e:	f043 0310 	orr.w	r3, r3, #16
 8000b22:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b24:	2003      	movs	r0, #3
 8000b26:	f000 fddd 	bl	80016e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b2a:	200f      	movs	r0, #15
 8000b2c:	f000 f808 	bl	8000b40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b30:	f7ff fdb8 	bl	80006a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b34:	2300      	movs	r3, #0
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	40022000 	.word	0x40022000

08000b40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b48:	4b12      	ldr	r3, [pc, #72]	; (8000b94 <HAL_InitTick+0x54>)
 8000b4a:	681a      	ldr	r2, [r3, #0]
 8000b4c:	4b12      	ldr	r3, [pc, #72]	; (8000b98 <HAL_InitTick+0x58>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	4619      	mov	r1, r3
 8000b52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b56:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f000 fdf5 	bl	800174e <HAL_SYSTICK_Config>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	e00e      	b.n	8000b8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	2b0f      	cmp	r3, #15
 8000b72:	d80a      	bhi.n	8000b8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b74:	2200      	movs	r2, #0
 8000b76:	6879      	ldr	r1, [r7, #4]
 8000b78:	f04f 30ff 	mov.w	r0, #4294967295
 8000b7c:	f000 fdbd 	bl	80016fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b80:	4a06      	ldr	r2, [pc, #24]	; (8000b9c <HAL_InitTick+0x5c>)
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b86:	2300      	movs	r3, #0
 8000b88:	e000      	b.n	8000b8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b8a:	2301      	movs	r3, #1
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	3708      	adds	r7, #8
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	20000000 	.word	0x20000000
 8000b98:	20000008 	.word	0x20000008
 8000b9c:	20000004 	.word	0x20000004

08000ba0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ba4:	4b05      	ldr	r3, [pc, #20]	; (8000bbc <HAL_IncTick+0x1c>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	461a      	mov	r2, r3
 8000baa:	4b05      	ldr	r3, [pc, #20]	; (8000bc0 <HAL_IncTick+0x20>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4413      	add	r3, r2
 8000bb0:	4a03      	ldr	r2, [pc, #12]	; (8000bc0 <HAL_IncTick+0x20>)
 8000bb2:	6013      	str	r3, [r2, #0]
}
 8000bb4:	bf00      	nop
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bc80      	pop	{r7}
 8000bba:	4770      	bx	lr
 8000bbc:	20000008 	.word	0x20000008
 8000bc0:	20000224 	.word	0x20000224

08000bc4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  return uwTick;
 8000bc8:	4b02      	ldr	r3, [pc, #8]	; (8000bd4 <HAL_GetTick+0x10>)
 8000bca:	681b      	ldr	r3, [r3, #0]
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bc80      	pop	{r7}
 8000bd2:	4770      	bx	lr
 8000bd4:	20000224 	.word	0x20000224

08000bd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000be0:	f7ff fff0 	bl	8000bc4 <HAL_GetTick>
 8000be4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bf0:	d005      	beq.n	8000bfe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bf2:	4b0a      	ldr	r3, [pc, #40]	; (8000c1c <HAL_Delay+0x44>)
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	461a      	mov	r2, r3
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	4413      	add	r3, r2
 8000bfc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bfe:	bf00      	nop
 8000c00:	f7ff ffe0 	bl	8000bc4 <HAL_GetTick>
 8000c04:	4602      	mov	r2, r0
 8000c06:	68bb      	ldr	r3, [r7, #8]
 8000c08:	1ad3      	subs	r3, r2, r3
 8000c0a:	68fa      	ldr	r2, [r7, #12]
 8000c0c:	429a      	cmp	r2, r3
 8000c0e:	d8f7      	bhi.n	8000c00 <HAL_Delay+0x28>
  {
  }
}
 8000c10:	bf00      	nop
 8000c12:	bf00      	nop
 8000c14:	3710      	adds	r7, #16
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	20000008 	.word	0x20000008

08000c20 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b086      	sub	sp, #24
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000c30:	2300      	movs	r3, #0
 8000c32:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000c34:	2300      	movs	r3, #0
 8000c36:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d101      	bne.n	8000c42 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	e0be      	b.n	8000dc0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	689b      	ldr	r3, [r3, #8]
 8000c46:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d109      	bne.n	8000c64 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	2200      	movs	r2, #0
 8000c54:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	2200      	movs	r2, #0
 8000c5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c5e:	6878      	ldr	r0, [r7, #4]
 8000c60:	f7ff fd52 	bl	8000708 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000c64:	6878      	ldr	r0, [r7, #4]
 8000c66:	f000 fbc1 	bl	80013ec <ADC_ConversionStop_Disable>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c72:	f003 0310 	and.w	r3, r3, #16
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	f040 8099 	bne.w	8000dae <HAL_ADC_Init+0x18e>
 8000c7c:	7dfb      	ldrb	r3, [r7, #23]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	f040 8095 	bne.w	8000dae <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c88:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000c8c:	f023 0302 	bic.w	r3, r3, #2
 8000c90:	f043 0202 	orr.w	r2, r3, #2
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000ca0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	7b1b      	ldrb	r3, [r3, #12]
 8000ca6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000ca8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000caa:	68ba      	ldr	r2, [r7, #8]
 8000cac:	4313      	orrs	r3, r2
 8000cae:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	689b      	ldr	r3, [r3, #8]
 8000cb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000cb8:	d003      	beq.n	8000cc2 <HAL_ADC_Init+0xa2>
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	689b      	ldr	r3, [r3, #8]
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	d102      	bne.n	8000cc8 <HAL_ADC_Init+0xa8>
 8000cc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cc6:	e000      	b.n	8000cca <HAL_ADC_Init+0xaa>
 8000cc8:	2300      	movs	r3, #0
 8000cca:	693a      	ldr	r2, [r7, #16]
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	7d1b      	ldrb	r3, [r3, #20]
 8000cd4:	2b01      	cmp	r3, #1
 8000cd6:	d119      	bne.n	8000d0c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	7b1b      	ldrb	r3, [r3, #12]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d109      	bne.n	8000cf4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	699b      	ldr	r3, [r3, #24]
 8000ce4:	3b01      	subs	r3, #1
 8000ce6:	035a      	lsls	r2, r3, #13
 8000ce8:	693b      	ldr	r3, [r7, #16]
 8000cea:	4313      	orrs	r3, r2
 8000cec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000cf0:	613b      	str	r3, [r7, #16]
 8000cf2:	e00b      	b.n	8000d0c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cf8:	f043 0220 	orr.w	r2, r3, #32
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d04:	f043 0201 	orr.w	r2, r3, #1
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	693a      	ldr	r2, [r7, #16]
 8000d1c:	430a      	orrs	r2, r1
 8000d1e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	689a      	ldr	r2, [r3, #8]
 8000d26:	4b28      	ldr	r3, [pc, #160]	; (8000dc8 <HAL_ADC_Init+0x1a8>)
 8000d28:	4013      	ands	r3, r2
 8000d2a:	687a      	ldr	r2, [r7, #4]
 8000d2c:	6812      	ldr	r2, [r2, #0]
 8000d2e:	68b9      	ldr	r1, [r7, #8]
 8000d30:	430b      	orrs	r3, r1
 8000d32:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	689b      	ldr	r3, [r3, #8]
 8000d38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d3c:	d003      	beq.n	8000d46 <HAL_ADC_Init+0x126>
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	689b      	ldr	r3, [r3, #8]
 8000d42:	2b01      	cmp	r3, #1
 8000d44:	d104      	bne.n	8000d50 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	691b      	ldr	r3, [r3, #16]
 8000d4a:	3b01      	subs	r3, #1
 8000d4c:	051b      	lsls	r3, r3, #20
 8000d4e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d56:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	68fa      	ldr	r2, [r7, #12]
 8000d60:	430a      	orrs	r2, r1
 8000d62:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	689a      	ldr	r2, [r3, #8]
 8000d6a:	4b18      	ldr	r3, [pc, #96]	; (8000dcc <HAL_ADC_Init+0x1ac>)
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	68ba      	ldr	r2, [r7, #8]
 8000d70:	429a      	cmp	r2, r3
 8000d72:	d10b      	bne.n	8000d8c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	2200      	movs	r2, #0
 8000d78:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d7e:	f023 0303 	bic.w	r3, r3, #3
 8000d82:	f043 0201 	orr.w	r2, r3, #1
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d8a:	e018      	b.n	8000dbe <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d90:	f023 0312 	bic.w	r3, r3, #18
 8000d94:	f043 0210 	orr.w	r2, r3, #16
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000da0:	f043 0201 	orr.w	r2, r3, #1
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000da8:	2301      	movs	r3, #1
 8000daa:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000dac:	e007      	b.n	8000dbe <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000db2:	f043 0210 	orr.w	r2, r3, #16
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000dbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	3718      	adds	r7, #24
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	ffe1f7fd 	.word	0xffe1f7fd
 8000dcc:	ff1f0efe 	.word	0xff1f0efe

08000dd0 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b086      	sub	sp, #24
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	60f8      	str	r0, [r7, #12]
 8000dd8:	60b9      	str	r1, [r7, #8]
 8000dda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a64      	ldr	r2, [pc, #400]	; (8000f78 <HAL_ADC_Start_DMA+0x1a8>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d004      	beq.n	8000df4 <HAL_ADC_Start_DMA+0x24>
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4a63      	ldr	r2, [pc, #396]	; (8000f7c <HAL_ADC_Start_DMA+0x1ac>)
 8000df0:	4293      	cmp	r3, r2
 8000df2:	d106      	bne.n	8000e02 <HAL_ADC_Start_DMA+0x32>
 8000df4:	4b60      	ldr	r3, [pc, #384]	; (8000f78 <HAL_ADC_Start_DMA+0x1a8>)
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	f040 80b3 	bne.w	8000f68 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000e08:	2b01      	cmp	r3, #1
 8000e0a:	d101      	bne.n	8000e10 <HAL_ADC_Start_DMA+0x40>
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	e0ae      	b.n	8000f6e <HAL_ADC_Start_DMA+0x19e>
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	2201      	movs	r2, #1
 8000e14:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000e18:	68f8      	ldr	r0, [r7, #12]
 8000e1a:	f000 fa8d 	bl	8001338 <ADC_Enable>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000e22:	7dfb      	ldrb	r3, [r7, #23]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	f040 809a 	bne.w	8000f5e <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e2e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000e32:	f023 0301 	bic.w	r3, r3, #1
 8000e36:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4a4e      	ldr	r2, [pc, #312]	; (8000f7c <HAL_ADC_Start_DMA+0x1ac>)
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d105      	bne.n	8000e54 <HAL_ADC_Start_DMA+0x84>
 8000e48:	4b4b      	ldr	r3, [pc, #300]	; (8000f78 <HAL_ADC_Start_DMA+0x1a8>)
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d115      	bne.n	8000e80 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e58:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d026      	beq.n	8000ebc <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e72:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000e76:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000e7e:	e01d      	b.n	8000ebc <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e84:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a39      	ldr	r2, [pc, #228]	; (8000f78 <HAL_ADC_Start_DMA+0x1a8>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d004      	beq.n	8000ea0 <HAL_ADC_Start_DMA+0xd0>
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4a38      	ldr	r2, [pc, #224]	; (8000f7c <HAL_ADC_Start_DMA+0x1ac>)
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d10d      	bne.n	8000ebc <HAL_ADC_Start_DMA+0xec>
 8000ea0:	4b35      	ldr	r3, [pc, #212]	; (8000f78 <HAL_ADC_Start_DMA+0x1a8>)
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d007      	beq.n	8000ebc <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eb0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000eb4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ec0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d006      	beq.n	8000ed6 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ecc:	f023 0206 	bic.w	r2, r3, #6
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ed4:	e002      	b.n	8000edc <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	2200      	movs	r2, #0
 8000eda:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	2200      	movs	r2, #0
 8000ee0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	6a1b      	ldr	r3, [r3, #32]
 8000ee8:	4a25      	ldr	r2, [pc, #148]	; (8000f80 <HAL_ADC_Start_DMA+0x1b0>)
 8000eea:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	6a1b      	ldr	r3, [r3, #32]
 8000ef0:	4a24      	ldr	r2, [pc, #144]	; (8000f84 <HAL_ADC_Start_DMA+0x1b4>)
 8000ef2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	6a1b      	ldr	r3, [r3, #32]
 8000ef8:	4a23      	ldr	r2, [pc, #140]	; (8000f88 <HAL_ADC_Start_DMA+0x1b8>)
 8000efa:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f06f 0202 	mvn.w	r2, #2
 8000f04:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	689a      	ldr	r2, [r3, #8]
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000f14:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	6a18      	ldr	r0, [r3, #32]
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	334c      	adds	r3, #76	; 0x4c
 8000f20:	4619      	mov	r1, r3
 8000f22:	68ba      	ldr	r2, [r7, #8]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	f000 fc79 	bl	800181c <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	689b      	ldr	r3, [r3, #8]
 8000f30:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000f34:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000f38:	d108      	bne.n	8000f4c <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	689a      	ldr	r2, [r3, #8]
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000f48:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000f4a:	e00f      	b.n	8000f6c <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	689a      	ldr	r2, [r3, #8]
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000f5a:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000f5c:	e006      	b.n	8000f6c <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	2200      	movs	r2, #0
 8000f62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8000f66:	e001      	b.n	8000f6c <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000f6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3718      	adds	r7, #24
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	40012400 	.word	0x40012400
 8000f7c:	40012800 	.word	0x40012800
 8000f80:	0800146f 	.word	0x0800146f
 8000f84:	080014eb 	.word	0x080014eb
 8000f88:	08001507 	.word	0x08001507

08000f8c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	f003 0320 	and.w	r3, r3, #32
 8000f9e:	2b20      	cmp	r3, #32
 8000fa0:	d140      	bne.n	8001024 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f003 0302 	and.w	r3, r3, #2
 8000fac:	2b02      	cmp	r3, #2
 8000fae:	d139      	bne.n	8001024 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fb4:	f003 0310 	and.w	r3, r3, #16
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d105      	bne.n	8000fc8 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fc0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000fd2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000fd6:	d11d      	bne.n	8001014 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d119      	bne.n	8001014 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	685a      	ldr	r2, [r3, #4]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f022 0220 	bic.w	r2, r2, #32
 8000fee:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ff4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001000:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001004:	2b00      	cmp	r3, #0
 8001006:	d105      	bne.n	8001014 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800100c:	f043 0201 	orr.w	r2, r3, #1
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001014:	6878      	ldr	r0, [r7, #4]
 8001016:	f7ff f91d 	bl	8000254 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f06f 0212 	mvn.w	r2, #18
 8001022:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800102e:	2b80      	cmp	r3, #128	; 0x80
 8001030:	d14f      	bne.n	80010d2 <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f003 0304 	and.w	r3, r3, #4
 800103c:	2b04      	cmp	r3, #4
 800103e:	d148      	bne.n	80010d2 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001044:	f003 0310 	and.w	r3, r3, #16
 8001048:	2b00      	cmp	r3, #0
 800104a:	d105      	bne.n	8001058 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001050:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	689b      	ldr	r3, [r3, #8]
 800105e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8001062:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8001066:	d012      	beq.n	800108e <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001072:	2b00      	cmp	r3, #0
 8001074:	d125      	bne.n	80010c2 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	689b      	ldr	r3, [r3, #8]
 800107c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001080:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001084:	d11d      	bne.n	80010c2 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800108a:	2b00      	cmp	r3, #0
 800108c:	d119      	bne.n	80010c2 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	685a      	ldr	r2, [r3, #4]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800109c:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d105      	bne.n	80010c2 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ba:	f043 0201 	orr.w	r2, r3, #1
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f000 fa39 	bl	800153a <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f06f 020c 	mvn.w	r2, #12
 80010d0:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010dc:	2b40      	cmp	r3, #64	; 0x40
 80010de:	d114      	bne.n	800110a <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f003 0301 	and.w	r3, r3, #1
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d10d      	bne.n	800110a <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010f2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80010fa:	6878      	ldr	r0, [r7, #4]
 80010fc:	f000 f812 	bl	8001124 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f06f 0201 	mvn.w	r2, #1
 8001108:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 800110a:	bf00      	nop
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001112:	b480      	push	{r7}
 8001114:	b083      	sub	sp, #12
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800111a:	bf00      	nop
 800111c:	370c      	adds	r7, #12
 800111e:	46bd      	mov	sp, r7
 8001120:	bc80      	pop	{r7}
 8001122:	4770      	bx	lr

08001124 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800112c:	bf00      	nop
 800112e:	370c      	adds	r7, #12
 8001130:	46bd      	mov	sp, r7
 8001132:	bc80      	pop	{r7}
 8001134:	4770      	bx	lr

08001136 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001136:	b480      	push	{r7}
 8001138:	b083      	sub	sp, #12
 800113a:	af00      	add	r7, sp, #0
 800113c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800113e:	bf00      	nop
 8001140:	370c      	adds	r7, #12
 8001142:	46bd      	mov	sp, r7
 8001144:	bc80      	pop	{r7}
 8001146:	4770      	bx	lr

08001148 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001148:	b480      	push	{r7}
 800114a:	b085      	sub	sp, #20
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001152:	2300      	movs	r3, #0
 8001154:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001156:	2300      	movs	r3, #0
 8001158:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001160:	2b01      	cmp	r3, #1
 8001162:	d101      	bne.n	8001168 <HAL_ADC_ConfigChannel+0x20>
 8001164:	2302      	movs	r3, #2
 8001166:	e0dc      	b.n	8001322 <HAL_ADC_ConfigChannel+0x1da>
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2201      	movs	r2, #1
 800116c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	2b06      	cmp	r3, #6
 8001176:	d81c      	bhi.n	80011b2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	685a      	ldr	r2, [r3, #4]
 8001182:	4613      	mov	r3, r2
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	4413      	add	r3, r2
 8001188:	3b05      	subs	r3, #5
 800118a:	221f      	movs	r2, #31
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	43db      	mvns	r3, r3
 8001192:	4019      	ands	r1, r3
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	6818      	ldr	r0, [r3, #0]
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685a      	ldr	r2, [r3, #4]
 800119c:	4613      	mov	r3, r2
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	4413      	add	r3, r2
 80011a2:	3b05      	subs	r3, #5
 80011a4:	fa00 f203 	lsl.w	r2, r0, r3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	430a      	orrs	r2, r1
 80011ae:	635a      	str	r2, [r3, #52]	; 0x34
 80011b0:	e03c      	b.n	800122c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	2b0c      	cmp	r3, #12
 80011b8:	d81c      	bhi.n	80011f4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685a      	ldr	r2, [r3, #4]
 80011c4:	4613      	mov	r3, r2
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	4413      	add	r3, r2
 80011ca:	3b23      	subs	r3, #35	; 0x23
 80011cc:	221f      	movs	r2, #31
 80011ce:	fa02 f303 	lsl.w	r3, r2, r3
 80011d2:	43db      	mvns	r3, r3
 80011d4:	4019      	ands	r1, r3
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	6818      	ldr	r0, [r3, #0]
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685a      	ldr	r2, [r3, #4]
 80011de:	4613      	mov	r3, r2
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	4413      	add	r3, r2
 80011e4:	3b23      	subs	r3, #35	; 0x23
 80011e6:	fa00 f203 	lsl.w	r2, r0, r3
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	430a      	orrs	r2, r1
 80011f0:	631a      	str	r2, [r3, #48]	; 0x30
 80011f2:	e01b      	b.n	800122c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	685a      	ldr	r2, [r3, #4]
 80011fe:	4613      	mov	r3, r2
 8001200:	009b      	lsls	r3, r3, #2
 8001202:	4413      	add	r3, r2
 8001204:	3b41      	subs	r3, #65	; 0x41
 8001206:	221f      	movs	r2, #31
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	43db      	mvns	r3, r3
 800120e:	4019      	ands	r1, r3
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	6818      	ldr	r0, [r3, #0]
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685a      	ldr	r2, [r3, #4]
 8001218:	4613      	mov	r3, r2
 800121a:	009b      	lsls	r3, r3, #2
 800121c:	4413      	add	r3, r2
 800121e:	3b41      	subs	r3, #65	; 0x41
 8001220:	fa00 f203 	lsl.w	r2, r0, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	430a      	orrs	r2, r1
 800122a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	2b09      	cmp	r3, #9
 8001232:	d91c      	bls.n	800126e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	68d9      	ldr	r1, [r3, #12]
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	4613      	mov	r3, r2
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	4413      	add	r3, r2
 8001244:	3b1e      	subs	r3, #30
 8001246:	2207      	movs	r2, #7
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	43db      	mvns	r3, r3
 800124e:	4019      	ands	r1, r3
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	6898      	ldr	r0, [r3, #8]
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	4613      	mov	r3, r2
 800125a:	005b      	lsls	r3, r3, #1
 800125c:	4413      	add	r3, r2
 800125e:	3b1e      	subs	r3, #30
 8001260:	fa00 f203 	lsl.w	r2, r0, r3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	430a      	orrs	r2, r1
 800126a:	60da      	str	r2, [r3, #12]
 800126c:	e019      	b.n	80012a2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	6919      	ldr	r1, [r3, #16]
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	4613      	mov	r3, r2
 800127a:	005b      	lsls	r3, r3, #1
 800127c:	4413      	add	r3, r2
 800127e:	2207      	movs	r2, #7
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	43db      	mvns	r3, r3
 8001286:	4019      	ands	r1, r3
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	6898      	ldr	r0, [r3, #8]
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	4613      	mov	r3, r2
 8001292:	005b      	lsls	r3, r3, #1
 8001294:	4413      	add	r3, r2
 8001296:	fa00 f203 	lsl.w	r2, r0, r3
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	430a      	orrs	r2, r1
 80012a0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	2b10      	cmp	r3, #16
 80012a8:	d003      	beq.n	80012b2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80012ae:	2b11      	cmp	r3, #17
 80012b0:	d132      	bne.n	8001318 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a1d      	ldr	r2, [pc, #116]	; (800132c <HAL_ADC_ConfigChannel+0x1e4>)
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d125      	bne.n	8001308 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d126      	bne.n	8001318 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	689a      	ldr	r2, [r3, #8]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80012d8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	2b10      	cmp	r3, #16
 80012e0:	d11a      	bne.n	8001318 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80012e2:	4b13      	ldr	r3, [pc, #76]	; (8001330 <HAL_ADC_ConfigChannel+0x1e8>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a13      	ldr	r2, [pc, #76]	; (8001334 <HAL_ADC_ConfigChannel+0x1ec>)
 80012e8:	fba2 2303 	umull	r2, r3, r2, r3
 80012ec:	0c9a      	lsrs	r2, r3, #18
 80012ee:	4613      	mov	r3, r2
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	4413      	add	r3, r2
 80012f4:	005b      	lsls	r3, r3, #1
 80012f6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80012f8:	e002      	b.n	8001300 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80012fa:	68bb      	ldr	r3, [r7, #8]
 80012fc:	3b01      	subs	r3, #1
 80012fe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d1f9      	bne.n	80012fa <HAL_ADC_ConfigChannel+0x1b2>
 8001306:	e007      	b.n	8001318 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800130c:	f043 0220 	orr.w	r2, r3, #32
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001314:	2301      	movs	r3, #1
 8001316:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2200      	movs	r2, #0
 800131c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001320:	7bfb      	ldrb	r3, [r7, #15]
}
 8001322:	4618      	mov	r0, r3
 8001324:	3714      	adds	r7, #20
 8001326:	46bd      	mov	sp, r7
 8001328:	bc80      	pop	{r7}
 800132a:	4770      	bx	lr
 800132c:	40012400 	.word	0x40012400
 8001330:	20000000 	.word	0x20000000
 8001334:	431bde83 	.word	0x431bde83

08001338 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001340:	2300      	movs	r3, #0
 8001342:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001344:	2300      	movs	r3, #0
 8001346:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	f003 0301 	and.w	r3, r3, #1
 8001352:	2b01      	cmp	r3, #1
 8001354:	d040      	beq.n	80013d8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	689a      	ldr	r2, [r3, #8]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f042 0201 	orr.w	r2, r2, #1
 8001364:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001366:	4b1f      	ldr	r3, [pc, #124]	; (80013e4 <ADC_Enable+0xac>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a1f      	ldr	r2, [pc, #124]	; (80013e8 <ADC_Enable+0xb0>)
 800136c:	fba2 2303 	umull	r2, r3, r2, r3
 8001370:	0c9b      	lsrs	r3, r3, #18
 8001372:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001374:	e002      	b.n	800137c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001376:	68bb      	ldr	r3, [r7, #8]
 8001378:	3b01      	subs	r3, #1
 800137a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d1f9      	bne.n	8001376 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001382:	f7ff fc1f 	bl	8000bc4 <HAL_GetTick>
 8001386:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001388:	e01f      	b.n	80013ca <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800138a:	f7ff fc1b 	bl	8000bc4 <HAL_GetTick>
 800138e:	4602      	mov	r2, r0
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	1ad3      	subs	r3, r2, r3
 8001394:	2b02      	cmp	r3, #2
 8001396:	d918      	bls.n	80013ca <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	689b      	ldr	r3, [r3, #8]
 800139e:	f003 0301 	and.w	r3, r3, #1
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d011      	beq.n	80013ca <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013aa:	f043 0210 	orr.w	r2, r3, #16
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013b6:	f043 0201 	orr.w	r2, r3, #1
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2200      	movs	r2, #0
 80013c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	e007      	b.n	80013da <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	f003 0301 	and.w	r3, r3, #1
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d1d8      	bne.n	800138a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80013d8:	2300      	movs	r3, #0
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3710      	adds	r7, #16
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	20000000 	.word	0x20000000
 80013e8:	431bde83 	.word	0x431bde83

080013ec <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80013f4:	2300      	movs	r3, #0
 80013f6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	f003 0301 	and.w	r3, r3, #1
 8001402:	2b01      	cmp	r3, #1
 8001404:	d12e      	bne.n	8001464 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	689a      	ldr	r2, [r3, #8]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f022 0201 	bic.w	r2, r2, #1
 8001414:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001416:	f7ff fbd5 	bl	8000bc4 <HAL_GetTick>
 800141a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800141c:	e01b      	b.n	8001456 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800141e:	f7ff fbd1 	bl	8000bc4 <HAL_GetTick>
 8001422:	4602      	mov	r2, r0
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	1ad3      	subs	r3, r2, r3
 8001428:	2b02      	cmp	r3, #2
 800142a:	d914      	bls.n	8001456 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	f003 0301 	and.w	r3, r3, #1
 8001436:	2b01      	cmp	r3, #1
 8001438:	d10d      	bne.n	8001456 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800143e:	f043 0210 	orr.w	r2, r3, #16
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800144a:	f043 0201 	orr.w	r2, r3, #1
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	e007      	b.n	8001466 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	f003 0301 	and.w	r3, r3, #1
 8001460:	2b01      	cmp	r3, #1
 8001462:	d0dc      	beq.n	800141e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001464:	2300      	movs	r3, #0
}
 8001466:	4618      	mov	r0, r3
 8001468:	3710      	adds	r7, #16
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}

0800146e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800146e:	b580      	push	{r7, lr}
 8001470:	b084      	sub	sp, #16
 8001472:	af00      	add	r7, sp, #0
 8001474:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800147a:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001480:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001484:	2b00      	cmp	r3, #0
 8001486:	d127      	bne.n	80014d8 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800148c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800149e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80014a2:	d115      	bne.n	80014d0 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d111      	bne.n	80014d0 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014b0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d105      	bne.n	80014d0 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014c8:	f043 0201 	orr.w	r2, r3, #1
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80014d0:	68f8      	ldr	r0, [r7, #12]
 80014d2:	f7fe febf 	bl	8000254 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80014d6:	e004      	b.n	80014e2 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	6a1b      	ldr	r3, [r3, #32]
 80014dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	4798      	blx	r3
}
 80014e2:	bf00      	nop
 80014e4:	3710      	adds	r7, #16
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}

080014ea <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80014ea:	b580      	push	{r7, lr}
 80014ec:	b084      	sub	sp, #16
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f6:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80014f8:	68f8      	ldr	r0, [r7, #12]
 80014fa:	f7ff fe0a 	bl	8001112 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80014fe:	bf00      	nop
 8001500:	3710      	adds	r7, #16
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}

08001506 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001506:	b580      	push	{r7, lr}
 8001508:	b084      	sub	sp, #16
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001512:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001518:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001524:	f043 0204 	orr.w	r2, r3, #4
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800152c:	68f8      	ldr	r0, [r7, #12]
 800152e:	f7ff fe02 	bl	8001136 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001532:	bf00      	nop
 8001534:	3710      	adds	r7, #16
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}

0800153a <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800153a:	b480      	push	{r7}
 800153c:	b083      	sub	sp, #12
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001542:	bf00      	nop
 8001544:	370c      	adds	r7, #12
 8001546:	46bd      	mov	sp, r7
 8001548:	bc80      	pop	{r7}
 800154a:	4770      	bx	lr

0800154c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800154c:	b480      	push	{r7}
 800154e:	b085      	sub	sp, #20
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	f003 0307 	and.w	r3, r3, #7
 800155a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800155c:	4b0c      	ldr	r3, [pc, #48]	; (8001590 <__NVIC_SetPriorityGrouping+0x44>)
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001562:	68ba      	ldr	r2, [r7, #8]
 8001564:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001568:	4013      	ands	r3, r2
 800156a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001574:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001578:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800157c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800157e:	4a04      	ldr	r2, [pc, #16]	; (8001590 <__NVIC_SetPriorityGrouping+0x44>)
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	60d3      	str	r3, [r2, #12]
}
 8001584:	bf00      	nop
 8001586:	3714      	adds	r7, #20
 8001588:	46bd      	mov	sp, r7
 800158a:	bc80      	pop	{r7}
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	e000ed00 	.word	0xe000ed00

08001594 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001598:	4b04      	ldr	r3, [pc, #16]	; (80015ac <__NVIC_GetPriorityGrouping+0x18>)
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	0a1b      	lsrs	r3, r3, #8
 800159e:	f003 0307 	and.w	r3, r3, #7
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bc80      	pop	{r7}
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	e000ed00 	.word	0xe000ed00

080015b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	4603      	mov	r3, r0
 80015b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	db0b      	blt.n	80015da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015c2:	79fb      	ldrb	r3, [r7, #7]
 80015c4:	f003 021f 	and.w	r2, r3, #31
 80015c8:	4906      	ldr	r1, [pc, #24]	; (80015e4 <__NVIC_EnableIRQ+0x34>)
 80015ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ce:	095b      	lsrs	r3, r3, #5
 80015d0:	2001      	movs	r0, #1
 80015d2:	fa00 f202 	lsl.w	r2, r0, r2
 80015d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015da:	bf00      	nop
 80015dc:	370c      	adds	r7, #12
 80015de:	46bd      	mov	sp, r7
 80015e0:	bc80      	pop	{r7}
 80015e2:	4770      	bx	lr
 80015e4:	e000e100 	.word	0xe000e100

080015e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4603      	mov	r3, r0
 80015f0:	6039      	str	r1, [r7, #0]
 80015f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	db0a      	blt.n	8001612 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	b2da      	uxtb	r2, r3
 8001600:	490c      	ldr	r1, [pc, #48]	; (8001634 <__NVIC_SetPriority+0x4c>)
 8001602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001606:	0112      	lsls	r2, r2, #4
 8001608:	b2d2      	uxtb	r2, r2
 800160a:	440b      	add	r3, r1
 800160c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001610:	e00a      	b.n	8001628 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	b2da      	uxtb	r2, r3
 8001616:	4908      	ldr	r1, [pc, #32]	; (8001638 <__NVIC_SetPriority+0x50>)
 8001618:	79fb      	ldrb	r3, [r7, #7]
 800161a:	f003 030f 	and.w	r3, r3, #15
 800161e:	3b04      	subs	r3, #4
 8001620:	0112      	lsls	r2, r2, #4
 8001622:	b2d2      	uxtb	r2, r2
 8001624:	440b      	add	r3, r1
 8001626:	761a      	strb	r2, [r3, #24]
}
 8001628:	bf00      	nop
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	bc80      	pop	{r7}
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	e000e100 	.word	0xe000e100
 8001638:	e000ed00 	.word	0xe000ed00

0800163c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800163c:	b480      	push	{r7}
 800163e:	b089      	sub	sp, #36	; 0x24
 8001640:	af00      	add	r7, sp, #0
 8001642:	60f8      	str	r0, [r7, #12]
 8001644:	60b9      	str	r1, [r7, #8]
 8001646:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	f003 0307 	and.w	r3, r3, #7
 800164e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	f1c3 0307 	rsb	r3, r3, #7
 8001656:	2b04      	cmp	r3, #4
 8001658:	bf28      	it	cs
 800165a:	2304      	movcs	r3, #4
 800165c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	3304      	adds	r3, #4
 8001662:	2b06      	cmp	r3, #6
 8001664:	d902      	bls.n	800166c <NVIC_EncodePriority+0x30>
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	3b03      	subs	r3, #3
 800166a:	e000      	b.n	800166e <NVIC_EncodePriority+0x32>
 800166c:	2300      	movs	r3, #0
 800166e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001670:	f04f 32ff 	mov.w	r2, #4294967295
 8001674:	69bb      	ldr	r3, [r7, #24]
 8001676:	fa02 f303 	lsl.w	r3, r2, r3
 800167a:	43da      	mvns	r2, r3
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	401a      	ands	r2, r3
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001684:	f04f 31ff 	mov.w	r1, #4294967295
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	fa01 f303 	lsl.w	r3, r1, r3
 800168e:	43d9      	mvns	r1, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001694:	4313      	orrs	r3, r2
         );
}
 8001696:	4618      	mov	r0, r3
 8001698:	3724      	adds	r7, #36	; 0x24
 800169a:	46bd      	mov	sp, r7
 800169c:	bc80      	pop	{r7}
 800169e:	4770      	bx	lr

080016a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	3b01      	subs	r3, #1
 80016ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016b0:	d301      	bcc.n	80016b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016b2:	2301      	movs	r3, #1
 80016b4:	e00f      	b.n	80016d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016b6:	4a0a      	ldr	r2, [pc, #40]	; (80016e0 <SysTick_Config+0x40>)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	3b01      	subs	r3, #1
 80016bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016be:	210f      	movs	r1, #15
 80016c0:	f04f 30ff 	mov.w	r0, #4294967295
 80016c4:	f7ff ff90 	bl	80015e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016c8:	4b05      	ldr	r3, [pc, #20]	; (80016e0 <SysTick_Config+0x40>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016ce:	4b04      	ldr	r3, [pc, #16]	; (80016e0 <SysTick_Config+0x40>)
 80016d0:	2207      	movs	r2, #7
 80016d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	e000e010 	.word	0xe000e010

080016e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f7ff ff2d 	bl	800154c <__NVIC_SetPriorityGrouping>
}
 80016f2:	bf00      	nop
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}

080016fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b086      	sub	sp, #24
 80016fe:	af00      	add	r7, sp, #0
 8001700:	4603      	mov	r3, r0
 8001702:	60b9      	str	r1, [r7, #8]
 8001704:	607a      	str	r2, [r7, #4]
 8001706:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001708:	2300      	movs	r3, #0
 800170a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800170c:	f7ff ff42 	bl	8001594 <__NVIC_GetPriorityGrouping>
 8001710:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001712:	687a      	ldr	r2, [r7, #4]
 8001714:	68b9      	ldr	r1, [r7, #8]
 8001716:	6978      	ldr	r0, [r7, #20]
 8001718:	f7ff ff90 	bl	800163c <NVIC_EncodePriority>
 800171c:	4602      	mov	r2, r0
 800171e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001722:	4611      	mov	r1, r2
 8001724:	4618      	mov	r0, r3
 8001726:	f7ff ff5f 	bl	80015e8 <__NVIC_SetPriority>
}
 800172a:	bf00      	nop
 800172c:	3718      	adds	r7, #24
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}

08001732 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001732:	b580      	push	{r7, lr}
 8001734:	b082      	sub	sp, #8
 8001736:	af00      	add	r7, sp, #0
 8001738:	4603      	mov	r3, r0
 800173a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800173c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001740:	4618      	mov	r0, r3
 8001742:	f7ff ff35 	bl	80015b0 <__NVIC_EnableIRQ>
}
 8001746:	bf00      	nop
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}

0800174e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800174e:	b580      	push	{r7, lr}
 8001750:	b082      	sub	sp, #8
 8001752:	af00      	add	r7, sp, #0
 8001754:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f7ff ffa2 	bl	80016a0 <SysTick_Config>
 800175c:	4603      	mov	r3, r0
}
 800175e:	4618      	mov	r0, r3
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
	...

08001768 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001768:	b480      	push	{r7}
 800176a:	b085      	sub	sp, #20
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001770:	2300      	movs	r3, #0
 8001772:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d101      	bne.n	800177e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e043      	b.n	8001806 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	461a      	mov	r2, r3
 8001784:	4b22      	ldr	r3, [pc, #136]	; (8001810 <HAL_DMA_Init+0xa8>)
 8001786:	4413      	add	r3, r2
 8001788:	4a22      	ldr	r2, [pc, #136]	; (8001814 <HAL_DMA_Init+0xac>)
 800178a:	fba2 2303 	umull	r2, r3, r2, r3
 800178e:	091b      	lsrs	r3, r3, #4
 8001790:	009a      	lsls	r2, r3, #2
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4a1f      	ldr	r2, [pc, #124]	; (8001818 <HAL_DMA_Init+0xb0>)
 800179a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2202      	movs	r2, #2
 80017a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80017b2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80017b6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80017c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	68db      	ldr	r3, [r3, #12]
 80017c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	695b      	ldr	r3, [r3, #20]
 80017d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	69db      	ldr	r3, [r3, #28]
 80017de:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80017e0:	68fa      	ldr	r2, [r7, #12]
 80017e2:	4313      	orrs	r3, r2
 80017e4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	68fa      	ldr	r2, [r7, #12]
 80017ec:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2200      	movs	r2, #0
 80017f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2201      	movs	r2, #1
 80017f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2200      	movs	r2, #0
 8001800:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001804:	2300      	movs	r3, #0
}
 8001806:	4618      	mov	r0, r3
 8001808:	3714      	adds	r7, #20
 800180a:	46bd      	mov	sp, r7
 800180c:	bc80      	pop	{r7}
 800180e:	4770      	bx	lr
 8001810:	bffdfff8 	.word	0xbffdfff8
 8001814:	cccccccd 	.word	0xcccccccd
 8001818:	40020000 	.word	0x40020000

0800181c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b086      	sub	sp, #24
 8001820:	af00      	add	r7, sp, #0
 8001822:	60f8      	str	r0, [r7, #12]
 8001824:	60b9      	str	r1, [r7, #8]
 8001826:	607a      	str	r2, [r7, #4]
 8001828:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800182a:	2300      	movs	r3, #0
 800182c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001834:	2b01      	cmp	r3, #1
 8001836:	d101      	bne.n	800183c <HAL_DMA_Start_IT+0x20>
 8001838:	2302      	movs	r3, #2
 800183a:	e04a      	b.n	80018d2 <HAL_DMA_Start_IT+0xb6>
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	2201      	movs	r2, #1
 8001840:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800184a:	2b01      	cmp	r3, #1
 800184c:	d13a      	bne.n	80018c4 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	2202      	movs	r2, #2
 8001852:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	2200      	movs	r2, #0
 800185a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f022 0201 	bic.w	r2, r2, #1
 800186a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	68b9      	ldr	r1, [r7, #8]
 8001872:	68f8      	ldr	r0, [r7, #12]
 8001874:	f000 f9e8 	bl	8001c48 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800187c:	2b00      	cmp	r3, #0
 800187e:	d008      	beq.n	8001892 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f042 020e 	orr.w	r2, r2, #14
 800188e:	601a      	str	r2, [r3, #0]
 8001890:	e00f      	b.n	80018b2 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f022 0204 	bic.w	r2, r2, #4
 80018a0:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f042 020a 	orr.w	r2, r2, #10
 80018b0:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f042 0201 	orr.w	r2, r2, #1
 80018c0:	601a      	str	r2, [r3, #0]
 80018c2:	e005      	b.n	80018d0 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	2200      	movs	r2, #0
 80018c8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80018cc:	2302      	movs	r3, #2
 80018ce:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80018d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3718      	adds	r7, #24
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}

080018da <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80018da:	b480      	push	{r7}
 80018dc:	b085      	sub	sp, #20
 80018de:	af00      	add	r7, sp, #0
 80018e0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018e2:	2300      	movs	r3, #0
 80018e4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	d008      	beq.n	8001902 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2204      	movs	r2, #4
 80018f4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2200      	movs	r2, #0
 80018fa:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e020      	b.n	8001944 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f022 020e 	bic.w	r2, r2, #14
 8001910:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f022 0201 	bic.w	r2, r2, #1
 8001920:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800192a:	2101      	movs	r1, #1
 800192c:	fa01 f202 	lsl.w	r2, r1, r2
 8001930:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2201      	movs	r2, #1
 8001936:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2200      	movs	r2, #0
 800193e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001942:	7bfb      	ldrb	r3, [r7, #15]
}
 8001944:	4618      	mov	r0, r3
 8001946:	3714      	adds	r7, #20
 8001948:	46bd      	mov	sp, r7
 800194a:	bc80      	pop	{r7}
 800194c:	4770      	bx	lr
	...

08001950 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001958:	2300      	movs	r3, #0
 800195a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001962:	2b02      	cmp	r3, #2
 8001964:	d005      	beq.n	8001972 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2204      	movs	r2, #4
 800196a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	73fb      	strb	r3, [r7, #15]
 8001970:	e051      	b.n	8001a16 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f022 020e 	bic.w	r2, r2, #14
 8001980:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f022 0201 	bic.w	r2, r2, #1
 8001990:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a22      	ldr	r2, [pc, #136]	; (8001a20 <HAL_DMA_Abort_IT+0xd0>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d029      	beq.n	80019f0 <HAL_DMA_Abort_IT+0xa0>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a20      	ldr	r2, [pc, #128]	; (8001a24 <HAL_DMA_Abort_IT+0xd4>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d022      	beq.n	80019ec <HAL_DMA_Abort_IT+0x9c>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a1f      	ldr	r2, [pc, #124]	; (8001a28 <HAL_DMA_Abort_IT+0xd8>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d01a      	beq.n	80019e6 <HAL_DMA_Abort_IT+0x96>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a1d      	ldr	r2, [pc, #116]	; (8001a2c <HAL_DMA_Abort_IT+0xdc>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d012      	beq.n	80019e0 <HAL_DMA_Abort_IT+0x90>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a1c      	ldr	r2, [pc, #112]	; (8001a30 <HAL_DMA_Abort_IT+0xe0>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d00a      	beq.n	80019da <HAL_DMA_Abort_IT+0x8a>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a1a      	ldr	r2, [pc, #104]	; (8001a34 <HAL_DMA_Abort_IT+0xe4>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d102      	bne.n	80019d4 <HAL_DMA_Abort_IT+0x84>
 80019ce:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80019d2:	e00e      	b.n	80019f2 <HAL_DMA_Abort_IT+0xa2>
 80019d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80019d8:	e00b      	b.n	80019f2 <HAL_DMA_Abort_IT+0xa2>
 80019da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019de:	e008      	b.n	80019f2 <HAL_DMA_Abort_IT+0xa2>
 80019e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019e4:	e005      	b.n	80019f2 <HAL_DMA_Abort_IT+0xa2>
 80019e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019ea:	e002      	b.n	80019f2 <HAL_DMA_Abort_IT+0xa2>
 80019ec:	2310      	movs	r3, #16
 80019ee:	e000      	b.n	80019f2 <HAL_DMA_Abort_IT+0xa2>
 80019f0:	2301      	movs	r3, #1
 80019f2:	4a11      	ldr	r2, [pc, #68]	; (8001a38 <HAL_DMA_Abort_IT+0xe8>)
 80019f4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2201      	movs	r2, #1
 80019fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2200      	movs	r2, #0
 8001a02:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d003      	beq.n	8001a16 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	4798      	blx	r3
    } 
  }
  return status;
 8001a16:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3710      	adds	r7, #16
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	40020008 	.word	0x40020008
 8001a24:	4002001c 	.word	0x4002001c
 8001a28:	40020030 	.word	0x40020030
 8001a2c:	40020044 	.word	0x40020044
 8001a30:	40020058 	.word	0x40020058
 8001a34:	4002006c 	.word	0x4002006c
 8001a38:	40020000 	.word	0x40020000

08001a3c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a58:	2204      	movs	r2, #4
 8001a5a:	409a      	lsls	r2, r3
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	4013      	ands	r3, r2
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d04f      	beq.n	8001b04 <HAL_DMA_IRQHandler+0xc8>
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	f003 0304 	and.w	r3, r3, #4
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d04a      	beq.n	8001b04 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0320 	and.w	r3, r3, #32
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d107      	bne.n	8001a8c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f022 0204 	bic.w	r2, r2, #4
 8001a8a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a66      	ldr	r2, [pc, #408]	; (8001c2c <HAL_DMA_IRQHandler+0x1f0>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d029      	beq.n	8001aea <HAL_DMA_IRQHandler+0xae>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a65      	ldr	r2, [pc, #404]	; (8001c30 <HAL_DMA_IRQHandler+0x1f4>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d022      	beq.n	8001ae6 <HAL_DMA_IRQHandler+0xaa>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a63      	ldr	r2, [pc, #396]	; (8001c34 <HAL_DMA_IRQHandler+0x1f8>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d01a      	beq.n	8001ae0 <HAL_DMA_IRQHandler+0xa4>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a62      	ldr	r2, [pc, #392]	; (8001c38 <HAL_DMA_IRQHandler+0x1fc>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d012      	beq.n	8001ada <HAL_DMA_IRQHandler+0x9e>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a60      	ldr	r2, [pc, #384]	; (8001c3c <HAL_DMA_IRQHandler+0x200>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d00a      	beq.n	8001ad4 <HAL_DMA_IRQHandler+0x98>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a5f      	ldr	r2, [pc, #380]	; (8001c40 <HAL_DMA_IRQHandler+0x204>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d102      	bne.n	8001ace <HAL_DMA_IRQHandler+0x92>
 8001ac8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001acc:	e00e      	b.n	8001aec <HAL_DMA_IRQHandler+0xb0>
 8001ace:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001ad2:	e00b      	b.n	8001aec <HAL_DMA_IRQHandler+0xb0>
 8001ad4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001ad8:	e008      	b.n	8001aec <HAL_DMA_IRQHandler+0xb0>
 8001ada:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001ade:	e005      	b.n	8001aec <HAL_DMA_IRQHandler+0xb0>
 8001ae0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ae4:	e002      	b.n	8001aec <HAL_DMA_IRQHandler+0xb0>
 8001ae6:	2340      	movs	r3, #64	; 0x40
 8001ae8:	e000      	b.n	8001aec <HAL_DMA_IRQHandler+0xb0>
 8001aea:	2304      	movs	r3, #4
 8001aec:	4a55      	ldr	r2, [pc, #340]	; (8001c44 <HAL_DMA_IRQHandler+0x208>)
 8001aee:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	f000 8094 	beq.w	8001c22 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001b02:	e08e      	b.n	8001c22 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b08:	2202      	movs	r2, #2
 8001b0a:	409a      	lsls	r2, r3
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	4013      	ands	r3, r2
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d056      	beq.n	8001bc2 <HAL_DMA_IRQHandler+0x186>
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	f003 0302 	and.w	r3, r3, #2
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d051      	beq.n	8001bc2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 0320 	and.w	r3, r3, #32
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d10b      	bne.n	8001b44 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f022 020a 	bic.w	r2, r2, #10
 8001b3a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2201      	movs	r2, #1
 8001b40:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a38      	ldr	r2, [pc, #224]	; (8001c2c <HAL_DMA_IRQHandler+0x1f0>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d029      	beq.n	8001ba2 <HAL_DMA_IRQHandler+0x166>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a37      	ldr	r2, [pc, #220]	; (8001c30 <HAL_DMA_IRQHandler+0x1f4>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d022      	beq.n	8001b9e <HAL_DMA_IRQHandler+0x162>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a35      	ldr	r2, [pc, #212]	; (8001c34 <HAL_DMA_IRQHandler+0x1f8>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d01a      	beq.n	8001b98 <HAL_DMA_IRQHandler+0x15c>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a34      	ldr	r2, [pc, #208]	; (8001c38 <HAL_DMA_IRQHandler+0x1fc>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d012      	beq.n	8001b92 <HAL_DMA_IRQHandler+0x156>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a32      	ldr	r2, [pc, #200]	; (8001c3c <HAL_DMA_IRQHandler+0x200>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d00a      	beq.n	8001b8c <HAL_DMA_IRQHandler+0x150>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a31      	ldr	r2, [pc, #196]	; (8001c40 <HAL_DMA_IRQHandler+0x204>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d102      	bne.n	8001b86 <HAL_DMA_IRQHandler+0x14a>
 8001b80:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001b84:	e00e      	b.n	8001ba4 <HAL_DMA_IRQHandler+0x168>
 8001b86:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b8a:	e00b      	b.n	8001ba4 <HAL_DMA_IRQHandler+0x168>
 8001b8c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b90:	e008      	b.n	8001ba4 <HAL_DMA_IRQHandler+0x168>
 8001b92:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b96:	e005      	b.n	8001ba4 <HAL_DMA_IRQHandler+0x168>
 8001b98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b9c:	e002      	b.n	8001ba4 <HAL_DMA_IRQHandler+0x168>
 8001b9e:	2320      	movs	r3, #32
 8001ba0:	e000      	b.n	8001ba4 <HAL_DMA_IRQHandler+0x168>
 8001ba2:	2302      	movs	r3, #2
 8001ba4:	4a27      	ldr	r2, [pc, #156]	; (8001c44 <HAL_DMA_IRQHandler+0x208>)
 8001ba6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2200      	movs	r2, #0
 8001bac:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d034      	beq.n	8001c22 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001bc0:	e02f      	b.n	8001c22 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc6:	2208      	movs	r2, #8
 8001bc8:	409a      	lsls	r2, r3
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	4013      	ands	r3, r2
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d028      	beq.n	8001c24 <HAL_DMA_IRQHandler+0x1e8>
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	f003 0308 	and.w	r3, r3, #8
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d023      	beq.n	8001c24 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f022 020e 	bic.w	r2, r2, #14
 8001bea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bf4:	2101      	movs	r1, #1
 8001bf6:	fa01 f202 	lsl.w	r2, r1, r2
 8001bfa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2201      	movs	r2, #1
 8001c06:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d004      	beq.n	8001c24 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	4798      	blx	r3
    }
  }
  return;
 8001c22:	bf00      	nop
 8001c24:	bf00      	nop
}
 8001c26:	3710      	adds	r7, #16
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	40020008 	.word	0x40020008
 8001c30:	4002001c 	.word	0x4002001c
 8001c34:	40020030 	.word	0x40020030
 8001c38:	40020044 	.word	0x40020044
 8001c3c:	40020058 	.word	0x40020058
 8001c40:	4002006c 	.word	0x4002006c
 8001c44:	40020000 	.word	0x40020000

08001c48 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b085      	sub	sp, #20
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	60f8      	str	r0, [r7, #12]
 8001c50:	60b9      	str	r1, [r7, #8]
 8001c52:	607a      	str	r2, [r7, #4]
 8001c54:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c5e:	2101      	movs	r1, #1
 8001c60:	fa01 f202 	lsl.w	r2, r1, r2
 8001c64:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	683a      	ldr	r2, [r7, #0]
 8001c6c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	2b10      	cmp	r3, #16
 8001c74:	d108      	bne.n	8001c88 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	687a      	ldr	r2, [r7, #4]
 8001c7c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	68ba      	ldr	r2, [r7, #8]
 8001c84:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001c86:	e007      	b.n	8001c98 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	68ba      	ldr	r2, [r7, #8]
 8001c8e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	687a      	ldr	r2, [r7, #4]
 8001c96:	60da      	str	r2, [r3, #12]
}
 8001c98:	bf00      	nop
 8001c9a:	3714      	adds	r7, #20
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bc80      	pop	{r7}
 8001ca0:	4770      	bx	lr
	...

08001ca4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b08b      	sub	sp, #44	; 0x2c
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cb6:	e169      	b.n	8001f8c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001cb8:	2201      	movs	r2, #1
 8001cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	69fa      	ldr	r2, [r7, #28]
 8001cc8:	4013      	ands	r3, r2
 8001cca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	f040 8158 	bne.w	8001f86 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	4a9a      	ldr	r2, [pc, #616]	; (8001f44 <HAL_GPIO_Init+0x2a0>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d05e      	beq.n	8001d9e <HAL_GPIO_Init+0xfa>
 8001ce0:	4a98      	ldr	r2, [pc, #608]	; (8001f44 <HAL_GPIO_Init+0x2a0>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d875      	bhi.n	8001dd2 <HAL_GPIO_Init+0x12e>
 8001ce6:	4a98      	ldr	r2, [pc, #608]	; (8001f48 <HAL_GPIO_Init+0x2a4>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d058      	beq.n	8001d9e <HAL_GPIO_Init+0xfa>
 8001cec:	4a96      	ldr	r2, [pc, #600]	; (8001f48 <HAL_GPIO_Init+0x2a4>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d86f      	bhi.n	8001dd2 <HAL_GPIO_Init+0x12e>
 8001cf2:	4a96      	ldr	r2, [pc, #600]	; (8001f4c <HAL_GPIO_Init+0x2a8>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d052      	beq.n	8001d9e <HAL_GPIO_Init+0xfa>
 8001cf8:	4a94      	ldr	r2, [pc, #592]	; (8001f4c <HAL_GPIO_Init+0x2a8>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d869      	bhi.n	8001dd2 <HAL_GPIO_Init+0x12e>
 8001cfe:	4a94      	ldr	r2, [pc, #592]	; (8001f50 <HAL_GPIO_Init+0x2ac>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d04c      	beq.n	8001d9e <HAL_GPIO_Init+0xfa>
 8001d04:	4a92      	ldr	r2, [pc, #584]	; (8001f50 <HAL_GPIO_Init+0x2ac>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d863      	bhi.n	8001dd2 <HAL_GPIO_Init+0x12e>
 8001d0a:	4a92      	ldr	r2, [pc, #584]	; (8001f54 <HAL_GPIO_Init+0x2b0>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d046      	beq.n	8001d9e <HAL_GPIO_Init+0xfa>
 8001d10:	4a90      	ldr	r2, [pc, #576]	; (8001f54 <HAL_GPIO_Init+0x2b0>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d85d      	bhi.n	8001dd2 <HAL_GPIO_Init+0x12e>
 8001d16:	2b12      	cmp	r3, #18
 8001d18:	d82a      	bhi.n	8001d70 <HAL_GPIO_Init+0xcc>
 8001d1a:	2b12      	cmp	r3, #18
 8001d1c:	d859      	bhi.n	8001dd2 <HAL_GPIO_Init+0x12e>
 8001d1e:	a201      	add	r2, pc, #4	; (adr r2, 8001d24 <HAL_GPIO_Init+0x80>)
 8001d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d24:	08001d9f 	.word	0x08001d9f
 8001d28:	08001d79 	.word	0x08001d79
 8001d2c:	08001d8b 	.word	0x08001d8b
 8001d30:	08001dcd 	.word	0x08001dcd
 8001d34:	08001dd3 	.word	0x08001dd3
 8001d38:	08001dd3 	.word	0x08001dd3
 8001d3c:	08001dd3 	.word	0x08001dd3
 8001d40:	08001dd3 	.word	0x08001dd3
 8001d44:	08001dd3 	.word	0x08001dd3
 8001d48:	08001dd3 	.word	0x08001dd3
 8001d4c:	08001dd3 	.word	0x08001dd3
 8001d50:	08001dd3 	.word	0x08001dd3
 8001d54:	08001dd3 	.word	0x08001dd3
 8001d58:	08001dd3 	.word	0x08001dd3
 8001d5c:	08001dd3 	.word	0x08001dd3
 8001d60:	08001dd3 	.word	0x08001dd3
 8001d64:	08001dd3 	.word	0x08001dd3
 8001d68:	08001d81 	.word	0x08001d81
 8001d6c:	08001d95 	.word	0x08001d95
 8001d70:	4a79      	ldr	r2, [pc, #484]	; (8001f58 <HAL_GPIO_Init+0x2b4>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d013      	beq.n	8001d9e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d76:	e02c      	b.n	8001dd2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	623b      	str	r3, [r7, #32]
          break;
 8001d7e:	e029      	b.n	8001dd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	3304      	adds	r3, #4
 8001d86:	623b      	str	r3, [r7, #32]
          break;
 8001d88:	e024      	b.n	8001dd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	68db      	ldr	r3, [r3, #12]
 8001d8e:	3308      	adds	r3, #8
 8001d90:	623b      	str	r3, [r7, #32]
          break;
 8001d92:	e01f      	b.n	8001dd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	330c      	adds	r3, #12
 8001d9a:	623b      	str	r3, [r7, #32]
          break;
 8001d9c:	e01a      	b.n	8001dd4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d102      	bne.n	8001dac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001da6:	2304      	movs	r3, #4
 8001da8:	623b      	str	r3, [r7, #32]
          break;
 8001daa:	e013      	b.n	8001dd4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d105      	bne.n	8001dc0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001db4:	2308      	movs	r3, #8
 8001db6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	69fa      	ldr	r2, [r7, #28]
 8001dbc:	611a      	str	r2, [r3, #16]
          break;
 8001dbe:	e009      	b.n	8001dd4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001dc0:	2308      	movs	r3, #8
 8001dc2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	69fa      	ldr	r2, [r7, #28]
 8001dc8:	615a      	str	r2, [r3, #20]
          break;
 8001dca:	e003      	b.n	8001dd4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	623b      	str	r3, [r7, #32]
          break;
 8001dd0:	e000      	b.n	8001dd4 <HAL_GPIO_Init+0x130>
          break;
 8001dd2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	2bff      	cmp	r3, #255	; 0xff
 8001dd8:	d801      	bhi.n	8001dde <HAL_GPIO_Init+0x13a>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	e001      	b.n	8001de2 <HAL_GPIO_Init+0x13e>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	3304      	adds	r3, #4
 8001de2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001de4:	69bb      	ldr	r3, [r7, #24]
 8001de6:	2bff      	cmp	r3, #255	; 0xff
 8001de8:	d802      	bhi.n	8001df0 <HAL_GPIO_Init+0x14c>
 8001dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	e002      	b.n	8001df6 <HAL_GPIO_Init+0x152>
 8001df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df2:	3b08      	subs	r3, #8
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	210f      	movs	r1, #15
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	fa01 f303 	lsl.w	r3, r1, r3
 8001e04:	43db      	mvns	r3, r3
 8001e06:	401a      	ands	r2, r3
 8001e08:	6a39      	ldr	r1, [r7, #32]
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e10:	431a      	orrs	r2, r3
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	f000 80b1 	beq.w	8001f86 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e24:	4b4d      	ldr	r3, [pc, #308]	; (8001f5c <HAL_GPIO_Init+0x2b8>)
 8001e26:	699b      	ldr	r3, [r3, #24]
 8001e28:	4a4c      	ldr	r2, [pc, #304]	; (8001f5c <HAL_GPIO_Init+0x2b8>)
 8001e2a:	f043 0301 	orr.w	r3, r3, #1
 8001e2e:	6193      	str	r3, [r2, #24]
 8001e30:	4b4a      	ldr	r3, [pc, #296]	; (8001f5c <HAL_GPIO_Init+0x2b8>)
 8001e32:	699b      	ldr	r3, [r3, #24]
 8001e34:	f003 0301 	and.w	r3, r3, #1
 8001e38:	60bb      	str	r3, [r7, #8]
 8001e3a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e3c:	4a48      	ldr	r2, [pc, #288]	; (8001f60 <HAL_GPIO_Init+0x2bc>)
 8001e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e40:	089b      	lsrs	r3, r3, #2
 8001e42:	3302      	adds	r3, #2
 8001e44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e48:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4c:	f003 0303 	and.w	r3, r3, #3
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	220f      	movs	r2, #15
 8001e54:	fa02 f303 	lsl.w	r3, r2, r3
 8001e58:	43db      	mvns	r3, r3
 8001e5a:	68fa      	ldr	r2, [r7, #12]
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	4a40      	ldr	r2, [pc, #256]	; (8001f64 <HAL_GPIO_Init+0x2c0>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d013      	beq.n	8001e90 <HAL_GPIO_Init+0x1ec>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	4a3f      	ldr	r2, [pc, #252]	; (8001f68 <HAL_GPIO_Init+0x2c4>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d00d      	beq.n	8001e8c <HAL_GPIO_Init+0x1e8>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	4a3e      	ldr	r2, [pc, #248]	; (8001f6c <HAL_GPIO_Init+0x2c8>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d007      	beq.n	8001e88 <HAL_GPIO_Init+0x1e4>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	4a3d      	ldr	r2, [pc, #244]	; (8001f70 <HAL_GPIO_Init+0x2cc>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d101      	bne.n	8001e84 <HAL_GPIO_Init+0x1e0>
 8001e80:	2303      	movs	r3, #3
 8001e82:	e006      	b.n	8001e92 <HAL_GPIO_Init+0x1ee>
 8001e84:	2304      	movs	r3, #4
 8001e86:	e004      	b.n	8001e92 <HAL_GPIO_Init+0x1ee>
 8001e88:	2302      	movs	r3, #2
 8001e8a:	e002      	b.n	8001e92 <HAL_GPIO_Init+0x1ee>
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e000      	b.n	8001e92 <HAL_GPIO_Init+0x1ee>
 8001e90:	2300      	movs	r3, #0
 8001e92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e94:	f002 0203 	and.w	r2, r2, #3
 8001e98:	0092      	lsls	r2, r2, #2
 8001e9a:	4093      	lsls	r3, r2
 8001e9c:	68fa      	ldr	r2, [r7, #12]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ea2:	492f      	ldr	r1, [pc, #188]	; (8001f60 <HAL_GPIO_Init+0x2bc>)
 8001ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea6:	089b      	lsrs	r3, r3, #2
 8001ea8:	3302      	adds	r3, #2
 8001eaa:	68fa      	ldr	r2, [r7, #12]
 8001eac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d006      	beq.n	8001eca <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ebc:	4b2d      	ldr	r3, [pc, #180]	; (8001f74 <HAL_GPIO_Init+0x2d0>)
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	492c      	ldr	r1, [pc, #176]	; (8001f74 <HAL_GPIO_Init+0x2d0>)
 8001ec2:	69bb      	ldr	r3, [r7, #24]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	600b      	str	r3, [r1, #0]
 8001ec8:	e006      	b.n	8001ed8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001eca:	4b2a      	ldr	r3, [pc, #168]	; (8001f74 <HAL_GPIO_Init+0x2d0>)
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	69bb      	ldr	r3, [r7, #24]
 8001ed0:	43db      	mvns	r3, r3
 8001ed2:	4928      	ldr	r1, [pc, #160]	; (8001f74 <HAL_GPIO_Init+0x2d0>)
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d006      	beq.n	8001ef2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ee4:	4b23      	ldr	r3, [pc, #140]	; (8001f74 <HAL_GPIO_Init+0x2d0>)
 8001ee6:	685a      	ldr	r2, [r3, #4]
 8001ee8:	4922      	ldr	r1, [pc, #136]	; (8001f74 <HAL_GPIO_Init+0x2d0>)
 8001eea:	69bb      	ldr	r3, [r7, #24]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	604b      	str	r3, [r1, #4]
 8001ef0:	e006      	b.n	8001f00 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ef2:	4b20      	ldr	r3, [pc, #128]	; (8001f74 <HAL_GPIO_Init+0x2d0>)
 8001ef4:	685a      	ldr	r2, [r3, #4]
 8001ef6:	69bb      	ldr	r3, [r7, #24]
 8001ef8:	43db      	mvns	r3, r3
 8001efa:	491e      	ldr	r1, [pc, #120]	; (8001f74 <HAL_GPIO_Init+0x2d0>)
 8001efc:	4013      	ands	r3, r2
 8001efe:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d006      	beq.n	8001f1a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f0c:	4b19      	ldr	r3, [pc, #100]	; (8001f74 <HAL_GPIO_Init+0x2d0>)
 8001f0e:	689a      	ldr	r2, [r3, #8]
 8001f10:	4918      	ldr	r1, [pc, #96]	; (8001f74 <HAL_GPIO_Init+0x2d0>)
 8001f12:	69bb      	ldr	r3, [r7, #24]
 8001f14:	4313      	orrs	r3, r2
 8001f16:	608b      	str	r3, [r1, #8]
 8001f18:	e006      	b.n	8001f28 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f1a:	4b16      	ldr	r3, [pc, #88]	; (8001f74 <HAL_GPIO_Init+0x2d0>)
 8001f1c:	689a      	ldr	r2, [r3, #8]
 8001f1e:	69bb      	ldr	r3, [r7, #24]
 8001f20:	43db      	mvns	r3, r3
 8001f22:	4914      	ldr	r1, [pc, #80]	; (8001f74 <HAL_GPIO_Init+0x2d0>)
 8001f24:	4013      	ands	r3, r2
 8001f26:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d021      	beq.n	8001f78 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f34:	4b0f      	ldr	r3, [pc, #60]	; (8001f74 <HAL_GPIO_Init+0x2d0>)
 8001f36:	68da      	ldr	r2, [r3, #12]
 8001f38:	490e      	ldr	r1, [pc, #56]	; (8001f74 <HAL_GPIO_Init+0x2d0>)
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	60cb      	str	r3, [r1, #12]
 8001f40:	e021      	b.n	8001f86 <HAL_GPIO_Init+0x2e2>
 8001f42:	bf00      	nop
 8001f44:	10320000 	.word	0x10320000
 8001f48:	10310000 	.word	0x10310000
 8001f4c:	10220000 	.word	0x10220000
 8001f50:	10210000 	.word	0x10210000
 8001f54:	10120000 	.word	0x10120000
 8001f58:	10110000 	.word	0x10110000
 8001f5c:	40021000 	.word	0x40021000
 8001f60:	40010000 	.word	0x40010000
 8001f64:	40010800 	.word	0x40010800
 8001f68:	40010c00 	.word	0x40010c00
 8001f6c:	40011000 	.word	0x40011000
 8001f70:	40011400 	.word	0x40011400
 8001f74:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f78:	4b0b      	ldr	r3, [pc, #44]	; (8001fa8 <HAL_GPIO_Init+0x304>)
 8001f7a:	68da      	ldr	r2, [r3, #12]
 8001f7c:	69bb      	ldr	r3, [r7, #24]
 8001f7e:	43db      	mvns	r3, r3
 8001f80:	4909      	ldr	r1, [pc, #36]	; (8001fa8 <HAL_GPIO_Init+0x304>)
 8001f82:	4013      	ands	r3, r2
 8001f84:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f88:	3301      	adds	r3, #1
 8001f8a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f92:	fa22 f303 	lsr.w	r3, r2, r3
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	f47f ae8e 	bne.w	8001cb8 <HAL_GPIO_Init+0x14>
  }
}
 8001f9c:	bf00      	nop
 8001f9e:	bf00      	nop
 8001fa0:	372c      	adds	r7, #44	; 0x2c
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bc80      	pop	{r7}
 8001fa6:	4770      	bx	lr
 8001fa8:	40010400 	.word	0x40010400

08001fac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b086      	sub	sp, #24
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d101      	bne.n	8001fbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e272      	b.n	80024a4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0301 	and.w	r3, r3, #1
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	f000 8087 	beq.w	80020da <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fcc:	4b92      	ldr	r3, [pc, #584]	; (8002218 <HAL_RCC_OscConfig+0x26c>)
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f003 030c 	and.w	r3, r3, #12
 8001fd4:	2b04      	cmp	r3, #4
 8001fd6:	d00c      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001fd8:	4b8f      	ldr	r3, [pc, #572]	; (8002218 <HAL_RCC_OscConfig+0x26c>)
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f003 030c 	and.w	r3, r3, #12
 8001fe0:	2b08      	cmp	r3, #8
 8001fe2:	d112      	bne.n	800200a <HAL_RCC_OscConfig+0x5e>
 8001fe4:	4b8c      	ldr	r3, [pc, #560]	; (8002218 <HAL_RCC_OscConfig+0x26c>)
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ff0:	d10b      	bne.n	800200a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ff2:	4b89      	ldr	r3, [pc, #548]	; (8002218 <HAL_RCC_OscConfig+0x26c>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d06c      	beq.n	80020d8 <HAL_RCC_OscConfig+0x12c>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d168      	bne.n	80020d8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e24c      	b.n	80024a4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002012:	d106      	bne.n	8002022 <HAL_RCC_OscConfig+0x76>
 8002014:	4b80      	ldr	r3, [pc, #512]	; (8002218 <HAL_RCC_OscConfig+0x26c>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a7f      	ldr	r2, [pc, #508]	; (8002218 <HAL_RCC_OscConfig+0x26c>)
 800201a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800201e:	6013      	str	r3, [r2, #0]
 8002020:	e02e      	b.n	8002080 <HAL_RCC_OscConfig+0xd4>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d10c      	bne.n	8002044 <HAL_RCC_OscConfig+0x98>
 800202a:	4b7b      	ldr	r3, [pc, #492]	; (8002218 <HAL_RCC_OscConfig+0x26c>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a7a      	ldr	r2, [pc, #488]	; (8002218 <HAL_RCC_OscConfig+0x26c>)
 8002030:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002034:	6013      	str	r3, [r2, #0]
 8002036:	4b78      	ldr	r3, [pc, #480]	; (8002218 <HAL_RCC_OscConfig+0x26c>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a77      	ldr	r2, [pc, #476]	; (8002218 <HAL_RCC_OscConfig+0x26c>)
 800203c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002040:	6013      	str	r3, [r2, #0]
 8002042:	e01d      	b.n	8002080 <HAL_RCC_OscConfig+0xd4>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800204c:	d10c      	bne.n	8002068 <HAL_RCC_OscConfig+0xbc>
 800204e:	4b72      	ldr	r3, [pc, #456]	; (8002218 <HAL_RCC_OscConfig+0x26c>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a71      	ldr	r2, [pc, #452]	; (8002218 <HAL_RCC_OscConfig+0x26c>)
 8002054:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002058:	6013      	str	r3, [r2, #0]
 800205a:	4b6f      	ldr	r3, [pc, #444]	; (8002218 <HAL_RCC_OscConfig+0x26c>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a6e      	ldr	r2, [pc, #440]	; (8002218 <HAL_RCC_OscConfig+0x26c>)
 8002060:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002064:	6013      	str	r3, [r2, #0]
 8002066:	e00b      	b.n	8002080 <HAL_RCC_OscConfig+0xd4>
 8002068:	4b6b      	ldr	r3, [pc, #428]	; (8002218 <HAL_RCC_OscConfig+0x26c>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a6a      	ldr	r2, [pc, #424]	; (8002218 <HAL_RCC_OscConfig+0x26c>)
 800206e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002072:	6013      	str	r3, [r2, #0]
 8002074:	4b68      	ldr	r3, [pc, #416]	; (8002218 <HAL_RCC_OscConfig+0x26c>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a67      	ldr	r2, [pc, #412]	; (8002218 <HAL_RCC_OscConfig+0x26c>)
 800207a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800207e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d013      	beq.n	80020b0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002088:	f7fe fd9c 	bl	8000bc4 <HAL_GetTick>
 800208c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800208e:	e008      	b.n	80020a2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002090:	f7fe fd98 	bl	8000bc4 <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	2b64      	cmp	r3, #100	; 0x64
 800209c:	d901      	bls.n	80020a2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	e200      	b.n	80024a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020a2:	4b5d      	ldr	r3, [pc, #372]	; (8002218 <HAL_RCC_OscConfig+0x26c>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d0f0      	beq.n	8002090 <HAL_RCC_OscConfig+0xe4>
 80020ae:	e014      	b.n	80020da <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b0:	f7fe fd88 	bl	8000bc4 <HAL_GetTick>
 80020b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020b6:	e008      	b.n	80020ca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020b8:	f7fe fd84 	bl	8000bc4 <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	2b64      	cmp	r3, #100	; 0x64
 80020c4:	d901      	bls.n	80020ca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e1ec      	b.n	80024a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020ca:	4b53      	ldr	r3, [pc, #332]	; (8002218 <HAL_RCC_OscConfig+0x26c>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d1f0      	bne.n	80020b8 <HAL_RCC_OscConfig+0x10c>
 80020d6:	e000      	b.n	80020da <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0302 	and.w	r3, r3, #2
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d063      	beq.n	80021ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020e6:	4b4c      	ldr	r3, [pc, #304]	; (8002218 <HAL_RCC_OscConfig+0x26c>)
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f003 030c 	and.w	r3, r3, #12
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d00b      	beq.n	800210a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80020f2:	4b49      	ldr	r3, [pc, #292]	; (8002218 <HAL_RCC_OscConfig+0x26c>)
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f003 030c 	and.w	r3, r3, #12
 80020fa:	2b08      	cmp	r3, #8
 80020fc:	d11c      	bne.n	8002138 <HAL_RCC_OscConfig+0x18c>
 80020fe:	4b46      	ldr	r3, [pc, #280]	; (8002218 <HAL_RCC_OscConfig+0x26c>)
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d116      	bne.n	8002138 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800210a:	4b43      	ldr	r3, [pc, #268]	; (8002218 <HAL_RCC_OscConfig+0x26c>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0302 	and.w	r3, r3, #2
 8002112:	2b00      	cmp	r3, #0
 8002114:	d005      	beq.n	8002122 <HAL_RCC_OscConfig+0x176>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	691b      	ldr	r3, [r3, #16]
 800211a:	2b01      	cmp	r3, #1
 800211c:	d001      	beq.n	8002122 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e1c0      	b.n	80024a4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002122:	4b3d      	ldr	r3, [pc, #244]	; (8002218 <HAL_RCC_OscConfig+0x26c>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	695b      	ldr	r3, [r3, #20]
 800212e:	00db      	lsls	r3, r3, #3
 8002130:	4939      	ldr	r1, [pc, #228]	; (8002218 <HAL_RCC_OscConfig+0x26c>)
 8002132:	4313      	orrs	r3, r2
 8002134:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002136:	e03a      	b.n	80021ae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	691b      	ldr	r3, [r3, #16]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d020      	beq.n	8002182 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002140:	4b36      	ldr	r3, [pc, #216]	; (800221c <HAL_RCC_OscConfig+0x270>)
 8002142:	2201      	movs	r2, #1
 8002144:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002146:	f7fe fd3d 	bl	8000bc4 <HAL_GetTick>
 800214a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800214c:	e008      	b.n	8002160 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800214e:	f7fe fd39 	bl	8000bc4 <HAL_GetTick>
 8002152:	4602      	mov	r2, r0
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	2b02      	cmp	r3, #2
 800215a:	d901      	bls.n	8002160 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800215c:	2303      	movs	r3, #3
 800215e:	e1a1      	b.n	80024a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002160:	4b2d      	ldr	r3, [pc, #180]	; (8002218 <HAL_RCC_OscConfig+0x26c>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 0302 	and.w	r3, r3, #2
 8002168:	2b00      	cmp	r3, #0
 800216a:	d0f0      	beq.n	800214e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800216c:	4b2a      	ldr	r3, [pc, #168]	; (8002218 <HAL_RCC_OscConfig+0x26c>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	695b      	ldr	r3, [r3, #20]
 8002178:	00db      	lsls	r3, r3, #3
 800217a:	4927      	ldr	r1, [pc, #156]	; (8002218 <HAL_RCC_OscConfig+0x26c>)
 800217c:	4313      	orrs	r3, r2
 800217e:	600b      	str	r3, [r1, #0]
 8002180:	e015      	b.n	80021ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002182:	4b26      	ldr	r3, [pc, #152]	; (800221c <HAL_RCC_OscConfig+0x270>)
 8002184:	2200      	movs	r2, #0
 8002186:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002188:	f7fe fd1c 	bl	8000bc4 <HAL_GetTick>
 800218c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800218e:	e008      	b.n	80021a2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002190:	f7fe fd18 	bl	8000bc4 <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	2b02      	cmp	r3, #2
 800219c:	d901      	bls.n	80021a2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e180      	b.n	80024a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021a2:	4b1d      	ldr	r3, [pc, #116]	; (8002218 <HAL_RCC_OscConfig+0x26c>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0302 	and.w	r3, r3, #2
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d1f0      	bne.n	8002190 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0308 	and.w	r3, r3, #8
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d03a      	beq.n	8002230 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	699b      	ldr	r3, [r3, #24]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d019      	beq.n	80021f6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021c2:	4b17      	ldr	r3, [pc, #92]	; (8002220 <HAL_RCC_OscConfig+0x274>)
 80021c4:	2201      	movs	r2, #1
 80021c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021c8:	f7fe fcfc 	bl	8000bc4 <HAL_GetTick>
 80021cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021ce:	e008      	b.n	80021e2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021d0:	f7fe fcf8 	bl	8000bc4 <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d901      	bls.n	80021e2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e160      	b.n	80024a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021e2:	4b0d      	ldr	r3, [pc, #52]	; (8002218 <HAL_RCC_OscConfig+0x26c>)
 80021e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e6:	f003 0302 	and.w	r3, r3, #2
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d0f0      	beq.n	80021d0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80021ee:	2001      	movs	r0, #1
 80021f0:	f000 fad8 	bl	80027a4 <RCC_Delay>
 80021f4:	e01c      	b.n	8002230 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021f6:	4b0a      	ldr	r3, [pc, #40]	; (8002220 <HAL_RCC_OscConfig+0x274>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021fc:	f7fe fce2 	bl	8000bc4 <HAL_GetTick>
 8002200:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002202:	e00f      	b.n	8002224 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002204:	f7fe fcde 	bl	8000bc4 <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	2b02      	cmp	r3, #2
 8002210:	d908      	bls.n	8002224 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	e146      	b.n	80024a4 <HAL_RCC_OscConfig+0x4f8>
 8002216:	bf00      	nop
 8002218:	40021000 	.word	0x40021000
 800221c:	42420000 	.word	0x42420000
 8002220:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002224:	4b92      	ldr	r3, [pc, #584]	; (8002470 <HAL_RCC_OscConfig+0x4c4>)
 8002226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002228:	f003 0302 	and.w	r3, r3, #2
 800222c:	2b00      	cmp	r3, #0
 800222e:	d1e9      	bne.n	8002204 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0304 	and.w	r3, r3, #4
 8002238:	2b00      	cmp	r3, #0
 800223a:	f000 80a6 	beq.w	800238a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800223e:	2300      	movs	r3, #0
 8002240:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002242:	4b8b      	ldr	r3, [pc, #556]	; (8002470 <HAL_RCC_OscConfig+0x4c4>)
 8002244:	69db      	ldr	r3, [r3, #28]
 8002246:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d10d      	bne.n	800226a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800224e:	4b88      	ldr	r3, [pc, #544]	; (8002470 <HAL_RCC_OscConfig+0x4c4>)
 8002250:	69db      	ldr	r3, [r3, #28]
 8002252:	4a87      	ldr	r2, [pc, #540]	; (8002470 <HAL_RCC_OscConfig+0x4c4>)
 8002254:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002258:	61d3      	str	r3, [r2, #28]
 800225a:	4b85      	ldr	r3, [pc, #532]	; (8002470 <HAL_RCC_OscConfig+0x4c4>)
 800225c:	69db      	ldr	r3, [r3, #28]
 800225e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002262:	60bb      	str	r3, [r7, #8]
 8002264:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002266:	2301      	movs	r3, #1
 8002268:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800226a:	4b82      	ldr	r3, [pc, #520]	; (8002474 <HAL_RCC_OscConfig+0x4c8>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002272:	2b00      	cmp	r3, #0
 8002274:	d118      	bne.n	80022a8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002276:	4b7f      	ldr	r3, [pc, #508]	; (8002474 <HAL_RCC_OscConfig+0x4c8>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a7e      	ldr	r2, [pc, #504]	; (8002474 <HAL_RCC_OscConfig+0x4c8>)
 800227c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002280:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002282:	f7fe fc9f 	bl	8000bc4 <HAL_GetTick>
 8002286:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002288:	e008      	b.n	800229c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800228a:	f7fe fc9b 	bl	8000bc4 <HAL_GetTick>
 800228e:	4602      	mov	r2, r0
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	2b64      	cmp	r3, #100	; 0x64
 8002296:	d901      	bls.n	800229c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002298:	2303      	movs	r3, #3
 800229a:	e103      	b.n	80024a4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800229c:	4b75      	ldr	r3, [pc, #468]	; (8002474 <HAL_RCC_OscConfig+0x4c8>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d0f0      	beq.n	800228a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d106      	bne.n	80022be <HAL_RCC_OscConfig+0x312>
 80022b0:	4b6f      	ldr	r3, [pc, #444]	; (8002470 <HAL_RCC_OscConfig+0x4c4>)
 80022b2:	6a1b      	ldr	r3, [r3, #32]
 80022b4:	4a6e      	ldr	r2, [pc, #440]	; (8002470 <HAL_RCC_OscConfig+0x4c4>)
 80022b6:	f043 0301 	orr.w	r3, r3, #1
 80022ba:	6213      	str	r3, [r2, #32]
 80022bc:	e02d      	b.n	800231a <HAL_RCC_OscConfig+0x36e>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d10c      	bne.n	80022e0 <HAL_RCC_OscConfig+0x334>
 80022c6:	4b6a      	ldr	r3, [pc, #424]	; (8002470 <HAL_RCC_OscConfig+0x4c4>)
 80022c8:	6a1b      	ldr	r3, [r3, #32]
 80022ca:	4a69      	ldr	r2, [pc, #420]	; (8002470 <HAL_RCC_OscConfig+0x4c4>)
 80022cc:	f023 0301 	bic.w	r3, r3, #1
 80022d0:	6213      	str	r3, [r2, #32]
 80022d2:	4b67      	ldr	r3, [pc, #412]	; (8002470 <HAL_RCC_OscConfig+0x4c4>)
 80022d4:	6a1b      	ldr	r3, [r3, #32]
 80022d6:	4a66      	ldr	r2, [pc, #408]	; (8002470 <HAL_RCC_OscConfig+0x4c4>)
 80022d8:	f023 0304 	bic.w	r3, r3, #4
 80022dc:	6213      	str	r3, [r2, #32]
 80022de:	e01c      	b.n	800231a <HAL_RCC_OscConfig+0x36e>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	2b05      	cmp	r3, #5
 80022e6:	d10c      	bne.n	8002302 <HAL_RCC_OscConfig+0x356>
 80022e8:	4b61      	ldr	r3, [pc, #388]	; (8002470 <HAL_RCC_OscConfig+0x4c4>)
 80022ea:	6a1b      	ldr	r3, [r3, #32]
 80022ec:	4a60      	ldr	r2, [pc, #384]	; (8002470 <HAL_RCC_OscConfig+0x4c4>)
 80022ee:	f043 0304 	orr.w	r3, r3, #4
 80022f2:	6213      	str	r3, [r2, #32]
 80022f4:	4b5e      	ldr	r3, [pc, #376]	; (8002470 <HAL_RCC_OscConfig+0x4c4>)
 80022f6:	6a1b      	ldr	r3, [r3, #32]
 80022f8:	4a5d      	ldr	r2, [pc, #372]	; (8002470 <HAL_RCC_OscConfig+0x4c4>)
 80022fa:	f043 0301 	orr.w	r3, r3, #1
 80022fe:	6213      	str	r3, [r2, #32]
 8002300:	e00b      	b.n	800231a <HAL_RCC_OscConfig+0x36e>
 8002302:	4b5b      	ldr	r3, [pc, #364]	; (8002470 <HAL_RCC_OscConfig+0x4c4>)
 8002304:	6a1b      	ldr	r3, [r3, #32]
 8002306:	4a5a      	ldr	r2, [pc, #360]	; (8002470 <HAL_RCC_OscConfig+0x4c4>)
 8002308:	f023 0301 	bic.w	r3, r3, #1
 800230c:	6213      	str	r3, [r2, #32]
 800230e:	4b58      	ldr	r3, [pc, #352]	; (8002470 <HAL_RCC_OscConfig+0x4c4>)
 8002310:	6a1b      	ldr	r3, [r3, #32]
 8002312:	4a57      	ldr	r2, [pc, #348]	; (8002470 <HAL_RCC_OscConfig+0x4c4>)
 8002314:	f023 0304 	bic.w	r3, r3, #4
 8002318:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	68db      	ldr	r3, [r3, #12]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d015      	beq.n	800234e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002322:	f7fe fc4f 	bl	8000bc4 <HAL_GetTick>
 8002326:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002328:	e00a      	b.n	8002340 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800232a:	f7fe fc4b 	bl	8000bc4 <HAL_GetTick>
 800232e:	4602      	mov	r2, r0
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	f241 3288 	movw	r2, #5000	; 0x1388
 8002338:	4293      	cmp	r3, r2
 800233a:	d901      	bls.n	8002340 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800233c:	2303      	movs	r3, #3
 800233e:	e0b1      	b.n	80024a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002340:	4b4b      	ldr	r3, [pc, #300]	; (8002470 <HAL_RCC_OscConfig+0x4c4>)
 8002342:	6a1b      	ldr	r3, [r3, #32]
 8002344:	f003 0302 	and.w	r3, r3, #2
 8002348:	2b00      	cmp	r3, #0
 800234a:	d0ee      	beq.n	800232a <HAL_RCC_OscConfig+0x37e>
 800234c:	e014      	b.n	8002378 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800234e:	f7fe fc39 	bl	8000bc4 <HAL_GetTick>
 8002352:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002354:	e00a      	b.n	800236c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002356:	f7fe fc35 	bl	8000bc4 <HAL_GetTick>
 800235a:	4602      	mov	r2, r0
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	f241 3288 	movw	r2, #5000	; 0x1388
 8002364:	4293      	cmp	r3, r2
 8002366:	d901      	bls.n	800236c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002368:	2303      	movs	r3, #3
 800236a:	e09b      	b.n	80024a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800236c:	4b40      	ldr	r3, [pc, #256]	; (8002470 <HAL_RCC_OscConfig+0x4c4>)
 800236e:	6a1b      	ldr	r3, [r3, #32]
 8002370:	f003 0302 	and.w	r3, r3, #2
 8002374:	2b00      	cmp	r3, #0
 8002376:	d1ee      	bne.n	8002356 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002378:	7dfb      	ldrb	r3, [r7, #23]
 800237a:	2b01      	cmp	r3, #1
 800237c:	d105      	bne.n	800238a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800237e:	4b3c      	ldr	r3, [pc, #240]	; (8002470 <HAL_RCC_OscConfig+0x4c4>)
 8002380:	69db      	ldr	r3, [r3, #28]
 8002382:	4a3b      	ldr	r2, [pc, #236]	; (8002470 <HAL_RCC_OscConfig+0x4c4>)
 8002384:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002388:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	69db      	ldr	r3, [r3, #28]
 800238e:	2b00      	cmp	r3, #0
 8002390:	f000 8087 	beq.w	80024a2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002394:	4b36      	ldr	r3, [pc, #216]	; (8002470 <HAL_RCC_OscConfig+0x4c4>)
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f003 030c 	and.w	r3, r3, #12
 800239c:	2b08      	cmp	r3, #8
 800239e:	d061      	beq.n	8002464 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	69db      	ldr	r3, [r3, #28]
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d146      	bne.n	8002436 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023a8:	4b33      	ldr	r3, [pc, #204]	; (8002478 <HAL_RCC_OscConfig+0x4cc>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ae:	f7fe fc09 	bl	8000bc4 <HAL_GetTick>
 80023b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023b4:	e008      	b.n	80023c8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023b6:	f7fe fc05 	bl	8000bc4 <HAL_GetTick>
 80023ba:	4602      	mov	r2, r0
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d901      	bls.n	80023c8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80023c4:	2303      	movs	r3, #3
 80023c6:	e06d      	b.n	80024a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023c8:	4b29      	ldr	r3, [pc, #164]	; (8002470 <HAL_RCC_OscConfig+0x4c4>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d1f0      	bne.n	80023b6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6a1b      	ldr	r3, [r3, #32]
 80023d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023dc:	d108      	bne.n	80023f0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80023de:	4b24      	ldr	r3, [pc, #144]	; (8002470 <HAL_RCC_OscConfig+0x4c4>)
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	4921      	ldr	r1, [pc, #132]	; (8002470 <HAL_RCC_OscConfig+0x4c4>)
 80023ec:	4313      	orrs	r3, r2
 80023ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023f0:	4b1f      	ldr	r3, [pc, #124]	; (8002470 <HAL_RCC_OscConfig+0x4c4>)
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6a19      	ldr	r1, [r3, #32]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002400:	430b      	orrs	r3, r1
 8002402:	491b      	ldr	r1, [pc, #108]	; (8002470 <HAL_RCC_OscConfig+0x4c4>)
 8002404:	4313      	orrs	r3, r2
 8002406:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002408:	4b1b      	ldr	r3, [pc, #108]	; (8002478 <HAL_RCC_OscConfig+0x4cc>)
 800240a:	2201      	movs	r2, #1
 800240c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800240e:	f7fe fbd9 	bl	8000bc4 <HAL_GetTick>
 8002412:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002414:	e008      	b.n	8002428 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002416:	f7fe fbd5 	bl	8000bc4 <HAL_GetTick>
 800241a:	4602      	mov	r2, r0
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	2b02      	cmp	r3, #2
 8002422:	d901      	bls.n	8002428 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e03d      	b.n	80024a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002428:	4b11      	ldr	r3, [pc, #68]	; (8002470 <HAL_RCC_OscConfig+0x4c4>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d0f0      	beq.n	8002416 <HAL_RCC_OscConfig+0x46a>
 8002434:	e035      	b.n	80024a2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002436:	4b10      	ldr	r3, [pc, #64]	; (8002478 <HAL_RCC_OscConfig+0x4cc>)
 8002438:	2200      	movs	r2, #0
 800243a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800243c:	f7fe fbc2 	bl	8000bc4 <HAL_GetTick>
 8002440:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002442:	e008      	b.n	8002456 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002444:	f7fe fbbe 	bl	8000bc4 <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	2b02      	cmp	r3, #2
 8002450:	d901      	bls.n	8002456 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e026      	b.n	80024a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002456:	4b06      	ldr	r3, [pc, #24]	; (8002470 <HAL_RCC_OscConfig+0x4c4>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d1f0      	bne.n	8002444 <HAL_RCC_OscConfig+0x498>
 8002462:	e01e      	b.n	80024a2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	69db      	ldr	r3, [r3, #28]
 8002468:	2b01      	cmp	r3, #1
 800246a:	d107      	bne.n	800247c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e019      	b.n	80024a4 <HAL_RCC_OscConfig+0x4f8>
 8002470:	40021000 	.word	0x40021000
 8002474:	40007000 	.word	0x40007000
 8002478:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800247c:	4b0b      	ldr	r3, [pc, #44]	; (80024ac <HAL_RCC_OscConfig+0x500>)
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6a1b      	ldr	r3, [r3, #32]
 800248c:	429a      	cmp	r2, r3
 800248e:	d106      	bne.n	800249e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800249a:	429a      	cmp	r2, r3
 800249c:	d001      	beq.n	80024a2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e000      	b.n	80024a4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80024a2:	2300      	movs	r3, #0
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3718      	adds	r7, #24
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	40021000 	.word	0x40021000

080024b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d101      	bne.n	80024c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e0d0      	b.n	8002666 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024c4:	4b6a      	ldr	r3, [pc, #424]	; (8002670 <HAL_RCC_ClockConfig+0x1c0>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 0307 	and.w	r3, r3, #7
 80024cc:	683a      	ldr	r2, [r7, #0]
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d910      	bls.n	80024f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024d2:	4b67      	ldr	r3, [pc, #412]	; (8002670 <HAL_RCC_ClockConfig+0x1c0>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f023 0207 	bic.w	r2, r3, #7
 80024da:	4965      	ldr	r1, [pc, #404]	; (8002670 <HAL_RCC_ClockConfig+0x1c0>)
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	4313      	orrs	r3, r2
 80024e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024e2:	4b63      	ldr	r3, [pc, #396]	; (8002670 <HAL_RCC_ClockConfig+0x1c0>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0307 	and.w	r3, r3, #7
 80024ea:	683a      	ldr	r2, [r7, #0]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d001      	beq.n	80024f4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e0b8      	b.n	8002666 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0302 	and.w	r3, r3, #2
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d020      	beq.n	8002542 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 0304 	and.w	r3, r3, #4
 8002508:	2b00      	cmp	r3, #0
 800250a:	d005      	beq.n	8002518 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800250c:	4b59      	ldr	r3, [pc, #356]	; (8002674 <HAL_RCC_ClockConfig+0x1c4>)
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	4a58      	ldr	r2, [pc, #352]	; (8002674 <HAL_RCC_ClockConfig+0x1c4>)
 8002512:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002516:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0308 	and.w	r3, r3, #8
 8002520:	2b00      	cmp	r3, #0
 8002522:	d005      	beq.n	8002530 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002524:	4b53      	ldr	r3, [pc, #332]	; (8002674 <HAL_RCC_ClockConfig+0x1c4>)
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	4a52      	ldr	r2, [pc, #328]	; (8002674 <HAL_RCC_ClockConfig+0x1c4>)
 800252a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800252e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002530:	4b50      	ldr	r3, [pc, #320]	; (8002674 <HAL_RCC_ClockConfig+0x1c4>)
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	494d      	ldr	r1, [pc, #308]	; (8002674 <HAL_RCC_ClockConfig+0x1c4>)
 800253e:	4313      	orrs	r3, r2
 8002540:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0301 	and.w	r3, r3, #1
 800254a:	2b00      	cmp	r3, #0
 800254c:	d040      	beq.n	80025d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	2b01      	cmp	r3, #1
 8002554:	d107      	bne.n	8002566 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002556:	4b47      	ldr	r3, [pc, #284]	; (8002674 <HAL_RCC_ClockConfig+0x1c4>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d115      	bne.n	800258e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e07f      	b.n	8002666 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	2b02      	cmp	r3, #2
 800256c:	d107      	bne.n	800257e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800256e:	4b41      	ldr	r3, [pc, #260]	; (8002674 <HAL_RCC_ClockConfig+0x1c4>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d109      	bne.n	800258e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e073      	b.n	8002666 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800257e:	4b3d      	ldr	r3, [pc, #244]	; (8002674 <HAL_RCC_ClockConfig+0x1c4>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0302 	and.w	r3, r3, #2
 8002586:	2b00      	cmp	r3, #0
 8002588:	d101      	bne.n	800258e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e06b      	b.n	8002666 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800258e:	4b39      	ldr	r3, [pc, #228]	; (8002674 <HAL_RCC_ClockConfig+0x1c4>)
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f023 0203 	bic.w	r2, r3, #3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	4936      	ldr	r1, [pc, #216]	; (8002674 <HAL_RCC_ClockConfig+0x1c4>)
 800259c:	4313      	orrs	r3, r2
 800259e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025a0:	f7fe fb10 	bl	8000bc4 <HAL_GetTick>
 80025a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025a6:	e00a      	b.n	80025be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025a8:	f7fe fb0c 	bl	8000bc4 <HAL_GetTick>
 80025ac:	4602      	mov	r2, r0
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d901      	bls.n	80025be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	e053      	b.n	8002666 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025be:	4b2d      	ldr	r3, [pc, #180]	; (8002674 <HAL_RCC_ClockConfig+0x1c4>)
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	f003 020c 	and.w	r2, r3, #12
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d1eb      	bne.n	80025a8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025d0:	4b27      	ldr	r3, [pc, #156]	; (8002670 <HAL_RCC_ClockConfig+0x1c0>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0307 	and.w	r3, r3, #7
 80025d8:	683a      	ldr	r2, [r7, #0]
 80025da:	429a      	cmp	r2, r3
 80025dc:	d210      	bcs.n	8002600 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025de:	4b24      	ldr	r3, [pc, #144]	; (8002670 <HAL_RCC_ClockConfig+0x1c0>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f023 0207 	bic.w	r2, r3, #7
 80025e6:	4922      	ldr	r1, [pc, #136]	; (8002670 <HAL_RCC_ClockConfig+0x1c0>)
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ee:	4b20      	ldr	r3, [pc, #128]	; (8002670 <HAL_RCC_ClockConfig+0x1c0>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0307 	and.w	r3, r3, #7
 80025f6:	683a      	ldr	r2, [r7, #0]
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d001      	beq.n	8002600 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e032      	b.n	8002666 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0304 	and.w	r3, r3, #4
 8002608:	2b00      	cmp	r3, #0
 800260a:	d008      	beq.n	800261e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800260c:	4b19      	ldr	r3, [pc, #100]	; (8002674 <HAL_RCC_ClockConfig+0x1c4>)
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	4916      	ldr	r1, [pc, #88]	; (8002674 <HAL_RCC_ClockConfig+0x1c4>)
 800261a:	4313      	orrs	r3, r2
 800261c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0308 	and.w	r3, r3, #8
 8002626:	2b00      	cmp	r3, #0
 8002628:	d009      	beq.n	800263e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800262a:	4b12      	ldr	r3, [pc, #72]	; (8002674 <HAL_RCC_ClockConfig+0x1c4>)
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	691b      	ldr	r3, [r3, #16]
 8002636:	00db      	lsls	r3, r3, #3
 8002638:	490e      	ldr	r1, [pc, #56]	; (8002674 <HAL_RCC_ClockConfig+0x1c4>)
 800263a:	4313      	orrs	r3, r2
 800263c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800263e:	f000 f821 	bl	8002684 <HAL_RCC_GetSysClockFreq>
 8002642:	4602      	mov	r2, r0
 8002644:	4b0b      	ldr	r3, [pc, #44]	; (8002674 <HAL_RCC_ClockConfig+0x1c4>)
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	091b      	lsrs	r3, r3, #4
 800264a:	f003 030f 	and.w	r3, r3, #15
 800264e:	490a      	ldr	r1, [pc, #40]	; (8002678 <HAL_RCC_ClockConfig+0x1c8>)
 8002650:	5ccb      	ldrb	r3, [r1, r3]
 8002652:	fa22 f303 	lsr.w	r3, r2, r3
 8002656:	4a09      	ldr	r2, [pc, #36]	; (800267c <HAL_RCC_ClockConfig+0x1cc>)
 8002658:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800265a:	4b09      	ldr	r3, [pc, #36]	; (8002680 <HAL_RCC_ClockConfig+0x1d0>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4618      	mov	r0, r3
 8002660:	f7fe fa6e 	bl	8000b40 <HAL_InitTick>

  return HAL_OK;
 8002664:	2300      	movs	r3, #0
}
 8002666:	4618      	mov	r0, r3
 8002668:	3710      	adds	r7, #16
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	40022000 	.word	0x40022000
 8002674:	40021000 	.word	0x40021000
 8002678:	08004740 	.word	0x08004740
 800267c:	20000000 	.word	0x20000000
 8002680:	20000004 	.word	0x20000004

08002684 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002684:	b490      	push	{r4, r7}
 8002686:	b08a      	sub	sp, #40	; 0x28
 8002688:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800268a:	4b29      	ldr	r3, [pc, #164]	; (8002730 <HAL_RCC_GetSysClockFreq+0xac>)
 800268c:	1d3c      	adds	r4, r7, #4
 800268e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002690:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002694:	f240 2301 	movw	r3, #513	; 0x201
 8002698:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800269a:	2300      	movs	r3, #0
 800269c:	61fb      	str	r3, [r7, #28]
 800269e:	2300      	movs	r3, #0
 80026a0:	61bb      	str	r3, [r7, #24]
 80026a2:	2300      	movs	r3, #0
 80026a4:	627b      	str	r3, [r7, #36]	; 0x24
 80026a6:	2300      	movs	r3, #0
 80026a8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80026aa:	2300      	movs	r3, #0
 80026ac:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80026ae:	4b21      	ldr	r3, [pc, #132]	; (8002734 <HAL_RCC_GetSysClockFreq+0xb0>)
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	f003 030c 	and.w	r3, r3, #12
 80026ba:	2b04      	cmp	r3, #4
 80026bc:	d002      	beq.n	80026c4 <HAL_RCC_GetSysClockFreq+0x40>
 80026be:	2b08      	cmp	r3, #8
 80026c0:	d003      	beq.n	80026ca <HAL_RCC_GetSysClockFreq+0x46>
 80026c2:	e02b      	b.n	800271c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80026c4:	4b1c      	ldr	r3, [pc, #112]	; (8002738 <HAL_RCC_GetSysClockFreq+0xb4>)
 80026c6:	623b      	str	r3, [r7, #32]
      break;
 80026c8:	e02b      	b.n	8002722 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	0c9b      	lsrs	r3, r3, #18
 80026ce:	f003 030f 	and.w	r3, r3, #15
 80026d2:	3328      	adds	r3, #40	; 0x28
 80026d4:	443b      	add	r3, r7
 80026d6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80026da:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d012      	beq.n	800270c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80026e6:	4b13      	ldr	r3, [pc, #76]	; (8002734 <HAL_RCC_GetSysClockFreq+0xb0>)
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	0c5b      	lsrs	r3, r3, #17
 80026ec:	f003 0301 	and.w	r3, r3, #1
 80026f0:	3328      	adds	r3, #40	; 0x28
 80026f2:	443b      	add	r3, r7
 80026f4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80026f8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	4a0e      	ldr	r2, [pc, #56]	; (8002738 <HAL_RCC_GetSysClockFreq+0xb4>)
 80026fe:	fb03 f202 	mul.w	r2, r3, r2
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	fbb2 f3f3 	udiv	r3, r2, r3
 8002708:	627b      	str	r3, [r7, #36]	; 0x24
 800270a:	e004      	b.n	8002716 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	4a0b      	ldr	r2, [pc, #44]	; (800273c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002710:	fb02 f303 	mul.w	r3, r2, r3
 8002714:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002718:	623b      	str	r3, [r7, #32]
      break;
 800271a:	e002      	b.n	8002722 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800271c:	4b06      	ldr	r3, [pc, #24]	; (8002738 <HAL_RCC_GetSysClockFreq+0xb4>)
 800271e:	623b      	str	r3, [r7, #32]
      break;
 8002720:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002722:	6a3b      	ldr	r3, [r7, #32]
}
 8002724:	4618      	mov	r0, r3
 8002726:	3728      	adds	r7, #40	; 0x28
 8002728:	46bd      	mov	sp, r7
 800272a:	bc90      	pop	{r4, r7}
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	08004730 	.word	0x08004730
 8002734:	40021000 	.word	0x40021000
 8002738:	007a1200 	.word	0x007a1200
 800273c:	003d0900 	.word	0x003d0900

08002740 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002740:	b480      	push	{r7}
 8002742:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002744:	4b02      	ldr	r3, [pc, #8]	; (8002750 <HAL_RCC_GetHCLKFreq+0x10>)
 8002746:	681b      	ldr	r3, [r3, #0]
}
 8002748:	4618      	mov	r0, r3
 800274a:	46bd      	mov	sp, r7
 800274c:	bc80      	pop	{r7}
 800274e:	4770      	bx	lr
 8002750:	20000000 	.word	0x20000000

08002754 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002758:	f7ff fff2 	bl	8002740 <HAL_RCC_GetHCLKFreq>
 800275c:	4602      	mov	r2, r0
 800275e:	4b05      	ldr	r3, [pc, #20]	; (8002774 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	0a1b      	lsrs	r3, r3, #8
 8002764:	f003 0307 	and.w	r3, r3, #7
 8002768:	4903      	ldr	r1, [pc, #12]	; (8002778 <HAL_RCC_GetPCLK1Freq+0x24>)
 800276a:	5ccb      	ldrb	r3, [r1, r3]
 800276c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002770:	4618      	mov	r0, r3
 8002772:	bd80      	pop	{r7, pc}
 8002774:	40021000 	.word	0x40021000
 8002778:	08004750 	.word	0x08004750

0800277c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002780:	f7ff ffde 	bl	8002740 <HAL_RCC_GetHCLKFreq>
 8002784:	4602      	mov	r2, r0
 8002786:	4b05      	ldr	r3, [pc, #20]	; (800279c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	0adb      	lsrs	r3, r3, #11
 800278c:	f003 0307 	and.w	r3, r3, #7
 8002790:	4903      	ldr	r1, [pc, #12]	; (80027a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002792:	5ccb      	ldrb	r3, [r1, r3]
 8002794:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002798:	4618      	mov	r0, r3
 800279a:	bd80      	pop	{r7, pc}
 800279c:	40021000 	.word	0x40021000
 80027a0:	08004750 	.word	0x08004750

080027a4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b085      	sub	sp, #20
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80027ac:	4b0a      	ldr	r3, [pc, #40]	; (80027d8 <RCC_Delay+0x34>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a0a      	ldr	r2, [pc, #40]	; (80027dc <RCC_Delay+0x38>)
 80027b2:	fba2 2303 	umull	r2, r3, r2, r3
 80027b6:	0a5b      	lsrs	r3, r3, #9
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	fb02 f303 	mul.w	r3, r2, r3
 80027be:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80027c0:	bf00      	nop
  }
  while (Delay --);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	1e5a      	subs	r2, r3, #1
 80027c6:	60fa      	str	r2, [r7, #12]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d1f9      	bne.n	80027c0 <RCC_Delay+0x1c>
}
 80027cc:	bf00      	nop
 80027ce:	bf00      	nop
 80027d0:	3714      	adds	r7, #20
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bc80      	pop	{r7}
 80027d6:	4770      	bx	lr
 80027d8:	20000000 	.word	0x20000000
 80027dc:	10624dd3 	.word	0x10624dd3

080027e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b086      	sub	sp, #24
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80027e8:	2300      	movs	r3, #0
 80027ea:	613b      	str	r3, [r7, #16]
 80027ec:	2300      	movs	r3, #0
 80027ee:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0301 	and.w	r3, r3, #1
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d07d      	beq.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80027fc:	2300      	movs	r3, #0
 80027fe:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002800:	4b4f      	ldr	r3, [pc, #316]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002802:	69db      	ldr	r3, [r3, #28]
 8002804:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d10d      	bne.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800280c:	4b4c      	ldr	r3, [pc, #304]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800280e:	69db      	ldr	r3, [r3, #28]
 8002810:	4a4b      	ldr	r2, [pc, #300]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002812:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002816:	61d3      	str	r3, [r2, #28]
 8002818:	4b49      	ldr	r3, [pc, #292]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800281a:	69db      	ldr	r3, [r3, #28]
 800281c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002820:	60bb      	str	r3, [r7, #8]
 8002822:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002824:	2301      	movs	r3, #1
 8002826:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002828:	4b46      	ldr	r3, [pc, #280]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002830:	2b00      	cmp	r3, #0
 8002832:	d118      	bne.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002834:	4b43      	ldr	r3, [pc, #268]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a42      	ldr	r2, [pc, #264]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800283a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800283e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002840:	f7fe f9c0 	bl	8000bc4 <HAL_GetTick>
 8002844:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002846:	e008      	b.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002848:	f7fe f9bc 	bl	8000bc4 <HAL_GetTick>
 800284c:	4602      	mov	r2, r0
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	2b64      	cmp	r3, #100	; 0x64
 8002854:	d901      	bls.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	e06d      	b.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800285a:	4b3a      	ldr	r3, [pc, #232]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002862:	2b00      	cmp	r3, #0
 8002864:	d0f0      	beq.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002866:	4b36      	ldr	r3, [pc, #216]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002868:	6a1b      	ldr	r3, [r3, #32]
 800286a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800286e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d02e      	beq.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800287e:	68fa      	ldr	r2, [r7, #12]
 8002880:	429a      	cmp	r2, r3
 8002882:	d027      	beq.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002884:	4b2e      	ldr	r3, [pc, #184]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002886:	6a1b      	ldr	r3, [r3, #32]
 8002888:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800288c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800288e:	4b2e      	ldr	r3, [pc, #184]	; (8002948 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002890:	2201      	movs	r2, #1
 8002892:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002894:	4b2c      	ldr	r3, [pc, #176]	; (8002948 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002896:	2200      	movs	r2, #0
 8002898:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800289a:	4a29      	ldr	r2, [pc, #164]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	f003 0301 	and.w	r3, r3, #1
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d014      	beq.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028aa:	f7fe f98b 	bl	8000bc4 <HAL_GetTick>
 80028ae:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028b0:	e00a      	b.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028b2:	f7fe f987 	bl	8000bc4 <HAL_GetTick>
 80028b6:	4602      	mov	r2, r0
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d901      	bls.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80028c4:	2303      	movs	r3, #3
 80028c6:	e036      	b.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028c8:	4b1d      	ldr	r3, [pc, #116]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028ca:	6a1b      	ldr	r3, [r3, #32]
 80028cc:	f003 0302 	and.w	r3, r3, #2
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d0ee      	beq.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028d4:	4b1a      	ldr	r3, [pc, #104]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028d6:	6a1b      	ldr	r3, [r3, #32]
 80028d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	4917      	ldr	r1, [pc, #92]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028e2:	4313      	orrs	r3, r2
 80028e4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80028e6:	7dfb      	ldrb	r3, [r7, #23]
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d105      	bne.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028ec:	4b14      	ldr	r3, [pc, #80]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028ee:	69db      	ldr	r3, [r3, #28]
 80028f0:	4a13      	ldr	r2, [pc, #76]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028f6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0302 	and.w	r3, r3, #2
 8002900:	2b00      	cmp	r3, #0
 8002902:	d008      	beq.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002904:	4b0e      	ldr	r3, [pc, #56]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	490b      	ldr	r1, [pc, #44]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002912:	4313      	orrs	r3, r2
 8002914:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0310 	and.w	r3, r3, #16
 800291e:	2b00      	cmp	r3, #0
 8002920:	d008      	beq.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002922:	4b07      	ldr	r3, [pc, #28]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	4904      	ldr	r1, [pc, #16]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002930:	4313      	orrs	r3, r2
 8002932:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002934:	2300      	movs	r3, #0
}
 8002936:	4618      	mov	r0, r3
 8002938:	3718      	adds	r7, #24
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	40021000 	.word	0x40021000
 8002944:	40007000 	.word	0x40007000
 8002948:	42420440 	.word	0x42420440

0800294c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b082      	sub	sp, #8
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d101      	bne.n	800295e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e041      	b.n	80029e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002964:	b2db      	uxtb	r3, r3
 8002966:	2b00      	cmp	r3, #0
 8002968:	d106      	bne.n	8002978 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f7fd ff38 	bl	80007e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2202      	movs	r2, #2
 800297c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	3304      	adds	r3, #4
 8002988:	4619      	mov	r1, r3
 800298a:	4610      	mov	r0, r2
 800298c:	f000 fa70 	bl	8002e70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2201      	movs	r2, #1
 8002994:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2201      	movs	r2, #1
 800299c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2201      	movs	r2, #1
 80029a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2201      	movs	r2, #1
 80029ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2201      	movs	r2, #1
 80029b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2201      	movs	r2, #1
 80029c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2201      	movs	r2, #1
 80029cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2201      	movs	r2, #1
 80029dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029e0:	2300      	movs	r3, #0
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3708      	adds	r7, #8
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
	...

080029ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b085      	sub	sp, #20
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d001      	beq.n	8002a04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e03a      	b.n	8002a7a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2202      	movs	r2, #2
 8002a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	68da      	ldr	r2, [r3, #12]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f042 0201 	orr.w	r2, r2, #1
 8002a1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a18      	ldr	r2, [pc, #96]	; (8002a84 <HAL_TIM_Base_Start_IT+0x98>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d00e      	beq.n	8002a44 <HAL_TIM_Base_Start_IT+0x58>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a2e:	d009      	beq.n	8002a44 <HAL_TIM_Base_Start_IT+0x58>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a14      	ldr	r2, [pc, #80]	; (8002a88 <HAL_TIM_Base_Start_IT+0x9c>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d004      	beq.n	8002a44 <HAL_TIM_Base_Start_IT+0x58>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a13      	ldr	r2, [pc, #76]	; (8002a8c <HAL_TIM_Base_Start_IT+0xa0>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d111      	bne.n	8002a68 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	f003 0307 	and.w	r3, r3, #7
 8002a4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2b06      	cmp	r3, #6
 8002a54:	d010      	beq.n	8002a78 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f042 0201 	orr.w	r2, r2, #1
 8002a64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a66:	e007      	b.n	8002a78 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f042 0201 	orr.w	r2, r2, #1
 8002a76:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a78:	2300      	movs	r3, #0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3714      	adds	r7, #20
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bc80      	pop	{r7}
 8002a82:	4770      	bx	lr
 8002a84:	40012c00 	.word	0x40012c00
 8002a88:	40000400 	.word	0x40000400
 8002a8c:	40000800 	.word	0x40000800

08002a90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	f003 0302 	and.w	r3, r3, #2
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	d122      	bne.n	8002aec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	f003 0302 	and.w	r3, r3, #2
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	d11b      	bne.n	8002aec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f06f 0202 	mvn.w	r2, #2
 8002abc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	699b      	ldr	r3, [r3, #24]
 8002aca:	f003 0303 	and.w	r3, r3, #3
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d003      	beq.n	8002ada <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f000 f9b1 	bl	8002e3a <HAL_TIM_IC_CaptureCallback>
 8002ad8:	e005      	b.n	8002ae6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f000 f9a4 	bl	8002e28 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	f000 f9b3 	bl	8002e4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	691b      	ldr	r3, [r3, #16]
 8002af2:	f003 0304 	and.w	r3, r3, #4
 8002af6:	2b04      	cmp	r3, #4
 8002af8:	d122      	bne.n	8002b40 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	f003 0304 	and.w	r3, r3, #4
 8002b04:	2b04      	cmp	r3, #4
 8002b06:	d11b      	bne.n	8002b40 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f06f 0204 	mvn.w	r2, #4
 8002b10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2202      	movs	r2, #2
 8002b16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	699b      	ldr	r3, [r3, #24]
 8002b1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d003      	beq.n	8002b2e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f000 f987 	bl	8002e3a <HAL_TIM_IC_CaptureCallback>
 8002b2c:	e005      	b.n	8002b3a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f000 f97a 	bl	8002e28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f000 f989 	bl	8002e4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	691b      	ldr	r3, [r3, #16]
 8002b46:	f003 0308 	and.w	r3, r3, #8
 8002b4a:	2b08      	cmp	r3, #8
 8002b4c:	d122      	bne.n	8002b94 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	f003 0308 	and.w	r3, r3, #8
 8002b58:	2b08      	cmp	r3, #8
 8002b5a:	d11b      	bne.n	8002b94 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f06f 0208 	mvn.w	r2, #8
 8002b64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2204      	movs	r2, #4
 8002b6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	69db      	ldr	r3, [r3, #28]
 8002b72:	f003 0303 	and.w	r3, r3, #3
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d003      	beq.n	8002b82 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f000 f95d 	bl	8002e3a <HAL_TIM_IC_CaptureCallback>
 8002b80:	e005      	b.n	8002b8e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f000 f950 	bl	8002e28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f000 f95f 	bl	8002e4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2200      	movs	r2, #0
 8002b92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	691b      	ldr	r3, [r3, #16]
 8002b9a:	f003 0310 	and.w	r3, r3, #16
 8002b9e:	2b10      	cmp	r3, #16
 8002ba0:	d122      	bne.n	8002be8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	f003 0310 	and.w	r3, r3, #16
 8002bac:	2b10      	cmp	r3, #16
 8002bae:	d11b      	bne.n	8002be8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f06f 0210 	mvn.w	r2, #16
 8002bb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2208      	movs	r2, #8
 8002bbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	69db      	ldr	r3, [r3, #28]
 8002bc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d003      	beq.n	8002bd6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f000 f933 	bl	8002e3a <HAL_TIM_IC_CaptureCallback>
 8002bd4:	e005      	b.n	8002be2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f000 f926 	bl	8002e28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f000 f935 	bl	8002e4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	691b      	ldr	r3, [r3, #16]
 8002bee:	f003 0301 	and.w	r3, r3, #1
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d10e      	bne.n	8002c14 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	f003 0301 	and.w	r3, r3, #1
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d107      	bne.n	8002c14 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f06f 0201 	mvn.w	r2, #1
 8002c0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f7fd fb50 	bl	80002b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	691b      	ldr	r3, [r3, #16]
 8002c1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c1e:	2b80      	cmp	r3, #128	; 0x80
 8002c20:	d10e      	bne.n	8002c40 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c2c:	2b80      	cmp	r3, #128	; 0x80
 8002c2e:	d107      	bne.n	8002c40 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f000 fa77 	bl	800312e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	691b      	ldr	r3, [r3, #16]
 8002c46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c4a:	2b40      	cmp	r3, #64	; 0x40
 8002c4c:	d10e      	bne.n	8002c6c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c58:	2b40      	cmp	r3, #64	; 0x40
 8002c5a:	d107      	bne.n	8002c6c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f000 f8f9 	bl	8002e5e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	691b      	ldr	r3, [r3, #16]
 8002c72:	f003 0320 	and.w	r3, r3, #32
 8002c76:	2b20      	cmp	r3, #32
 8002c78:	d10e      	bne.n	8002c98 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	f003 0320 	and.w	r3, r3, #32
 8002c84:	2b20      	cmp	r3, #32
 8002c86:	d107      	bne.n	8002c98 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f06f 0220 	mvn.w	r2, #32
 8002c90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f000 fa42 	bl	800311c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c98:	bf00      	nop
 8002c9a:	3708      	adds	r7, #8
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d101      	bne.n	8002cb8 <HAL_TIM_ConfigClockSource+0x18>
 8002cb4:	2302      	movs	r3, #2
 8002cb6:	e0b3      	b.n	8002e20 <HAL_TIM_ConfigClockSource+0x180>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2202      	movs	r2, #2
 8002cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002cd6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002cde:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	68fa      	ldr	r2, [r7, #12]
 8002ce6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cf0:	d03e      	beq.n	8002d70 <HAL_TIM_ConfigClockSource+0xd0>
 8002cf2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cf6:	f200 8087 	bhi.w	8002e08 <HAL_TIM_ConfigClockSource+0x168>
 8002cfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cfe:	f000 8085 	beq.w	8002e0c <HAL_TIM_ConfigClockSource+0x16c>
 8002d02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d06:	d87f      	bhi.n	8002e08 <HAL_TIM_ConfigClockSource+0x168>
 8002d08:	2b70      	cmp	r3, #112	; 0x70
 8002d0a:	d01a      	beq.n	8002d42 <HAL_TIM_ConfigClockSource+0xa2>
 8002d0c:	2b70      	cmp	r3, #112	; 0x70
 8002d0e:	d87b      	bhi.n	8002e08 <HAL_TIM_ConfigClockSource+0x168>
 8002d10:	2b60      	cmp	r3, #96	; 0x60
 8002d12:	d050      	beq.n	8002db6 <HAL_TIM_ConfigClockSource+0x116>
 8002d14:	2b60      	cmp	r3, #96	; 0x60
 8002d16:	d877      	bhi.n	8002e08 <HAL_TIM_ConfigClockSource+0x168>
 8002d18:	2b50      	cmp	r3, #80	; 0x50
 8002d1a:	d03c      	beq.n	8002d96 <HAL_TIM_ConfigClockSource+0xf6>
 8002d1c:	2b50      	cmp	r3, #80	; 0x50
 8002d1e:	d873      	bhi.n	8002e08 <HAL_TIM_ConfigClockSource+0x168>
 8002d20:	2b40      	cmp	r3, #64	; 0x40
 8002d22:	d058      	beq.n	8002dd6 <HAL_TIM_ConfigClockSource+0x136>
 8002d24:	2b40      	cmp	r3, #64	; 0x40
 8002d26:	d86f      	bhi.n	8002e08 <HAL_TIM_ConfigClockSource+0x168>
 8002d28:	2b30      	cmp	r3, #48	; 0x30
 8002d2a:	d064      	beq.n	8002df6 <HAL_TIM_ConfigClockSource+0x156>
 8002d2c:	2b30      	cmp	r3, #48	; 0x30
 8002d2e:	d86b      	bhi.n	8002e08 <HAL_TIM_ConfigClockSource+0x168>
 8002d30:	2b20      	cmp	r3, #32
 8002d32:	d060      	beq.n	8002df6 <HAL_TIM_ConfigClockSource+0x156>
 8002d34:	2b20      	cmp	r3, #32
 8002d36:	d867      	bhi.n	8002e08 <HAL_TIM_ConfigClockSource+0x168>
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d05c      	beq.n	8002df6 <HAL_TIM_ConfigClockSource+0x156>
 8002d3c:	2b10      	cmp	r3, #16
 8002d3e:	d05a      	beq.n	8002df6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002d40:	e062      	b.n	8002e08 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6818      	ldr	r0, [r3, #0]
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	6899      	ldr	r1, [r3, #8]
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	685a      	ldr	r2, [r3, #4]
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	f000 f966 	bl	8003022 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002d64:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	68fa      	ldr	r2, [r7, #12]
 8002d6c:	609a      	str	r2, [r3, #8]
      break;
 8002d6e:	e04e      	b.n	8002e0e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6818      	ldr	r0, [r3, #0]
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	6899      	ldr	r1, [r3, #8]
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	685a      	ldr	r2, [r3, #4]
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	f000 f94f 	bl	8003022 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	689a      	ldr	r2, [r3, #8]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d92:	609a      	str	r2, [r3, #8]
      break;
 8002d94:	e03b      	b.n	8002e0e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6818      	ldr	r0, [r3, #0]
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	6859      	ldr	r1, [r3, #4]
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	461a      	mov	r2, r3
 8002da4:	f000 f8c6 	bl	8002f34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	2150      	movs	r1, #80	; 0x50
 8002dae:	4618      	mov	r0, r3
 8002db0:	f000 f91d 	bl	8002fee <TIM_ITRx_SetConfig>
      break;
 8002db4:	e02b      	b.n	8002e0e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6818      	ldr	r0, [r3, #0]
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	6859      	ldr	r1, [r3, #4]
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	f000 f8e4 	bl	8002f90 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	2160      	movs	r1, #96	; 0x60
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f000 f90d 	bl	8002fee <TIM_ITRx_SetConfig>
      break;
 8002dd4:	e01b      	b.n	8002e0e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6818      	ldr	r0, [r3, #0]
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	6859      	ldr	r1, [r3, #4]
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	461a      	mov	r2, r3
 8002de4:	f000 f8a6 	bl	8002f34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	2140      	movs	r1, #64	; 0x40
 8002dee:	4618      	mov	r0, r3
 8002df0:	f000 f8fd 	bl	8002fee <TIM_ITRx_SetConfig>
      break;
 8002df4:	e00b      	b.n	8002e0e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4619      	mov	r1, r3
 8002e00:	4610      	mov	r0, r2
 8002e02:	f000 f8f4 	bl	8002fee <TIM_ITRx_SetConfig>
        break;
 8002e06:	e002      	b.n	8002e0e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002e08:	bf00      	nop
 8002e0a:	e000      	b.n	8002e0e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002e0c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2201      	movs	r2, #1
 8002e12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e1e:	2300      	movs	r3, #0
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3710      	adds	r7, #16
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e30:	bf00      	nop
 8002e32:	370c      	adds	r7, #12
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bc80      	pop	{r7}
 8002e38:	4770      	bx	lr

08002e3a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e3a:	b480      	push	{r7}
 8002e3c:	b083      	sub	sp, #12
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e42:	bf00      	nop
 8002e44:	370c      	adds	r7, #12
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bc80      	pop	{r7}
 8002e4a:	4770      	bx	lr

08002e4c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e54:	bf00      	nop
 8002e56:	370c      	adds	r7, #12
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bc80      	pop	{r7}
 8002e5c:	4770      	bx	lr

08002e5e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e5e:	b480      	push	{r7}
 8002e60:	b083      	sub	sp, #12
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e66:	bf00      	nop
 8002e68:	370c      	adds	r7, #12
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bc80      	pop	{r7}
 8002e6e:	4770      	bx	lr

08002e70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b085      	sub	sp, #20
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	4a29      	ldr	r2, [pc, #164]	; (8002f28 <TIM_Base_SetConfig+0xb8>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d00b      	beq.n	8002ea0 <TIM_Base_SetConfig+0x30>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e8e:	d007      	beq.n	8002ea0 <TIM_Base_SetConfig+0x30>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	4a26      	ldr	r2, [pc, #152]	; (8002f2c <TIM_Base_SetConfig+0xbc>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d003      	beq.n	8002ea0 <TIM_Base_SetConfig+0x30>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	4a25      	ldr	r2, [pc, #148]	; (8002f30 <TIM_Base_SetConfig+0xc0>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d108      	bne.n	8002eb2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ea6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	68fa      	ldr	r2, [r7, #12]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4a1c      	ldr	r2, [pc, #112]	; (8002f28 <TIM_Base_SetConfig+0xb8>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d00b      	beq.n	8002ed2 <TIM_Base_SetConfig+0x62>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ec0:	d007      	beq.n	8002ed2 <TIM_Base_SetConfig+0x62>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4a19      	ldr	r2, [pc, #100]	; (8002f2c <TIM_Base_SetConfig+0xbc>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d003      	beq.n	8002ed2 <TIM_Base_SetConfig+0x62>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4a18      	ldr	r2, [pc, #96]	; (8002f30 <TIM_Base_SetConfig+0xc0>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d108      	bne.n	8002ee4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ed8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	68fa      	ldr	r2, [r7, #12]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	695b      	ldr	r3, [r3, #20]
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	68fa      	ldr	r2, [r7, #12]
 8002ef6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	689a      	ldr	r2, [r3, #8]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	4a07      	ldr	r2, [pc, #28]	; (8002f28 <TIM_Base_SetConfig+0xb8>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d103      	bne.n	8002f18 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	691a      	ldr	r2, [r3, #16]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	615a      	str	r2, [r3, #20]
}
 8002f1e:	bf00      	nop
 8002f20:	3714      	adds	r7, #20
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bc80      	pop	{r7}
 8002f26:	4770      	bx	lr
 8002f28:	40012c00 	.word	0x40012c00
 8002f2c:	40000400 	.word	0x40000400
 8002f30:	40000800 	.word	0x40000800

08002f34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b087      	sub	sp, #28
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	60f8      	str	r0, [r7, #12]
 8002f3c:	60b9      	str	r1, [r7, #8]
 8002f3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	6a1b      	ldr	r3, [r3, #32]
 8002f44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6a1b      	ldr	r3, [r3, #32]
 8002f4a:	f023 0201 	bic.w	r2, r3, #1
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	699b      	ldr	r3, [r3, #24]
 8002f56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	011b      	lsls	r3, r3, #4
 8002f64:	693a      	ldr	r2, [r7, #16]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	f023 030a 	bic.w	r3, r3, #10
 8002f70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002f72:	697a      	ldr	r2, [r7, #20]
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	4313      	orrs	r3, r2
 8002f78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	693a      	ldr	r2, [r7, #16]
 8002f7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	697a      	ldr	r2, [r7, #20]
 8002f84:	621a      	str	r2, [r3, #32]
}
 8002f86:	bf00      	nop
 8002f88:	371c      	adds	r7, #28
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bc80      	pop	{r7}
 8002f8e:	4770      	bx	lr

08002f90 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b087      	sub	sp, #28
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	60f8      	str	r0, [r7, #12]
 8002f98:	60b9      	str	r1, [r7, #8]
 8002f9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6a1b      	ldr	r3, [r3, #32]
 8002fa0:	f023 0210 	bic.w	r2, r3, #16
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	699b      	ldr	r3, [r3, #24]
 8002fac:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6a1b      	ldr	r3, [r3, #32]
 8002fb2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002fba:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	031b      	lsls	r3, r3, #12
 8002fc0:	697a      	ldr	r2, [r7, #20]
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002fcc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	011b      	lsls	r3, r3, #4
 8002fd2:	693a      	ldr	r2, [r7, #16]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	697a      	ldr	r2, [r7, #20]
 8002fdc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	693a      	ldr	r2, [r7, #16]
 8002fe2:	621a      	str	r2, [r3, #32]
}
 8002fe4:	bf00      	nop
 8002fe6:	371c      	adds	r7, #28
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bc80      	pop	{r7}
 8002fec:	4770      	bx	lr

08002fee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002fee:	b480      	push	{r7}
 8002ff0:	b085      	sub	sp, #20
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	6078      	str	r0, [r7, #4]
 8002ff6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003004:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003006:	683a      	ldr	r2, [r7, #0]
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	4313      	orrs	r3, r2
 800300c:	f043 0307 	orr.w	r3, r3, #7
 8003010:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	68fa      	ldr	r2, [r7, #12]
 8003016:	609a      	str	r2, [r3, #8]
}
 8003018:	bf00      	nop
 800301a:	3714      	adds	r7, #20
 800301c:	46bd      	mov	sp, r7
 800301e:	bc80      	pop	{r7}
 8003020:	4770      	bx	lr

08003022 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003022:	b480      	push	{r7}
 8003024:	b087      	sub	sp, #28
 8003026:	af00      	add	r7, sp, #0
 8003028:	60f8      	str	r0, [r7, #12]
 800302a:	60b9      	str	r1, [r7, #8]
 800302c:	607a      	str	r2, [r7, #4]
 800302e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800303c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	021a      	lsls	r2, r3, #8
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	431a      	orrs	r2, r3
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	4313      	orrs	r3, r2
 800304a:	697a      	ldr	r2, [r7, #20]
 800304c:	4313      	orrs	r3, r2
 800304e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	697a      	ldr	r2, [r7, #20]
 8003054:	609a      	str	r2, [r3, #8]
}
 8003056:	bf00      	nop
 8003058:	371c      	adds	r7, #28
 800305a:	46bd      	mov	sp, r7
 800305c:	bc80      	pop	{r7}
 800305e:	4770      	bx	lr

08003060 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003060:	b480      	push	{r7}
 8003062:	b085      	sub	sp, #20
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003070:	2b01      	cmp	r3, #1
 8003072:	d101      	bne.n	8003078 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003074:	2302      	movs	r3, #2
 8003076:	e046      	b.n	8003106 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2201      	movs	r2, #1
 800307c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2202      	movs	r2, #2
 8003084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800309e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	68fa      	ldr	r2, [r7, #12]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	68fa      	ldr	r2, [r7, #12]
 80030b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a16      	ldr	r2, [pc, #88]	; (8003110 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d00e      	beq.n	80030da <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030c4:	d009      	beq.n	80030da <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a12      	ldr	r2, [pc, #72]	; (8003114 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d004      	beq.n	80030da <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a10      	ldr	r2, [pc, #64]	; (8003118 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d10c      	bne.n	80030f4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	68ba      	ldr	r2, [r7, #8]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	68ba      	ldr	r2, [r7, #8]
 80030f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2200      	movs	r2, #0
 8003100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003104:	2300      	movs	r3, #0
}
 8003106:	4618      	mov	r0, r3
 8003108:	3714      	adds	r7, #20
 800310a:	46bd      	mov	sp, r7
 800310c:	bc80      	pop	{r7}
 800310e:	4770      	bx	lr
 8003110:	40012c00 	.word	0x40012c00
 8003114:	40000400 	.word	0x40000400
 8003118:	40000800 	.word	0x40000800

0800311c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800311c:	b480      	push	{r7}
 800311e:	b083      	sub	sp, #12
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003124:	bf00      	nop
 8003126:	370c      	adds	r7, #12
 8003128:	46bd      	mov	sp, r7
 800312a:	bc80      	pop	{r7}
 800312c:	4770      	bx	lr

0800312e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800312e:	b480      	push	{r7}
 8003130:	b083      	sub	sp, #12
 8003132:	af00      	add	r7, sp, #0
 8003134:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003136:	bf00      	nop
 8003138:	370c      	adds	r7, #12
 800313a:	46bd      	mov	sp, r7
 800313c:	bc80      	pop	{r7}
 800313e:	4770      	bx	lr

08003140 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b082      	sub	sp, #8
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d101      	bne.n	8003152 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e03f      	b.n	80031d2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003158:	b2db      	uxtb	r3, r3
 800315a:	2b00      	cmp	r3, #0
 800315c:	d106      	bne.n	800316c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f7fd fb7c 	bl	8000864 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2224      	movs	r2, #36	; 0x24
 8003170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	68da      	ldr	r2, [r3, #12]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003182:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	f000 fd7f 	bl	8003c88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	691a      	ldr	r2, [r3, #16]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003198:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	695a      	ldr	r2, [r3, #20]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80031a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	68da      	ldr	r2, [r3, #12]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80031b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2220      	movs	r2, #32
 80031c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2220      	movs	r2, #32
 80031cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80031d0:	2300      	movs	r3, #0
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3708      	adds	r7, #8
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}

080031da <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031da:	b580      	push	{r7, lr}
 80031dc:	b08a      	sub	sp, #40	; 0x28
 80031de:	af02      	add	r7, sp, #8
 80031e0:	60f8      	str	r0, [r7, #12]
 80031e2:	60b9      	str	r1, [r7, #8]
 80031e4:	603b      	str	r3, [r7, #0]
 80031e6:	4613      	mov	r3, r2
 80031e8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80031ea:	2300      	movs	r3, #0
 80031ec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	2b20      	cmp	r3, #32
 80031f8:	d17c      	bne.n	80032f4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d002      	beq.n	8003206 <HAL_UART_Transmit+0x2c>
 8003200:	88fb      	ldrh	r3, [r7, #6]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d101      	bne.n	800320a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e075      	b.n	80032f6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003210:	2b01      	cmp	r3, #1
 8003212:	d101      	bne.n	8003218 <HAL_UART_Transmit+0x3e>
 8003214:	2302      	movs	r3, #2
 8003216:	e06e      	b.n	80032f6 <HAL_UART_Transmit+0x11c>
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2201      	movs	r2, #1
 800321c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2200      	movs	r2, #0
 8003224:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2221      	movs	r2, #33	; 0x21
 800322a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800322e:	f7fd fcc9 	bl	8000bc4 <HAL_GetTick>
 8003232:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	88fa      	ldrh	r2, [r7, #6]
 8003238:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	88fa      	ldrh	r2, [r7, #6]
 800323e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003248:	d108      	bne.n	800325c <HAL_UART_Transmit+0x82>
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	691b      	ldr	r3, [r3, #16]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d104      	bne.n	800325c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003252:	2300      	movs	r3, #0
 8003254:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	61bb      	str	r3, [r7, #24]
 800325a:	e003      	b.n	8003264 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003260:	2300      	movs	r3, #0
 8003262:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2200      	movs	r2, #0
 8003268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800326c:	e02a      	b.n	80032c4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	9300      	str	r3, [sp, #0]
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	2200      	movs	r2, #0
 8003276:	2180      	movs	r1, #128	; 0x80
 8003278:	68f8      	ldr	r0, [r7, #12]
 800327a:	f000 faf1 	bl	8003860 <UART_WaitOnFlagUntilTimeout>
 800327e:	4603      	mov	r3, r0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d001      	beq.n	8003288 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003284:	2303      	movs	r3, #3
 8003286:	e036      	b.n	80032f6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d10b      	bne.n	80032a6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800328e:	69bb      	ldr	r3, [r7, #24]
 8003290:	881b      	ldrh	r3, [r3, #0]
 8003292:	461a      	mov	r2, r3
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800329c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800329e:	69bb      	ldr	r3, [r7, #24]
 80032a0:	3302      	adds	r3, #2
 80032a2:	61bb      	str	r3, [r7, #24]
 80032a4:	e007      	b.n	80032b6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	781a      	ldrb	r2, [r3, #0]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	3301      	adds	r3, #1
 80032b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80032ba:	b29b      	uxth	r3, r3
 80032bc:	3b01      	subs	r3, #1
 80032be:	b29a      	uxth	r2, r3
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d1cf      	bne.n	800326e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	9300      	str	r3, [sp, #0]
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	2200      	movs	r2, #0
 80032d6:	2140      	movs	r1, #64	; 0x40
 80032d8:	68f8      	ldr	r0, [r7, #12]
 80032da:	f000 fac1 	bl	8003860 <UART_WaitOnFlagUntilTimeout>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d001      	beq.n	80032e8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80032e4:	2303      	movs	r3, #3
 80032e6:	e006      	b.n	80032f6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2220      	movs	r2, #32
 80032ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80032f0:	2300      	movs	r3, #0
 80032f2:	e000      	b.n	80032f6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80032f4:	2302      	movs	r3, #2
  }
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3720      	adds	r7, #32
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}

080032fe <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80032fe:	b580      	push	{r7, lr}
 8003300:	b084      	sub	sp, #16
 8003302:	af00      	add	r7, sp, #0
 8003304:	60f8      	str	r0, [r7, #12]
 8003306:	60b9      	str	r1, [r7, #8]
 8003308:	4613      	mov	r3, r2
 800330a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003312:	b2db      	uxtb	r3, r3
 8003314:	2b20      	cmp	r3, #32
 8003316:	d11d      	bne.n	8003354 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d002      	beq.n	8003324 <HAL_UART_Receive_DMA+0x26>
 800331e:	88fb      	ldrh	r3, [r7, #6]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d101      	bne.n	8003328 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e016      	b.n	8003356 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800332e:	2b01      	cmp	r3, #1
 8003330:	d101      	bne.n	8003336 <HAL_UART_Receive_DMA+0x38>
 8003332:	2302      	movs	r3, #2
 8003334:	e00f      	b.n	8003356 <HAL_UART_Receive_DMA+0x58>
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2201      	movs	r2, #1
 800333a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2200      	movs	r2, #0
 8003342:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8003344:	88fb      	ldrh	r3, [r7, #6]
 8003346:	461a      	mov	r2, r3
 8003348:	68b9      	ldr	r1, [r7, #8]
 800334a:	68f8      	ldr	r0, [r7, #12]
 800334c:	f000 fad2 	bl	80038f4 <UART_Start_Receive_DMA>
 8003350:	4603      	mov	r3, r0
 8003352:	e000      	b.n	8003356 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003354:	2302      	movs	r3, #2
  }
}
 8003356:	4618      	mov	r0, r3
 8003358:	3710      	adds	r7, #16
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
	...

08003360 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b08a      	sub	sp, #40	; 0x28
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	68db      	ldr	r3, [r3, #12]
 8003376:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	695b      	ldr	r3, [r3, #20]
 800337e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003380:	2300      	movs	r3, #0
 8003382:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003384:	2300      	movs	r3, #0
 8003386:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338a:	f003 030f 	and.w	r3, r3, #15
 800338e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003390:	69bb      	ldr	r3, [r7, #24]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d10d      	bne.n	80033b2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003398:	f003 0320 	and.w	r3, r3, #32
 800339c:	2b00      	cmp	r3, #0
 800339e:	d008      	beq.n	80033b2 <HAL_UART_IRQHandler+0x52>
 80033a0:	6a3b      	ldr	r3, [r7, #32]
 80033a2:	f003 0320 	and.w	r3, r3, #32
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d003      	beq.n	80033b2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f000 fbc2 	bl	8003b34 <UART_Receive_IT>
      return;
 80033b0:	e17b      	b.n	80036aa <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80033b2:	69bb      	ldr	r3, [r7, #24]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	f000 80b1 	beq.w	800351c <HAL_UART_IRQHandler+0x1bc>
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	f003 0301 	and.w	r3, r3, #1
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d105      	bne.n	80033d0 <HAL_UART_IRQHandler+0x70>
 80033c4:	6a3b      	ldr	r3, [r7, #32]
 80033c6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	f000 80a6 	beq.w	800351c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80033d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d2:	f003 0301 	and.w	r3, r3, #1
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d00a      	beq.n	80033f0 <HAL_UART_IRQHandler+0x90>
 80033da:	6a3b      	ldr	r3, [r7, #32]
 80033dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d005      	beq.n	80033f0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e8:	f043 0201 	orr.w	r2, r3, #1
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80033f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f2:	f003 0304 	and.w	r3, r3, #4
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d00a      	beq.n	8003410 <HAL_UART_IRQHandler+0xb0>
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	f003 0301 	and.w	r3, r3, #1
 8003400:	2b00      	cmp	r3, #0
 8003402:	d005      	beq.n	8003410 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003408:	f043 0202 	orr.w	r2, r3, #2
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003412:	f003 0302 	and.w	r3, r3, #2
 8003416:	2b00      	cmp	r3, #0
 8003418:	d00a      	beq.n	8003430 <HAL_UART_IRQHandler+0xd0>
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	f003 0301 	and.w	r3, r3, #1
 8003420:	2b00      	cmp	r3, #0
 8003422:	d005      	beq.n	8003430 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003428:	f043 0204 	orr.w	r2, r3, #4
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003432:	f003 0308 	and.w	r3, r3, #8
 8003436:	2b00      	cmp	r3, #0
 8003438:	d00f      	beq.n	800345a <HAL_UART_IRQHandler+0xfa>
 800343a:	6a3b      	ldr	r3, [r7, #32]
 800343c:	f003 0320 	and.w	r3, r3, #32
 8003440:	2b00      	cmp	r3, #0
 8003442:	d104      	bne.n	800344e <HAL_UART_IRQHandler+0xee>
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	f003 0301 	and.w	r3, r3, #1
 800344a:	2b00      	cmp	r3, #0
 800344c:	d005      	beq.n	800345a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003452:	f043 0208 	orr.w	r2, r3, #8
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345e:	2b00      	cmp	r3, #0
 8003460:	f000 811e 	beq.w	80036a0 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003466:	f003 0320 	and.w	r3, r3, #32
 800346a:	2b00      	cmp	r3, #0
 800346c:	d007      	beq.n	800347e <HAL_UART_IRQHandler+0x11e>
 800346e:	6a3b      	ldr	r3, [r7, #32]
 8003470:	f003 0320 	and.w	r3, r3, #32
 8003474:	2b00      	cmp	r3, #0
 8003476:	d002      	beq.n	800347e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	f000 fb5b 	bl	8003b34 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	695b      	ldr	r3, [r3, #20]
 8003484:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003488:	2b00      	cmp	r3, #0
 800348a:	bf14      	ite	ne
 800348c:	2301      	movne	r3, #1
 800348e:	2300      	moveq	r3, #0
 8003490:	b2db      	uxtb	r3, r3
 8003492:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003498:	f003 0308 	and.w	r3, r3, #8
 800349c:	2b00      	cmp	r3, #0
 800349e:	d102      	bne.n	80034a6 <HAL_UART_IRQHandler+0x146>
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d031      	beq.n	800350a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f000 fa9d 	bl	80039e6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	695b      	ldr	r3, [r3, #20]
 80034b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d023      	beq.n	8003502 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	695a      	ldr	r2, [r3, #20]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034c8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d013      	beq.n	80034fa <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d6:	4a76      	ldr	r2, [pc, #472]	; (80036b0 <HAL_UART_IRQHandler+0x350>)
 80034d8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034de:	4618      	mov	r0, r3
 80034e0:	f7fe fa36 	bl	8001950 <HAL_DMA_Abort_IT>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d016      	beq.n	8003518 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034f0:	687a      	ldr	r2, [r7, #4]
 80034f2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80034f4:	4610      	mov	r0, r2
 80034f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034f8:	e00e      	b.n	8003518 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f000 f8ec 	bl	80036d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003500:	e00a      	b.n	8003518 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f000 f8e8 	bl	80036d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003508:	e006      	b.n	8003518 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f000 f8e4 	bl	80036d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2200      	movs	r2, #0
 8003514:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003516:	e0c3      	b.n	80036a0 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003518:	bf00      	nop
    return;
 800351a:	e0c1      	b.n	80036a0 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003520:	2b01      	cmp	r3, #1
 8003522:	f040 80a1 	bne.w	8003668 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003528:	f003 0310 	and.w	r3, r3, #16
 800352c:	2b00      	cmp	r3, #0
 800352e:	f000 809b 	beq.w	8003668 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003532:	6a3b      	ldr	r3, [r7, #32]
 8003534:	f003 0310 	and.w	r3, r3, #16
 8003538:	2b00      	cmp	r3, #0
 800353a:	f000 8095 	beq.w	8003668 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800353e:	2300      	movs	r3, #0
 8003540:	60fb      	str	r3, [r7, #12]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	60fb      	str	r3, [r7, #12]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	60fb      	str	r3, [r7, #12]
 8003552:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	695b      	ldr	r3, [r3, #20]
 800355a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800355e:	2b00      	cmp	r3, #0
 8003560:	d04e      	beq.n	8003600 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800356c:	8a3b      	ldrh	r3, [r7, #16]
 800356e:	2b00      	cmp	r3, #0
 8003570:	f000 8098 	beq.w	80036a4 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003578:	8a3a      	ldrh	r2, [r7, #16]
 800357a:	429a      	cmp	r2, r3
 800357c:	f080 8092 	bcs.w	80036a4 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	8a3a      	ldrh	r2, [r7, #16]
 8003584:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800358a:	699b      	ldr	r3, [r3, #24]
 800358c:	2b20      	cmp	r3, #32
 800358e:	d02b      	beq.n	80035e8 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	68da      	ldr	r2, [r3, #12]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800359e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	695a      	ldr	r2, [r3, #20]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f022 0201 	bic.w	r2, r2, #1
 80035ae:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	695a      	ldr	r2, [r3, #20]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035be:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2220      	movs	r2, #32
 80035c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2200      	movs	r2, #0
 80035cc:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	68da      	ldr	r2, [r3, #12]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f022 0210 	bic.w	r2, r2, #16
 80035dc:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035e2:	4618      	mov	r0, r3
 80035e4:	f7fe f979 	bl	80018da <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	1ad3      	subs	r3, r2, r3
 80035f4:	b29b      	uxth	r3, r3
 80035f6:	4619      	mov	r1, r3
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f000 f876 	bl	80036ea <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80035fe:	e051      	b.n	80036a4 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003608:	b29b      	uxth	r3, r3
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003612:	b29b      	uxth	r3, r3
 8003614:	2b00      	cmp	r3, #0
 8003616:	d047      	beq.n	80036a8 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003618:	8a7b      	ldrh	r3, [r7, #18]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d044      	beq.n	80036a8 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	68da      	ldr	r2, [r3, #12]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800362c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	695a      	ldr	r2, [r3, #20]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f022 0201 	bic.w	r2, r2, #1
 800363c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2220      	movs	r2, #32
 8003642:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	68da      	ldr	r2, [r3, #12]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f022 0210 	bic.w	r2, r2, #16
 800365a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800365c:	8a7b      	ldrh	r3, [r7, #18]
 800365e:	4619      	mov	r1, r3
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	f000 f842 	bl	80036ea <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003666:	e01f      	b.n	80036a8 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800366e:	2b00      	cmp	r3, #0
 8003670:	d008      	beq.n	8003684 <HAL_UART_IRQHandler+0x324>
 8003672:	6a3b      	ldr	r3, [r7, #32]
 8003674:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003678:	2b00      	cmp	r3, #0
 800367a:	d003      	beq.n	8003684 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f000 f9f2 	bl	8003a66 <UART_Transmit_IT>
    return;
 8003682:	e012      	b.n	80036aa <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800368a:	2b00      	cmp	r3, #0
 800368c:	d00d      	beq.n	80036aa <HAL_UART_IRQHandler+0x34a>
 800368e:	6a3b      	ldr	r3, [r7, #32]
 8003690:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003694:	2b00      	cmp	r3, #0
 8003696:	d008      	beq.n	80036aa <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f000 fa33 	bl	8003b04 <UART_EndTransmit_IT>
    return;
 800369e:	e004      	b.n	80036aa <HAL_UART_IRQHandler+0x34a>
    return;
 80036a0:	bf00      	nop
 80036a2:	e002      	b.n	80036aa <HAL_UART_IRQHandler+0x34a>
      return;
 80036a4:	bf00      	nop
 80036a6:	e000      	b.n	80036aa <HAL_UART_IRQHandler+0x34a>
      return;
 80036a8:	bf00      	nop
  }
}
 80036aa:	3728      	adds	r7, #40	; 0x28
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	08003a3f 	.word	0x08003a3f

080036b4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b083      	sub	sp, #12
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80036bc:	bf00      	nop
 80036be:	370c      	adds	r7, #12
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bc80      	pop	{r7}
 80036c4:	4770      	bx	lr

080036c6 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80036c6:	b480      	push	{r7}
 80036c8:	b083      	sub	sp, #12
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80036ce:	bf00      	nop
 80036d0:	370c      	adds	r7, #12
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bc80      	pop	{r7}
 80036d6:	4770      	bx	lr

080036d8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80036e0:	bf00      	nop
 80036e2:	370c      	adds	r7, #12
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bc80      	pop	{r7}
 80036e8:	4770      	bx	lr

080036ea <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80036ea:	b480      	push	{r7}
 80036ec:	b083      	sub	sp, #12
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	6078      	str	r0, [r7, #4]
 80036f2:	460b      	mov	r3, r1
 80036f4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80036f6:	bf00      	nop
 80036f8:	370c      	adds	r7, #12
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bc80      	pop	{r7}
 80036fe:	4770      	bx	lr

08003700 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b084      	sub	sp, #16
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370c:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0320 	and.w	r3, r3, #32
 8003718:	2b00      	cmp	r3, #0
 800371a:	d12a      	bne.n	8003772 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2200      	movs	r2, #0
 8003720:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	68da      	ldr	r2, [r3, #12]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003730:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	695a      	ldr	r2, [r3, #20]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f022 0201 	bic.w	r2, r2, #1
 8003740:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	695a      	ldr	r2, [r3, #20]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003750:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2220      	movs	r2, #32
 8003756:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800375e:	2b01      	cmp	r3, #1
 8003760:	d107      	bne.n	8003772 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	68da      	ldr	r2, [r3, #12]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f022 0210 	bic.w	r2, r2, #16
 8003770:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003776:	2b01      	cmp	r3, #1
 8003778:	d106      	bne.n	8003788 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800377e:	4619      	mov	r1, r3
 8003780:	68f8      	ldr	r0, [r7, #12]
 8003782:	f7ff ffb2 	bl	80036ea <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003786:	e002      	b.n	800378e <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8003788:	68f8      	ldr	r0, [r7, #12]
 800378a:	f7fc fd21 	bl	80001d0 <HAL_UART_RxCpltCallback>
}
 800378e:	bf00      	nop
 8003790:	3710      	adds	r7, #16
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}

08003796 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003796:	b580      	push	{r7, lr}
 8003798:	b084      	sub	sp, #16
 800379a:	af00      	add	r7, sp, #0
 800379c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a2:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d108      	bne.n	80037be <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80037b0:	085b      	lsrs	r3, r3, #1
 80037b2:	b29b      	uxth	r3, r3
 80037b4:	4619      	mov	r1, r3
 80037b6:	68f8      	ldr	r0, [r7, #12]
 80037b8:	f7ff ff97 	bl	80036ea <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80037bc:	e002      	b.n	80037c4 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80037be:	68f8      	ldr	r0, [r7, #12]
 80037c0:	f7ff ff81 	bl	80036c6 <HAL_UART_RxHalfCpltCallback>
}
 80037c4:	bf00      	nop
 80037c6:	3710      	adds	r7, #16
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}

080037cc <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b084      	sub	sp, #16
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80037d4:	2300      	movs	r3, #0
 80037d6:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037dc:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	695b      	ldr	r3, [r3, #20]
 80037e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	bf14      	ite	ne
 80037ec:	2301      	movne	r3, #1
 80037ee:	2300      	moveq	r3, #0
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	2b21      	cmp	r3, #33	; 0x21
 80037fe:	d108      	bne.n	8003812 <UART_DMAError+0x46>
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d005      	beq.n	8003812 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	2200      	movs	r2, #0
 800380a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800380c:	68b8      	ldr	r0, [r7, #8]
 800380e:	f000 f8d5 	bl	80039bc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	695b      	ldr	r3, [r3, #20]
 8003818:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800381c:	2b00      	cmp	r3, #0
 800381e:	bf14      	ite	ne
 8003820:	2301      	movne	r3, #1
 8003822:	2300      	moveq	r3, #0
 8003824:	b2db      	uxtb	r3, r3
 8003826:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800382e:	b2db      	uxtb	r3, r3
 8003830:	2b22      	cmp	r3, #34	; 0x22
 8003832:	d108      	bne.n	8003846 <UART_DMAError+0x7a>
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d005      	beq.n	8003846 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	2200      	movs	r2, #0
 800383e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003840:	68b8      	ldr	r0, [r7, #8]
 8003842:	f000 f8d0 	bl	80039e6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384a:	f043 0210 	orr.w	r2, r3, #16
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003852:	68b8      	ldr	r0, [r7, #8]
 8003854:	f7ff ff40 	bl	80036d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003858:	bf00      	nop
 800385a:	3710      	adds	r7, #16
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}

08003860 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	60b9      	str	r1, [r7, #8]
 800386a:	603b      	str	r3, [r7, #0]
 800386c:	4613      	mov	r3, r2
 800386e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003870:	e02c      	b.n	80038cc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003872:	69bb      	ldr	r3, [r7, #24]
 8003874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003878:	d028      	beq.n	80038cc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800387a:	69bb      	ldr	r3, [r7, #24]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d007      	beq.n	8003890 <UART_WaitOnFlagUntilTimeout+0x30>
 8003880:	f7fd f9a0 	bl	8000bc4 <HAL_GetTick>
 8003884:	4602      	mov	r2, r0
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	69ba      	ldr	r2, [r7, #24]
 800388c:	429a      	cmp	r2, r3
 800388e:	d21d      	bcs.n	80038cc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	68da      	ldr	r2, [r3, #12]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800389e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	695a      	ldr	r2, [r3, #20]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f022 0201 	bic.w	r2, r2, #1
 80038ae:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2220      	movs	r2, #32
 80038b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2220      	movs	r2, #32
 80038bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2200      	movs	r2, #0
 80038c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80038c8:	2303      	movs	r3, #3
 80038ca:	e00f      	b.n	80038ec <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	4013      	ands	r3, r2
 80038d6:	68ba      	ldr	r2, [r7, #8]
 80038d8:	429a      	cmp	r2, r3
 80038da:	bf0c      	ite	eq
 80038dc:	2301      	moveq	r3, #1
 80038de:	2300      	movne	r3, #0
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	461a      	mov	r2, r3
 80038e4:	79fb      	ldrb	r3, [r7, #7]
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d0c3      	beq.n	8003872 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80038ea:	2300      	movs	r3, #0
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3710      	adds	r7, #16
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}

080038f4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b086      	sub	sp, #24
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	60f8      	str	r0, [r7, #12]
 80038fc:	60b9      	str	r1, [r7, #8]
 80038fe:	4613      	mov	r3, r2
 8003900:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003902:	68ba      	ldr	r2, [r7, #8]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	88fa      	ldrh	r2, [r7, #6]
 800390c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2200      	movs	r2, #0
 8003912:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2222      	movs	r2, #34	; 0x22
 8003918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003920:	4a23      	ldr	r2, [pc, #140]	; (80039b0 <UART_Start_Receive_DMA+0xbc>)
 8003922:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003928:	4a22      	ldr	r2, [pc, #136]	; (80039b4 <UART_Start_Receive_DMA+0xc0>)
 800392a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003930:	4a21      	ldr	r2, [pc, #132]	; (80039b8 <UART_Start_Receive_DMA+0xc4>)
 8003932:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003938:	2200      	movs	r2, #0
 800393a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800393c:	f107 0308 	add.w	r3, r7, #8
 8003940:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	3304      	adds	r3, #4
 800394c:	4619      	mov	r1, r3
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	88fb      	ldrh	r3, [r7, #6]
 8003954:	f7fd ff62 	bl	800181c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003958:	2300      	movs	r3, #0
 800395a:	613b      	str	r3, [r7, #16]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	613b      	str	r3, [r7, #16]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	613b      	str	r3, [r7, #16]
 800396c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2200      	movs	r2, #0
 8003972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	68da      	ldr	r2, [r3, #12]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003984:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	695a      	ldr	r2, [r3, #20]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f042 0201 	orr.w	r2, r2, #1
 8003994:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	695a      	ldr	r2, [r3, #20]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039a4:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80039a6:	2300      	movs	r3, #0
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3718      	adds	r7, #24
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}
 80039b0:	08003701 	.word	0x08003701
 80039b4:	08003797 	.word	0x08003797
 80039b8:	080037cd 	.word	0x080037cd

080039bc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80039bc:	b480      	push	{r7}
 80039be:	b083      	sub	sp, #12
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	68da      	ldr	r2, [r3, #12]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80039d2:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2220      	movs	r2, #32
 80039d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80039dc:	bf00      	nop
 80039de:	370c      	adds	r7, #12
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bc80      	pop	{r7}
 80039e4:	4770      	bx	lr

080039e6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80039e6:	b480      	push	{r7}
 80039e8:	b083      	sub	sp, #12
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	68da      	ldr	r2, [r3, #12]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80039fc:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	695a      	ldr	r2, [r3, #20]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f022 0201 	bic.w	r2, r2, #1
 8003a0c:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d107      	bne.n	8003a26 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	68da      	ldr	r2, [r3, #12]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f022 0210 	bic.w	r2, r2, #16
 8003a24:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2220      	movs	r2, #32
 8003a2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2200      	movs	r2, #0
 8003a32:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003a34:	bf00      	nop
 8003a36:	370c      	adds	r7, #12
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bc80      	pop	{r7}
 8003a3c:	4770      	bx	lr

08003a3e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003a3e:	b580      	push	{r7, lr}
 8003a40:	b084      	sub	sp, #16
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2200      	movs	r2, #0
 8003a56:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003a58:	68f8      	ldr	r0, [r7, #12]
 8003a5a:	f7ff fe3d 	bl	80036d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a5e:	bf00      	nop
 8003a60:	3710      	adds	r7, #16
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}

08003a66 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003a66:	b480      	push	{r7}
 8003a68:	b085      	sub	sp, #20
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	2b21      	cmp	r3, #33	; 0x21
 8003a78:	d13e      	bne.n	8003af8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a82:	d114      	bne.n	8003aae <UART_Transmit_IT+0x48>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	691b      	ldr	r3, [r3, #16]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d110      	bne.n	8003aae <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6a1b      	ldr	r3, [r3, #32]
 8003a90:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	881b      	ldrh	r3, [r3, #0]
 8003a96:	461a      	mov	r2, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003aa0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6a1b      	ldr	r3, [r3, #32]
 8003aa6:	1c9a      	adds	r2, r3, #2
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	621a      	str	r2, [r3, #32]
 8003aac:	e008      	b.n	8003ac0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6a1b      	ldr	r3, [r3, #32]
 8003ab2:	1c59      	adds	r1, r3, #1
 8003ab4:	687a      	ldr	r2, [r7, #4]
 8003ab6:	6211      	str	r1, [r2, #32]
 8003ab8:	781a      	ldrb	r2, [r3, #0]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ac4:	b29b      	uxth	r3, r3
 8003ac6:	3b01      	subs	r3, #1
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	4619      	mov	r1, r3
 8003ace:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d10f      	bne.n	8003af4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	68da      	ldr	r2, [r3, #12]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ae2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	68da      	ldr	r2, [r3, #12]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003af2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003af4:	2300      	movs	r3, #0
 8003af6:	e000      	b.n	8003afa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003af8:	2302      	movs	r3, #2
  }
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3714      	adds	r7, #20
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bc80      	pop	{r7}
 8003b02:	4770      	bx	lr

08003b04 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b082      	sub	sp, #8
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	68da      	ldr	r2, [r3, #12]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b1a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2220      	movs	r2, #32
 8003b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	f7ff fdc5 	bl	80036b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003b2a:	2300      	movs	r3, #0
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3708      	adds	r7, #8
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}

08003b34 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b086      	sub	sp, #24
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	2b22      	cmp	r3, #34	; 0x22
 8003b46:	f040 8099 	bne.w	8003c7c <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b52:	d117      	bne.n	8003b84 <UART_Receive_IT+0x50>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	691b      	ldr	r3, [r3, #16]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d113      	bne.n	8003b84 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b64:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b72:	b29a      	uxth	r2, r3
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b7c:	1c9a      	adds	r2, r3, #2
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	629a      	str	r2, [r3, #40]	; 0x28
 8003b82:	e026      	b.n	8003bd2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b88:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b96:	d007      	beq.n	8003ba8 <UART_Receive_IT+0x74>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d10a      	bne.n	8003bb6 <UART_Receive_IT+0x82>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	691b      	ldr	r3, [r3, #16]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d106      	bne.n	8003bb6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	b2da      	uxtb	r2, r3
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	701a      	strb	r2, [r3, #0]
 8003bb4:	e008      	b.n	8003bc8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003bc2:	b2da      	uxtb	r2, r3
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bcc:	1c5a      	adds	r2, r3, #1
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	3b01      	subs	r3, #1
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	687a      	ldr	r2, [r7, #4]
 8003bde:	4619      	mov	r1, r3
 8003be0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d148      	bne.n	8003c78 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	68da      	ldr	r2, [r3, #12]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f022 0220 	bic.w	r2, r2, #32
 8003bf4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	68da      	ldr	r2, [r3, #12]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c04:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	695a      	ldr	r2, [r3, #20]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f022 0201 	bic.w	r2, r2, #1
 8003c14:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2220      	movs	r2, #32
 8003c1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d123      	bne.n	8003c6e <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	68da      	ldr	r2, [r3, #12]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f022 0210 	bic.w	r2, r2, #16
 8003c3a:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 0310 	and.w	r3, r3, #16
 8003c46:	2b10      	cmp	r3, #16
 8003c48:	d10a      	bne.n	8003c60 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	60fb      	str	r3, [r7, #12]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	60fb      	str	r3, [r7, #12]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	60fb      	str	r3, [r7, #12]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003c64:	4619      	mov	r1, r3
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f7ff fd3f 	bl	80036ea <HAL_UARTEx_RxEventCallback>
 8003c6c:	e002      	b.n	8003c74 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f7fc faae 	bl	80001d0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003c74:	2300      	movs	r3, #0
 8003c76:	e002      	b.n	8003c7e <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	e000      	b.n	8003c7e <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003c7c:	2302      	movs	r3, #2
  }
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3718      	adds	r7, #24
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
	...

08003c88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b084      	sub	sp, #16
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	691b      	ldr	r3, [r3, #16]
 8003c96:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	68da      	ldr	r2, [r3, #12]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	430a      	orrs	r2, r1
 8003ca4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	689a      	ldr	r2, [r3, #8]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	691b      	ldr	r3, [r3, #16]
 8003cae:	431a      	orrs	r2, r3
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	695b      	ldr	r3, [r3, #20]
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	68db      	ldr	r3, [r3, #12]
 8003cbe:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003cc2:	f023 030c 	bic.w	r3, r3, #12
 8003cc6:	687a      	ldr	r2, [r7, #4]
 8003cc8:	6812      	ldr	r2, [r2, #0]
 8003cca:	68b9      	ldr	r1, [r7, #8]
 8003ccc:	430b      	orrs	r3, r1
 8003cce:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	695b      	ldr	r3, [r3, #20]
 8003cd6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	699a      	ldr	r2, [r3, #24]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	430a      	orrs	r2, r1
 8003ce4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a2c      	ldr	r2, [pc, #176]	; (8003d9c <UART_SetConfig+0x114>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d103      	bne.n	8003cf8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003cf0:	f7fe fd44 	bl	800277c <HAL_RCC_GetPCLK2Freq>
 8003cf4:	60f8      	str	r0, [r7, #12]
 8003cf6:	e002      	b.n	8003cfe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003cf8:	f7fe fd2c 	bl	8002754 <HAL_RCC_GetPCLK1Freq>
 8003cfc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003cfe:	68fa      	ldr	r2, [r7, #12]
 8003d00:	4613      	mov	r3, r2
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	4413      	add	r3, r2
 8003d06:	009a      	lsls	r2, r3, #2
 8003d08:	441a      	add	r2, r3
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d14:	4a22      	ldr	r2, [pc, #136]	; (8003da0 <UART_SetConfig+0x118>)
 8003d16:	fba2 2303 	umull	r2, r3, r2, r3
 8003d1a:	095b      	lsrs	r3, r3, #5
 8003d1c:	0119      	lsls	r1, r3, #4
 8003d1e:	68fa      	ldr	r2, [r7, #12]
 8003d20:	4613      	mov	r3, r2
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	4413      	add	r3, r2
 8003d26:	009a      	lsls	r2, r3, #2
 8003d28:	441a      	add	r2, r3
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d34:	4b1a      	ldr	r3, [pc, #104]	; (8003da0 <UART_SetConfig+0x118>)
 8003d36:	fba3 0302 	umull	r0, r3, r3, r2
 8003d3a:	095b      	lsrs	r3, r3, #5
 8003d3c:	2064      	movs	r0, #100	; 0x64
 8003d3e:	fb00 f303 	mul.w	r3, r0, r3
 8003d42:	1ad3      	subs	r3, r2, r3
 8003d44:	011b      	lsls	r3, r3, #4
 8003d46:	3332      	adds	r3, #50	; 0x32
 8003d48:	4a15      	ldr	r2, [pc, #84]	; (8003da0 <UART_SetConfig+0x118>)
 8003d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d4e:	095b      	lsrs	r3, r3, #5
 8003d50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d54:	4419      	add	r1, r3
 8003d56:	68fa      	ldr	r2, [r7, #12]
 8003d58:	4613      	mov	r3, r2
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	4413      	add	r3, r2
 8003d5e:	009a      	lsls	r2, r3, #2
 8003d60:	441a      	add	r2, r3
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	009b      	lsls	r3, r3, #2
 8003d68:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d6c:	4b0c      	ldr	r3, [pc, #48]	; (8003da0 <UART_SetConfig+0x118>)
 8003d6e:	fba3 0302 	umull	r0, r3, r3, r2
 8003d72:	095b      	lsrs	r3, r3, #5
 8003d74:	2064      	movs	r0, #100	; 0x64
 8003d76:	fb00 f303 	mul.w	r3, r0, r3
 8003d7a:	1ad3      	subs	r3, r2, r3
 8003d7c:	011b      	lsls	r3, r3, #4
 8003d7e:	3332      	adds	r3, #50	; 0x32
 8003d80:	4a07      	ldr	r2, [pc, #28]	; (8003da0 <UART_SetConfig+0x118>)
 8003d82:	fba2 2303 	umull	r2, r3, r2, r3
 8003d86:	095b      	lsrs	r3, r3, #5
 8003d88:	f003 020f 	and.w	r2, r3, #15
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	440a      	add	r2, r1
 8003d92:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003d94:	bf00      	nop
 8003d96:	3710      	adds	r7, #16
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	40013800 	.word	0x40013800
 8003da0:	51eb851f 	.word	0x51eb851f

08003da4 <__errno>:
 8003da4:	4b01      	ldr	r3, [pc, #4]	; (8003dac <__errno+0x8>)
 8003da6:	6818      	ldr	r0, [r3, #0]
 8003da8:	4770      	bx	lr
 8003daa:	bf00      	nop
 8003dac:	2000000c 	.word	0x2000000c

08003db0 <__libc_init_array>:
 8003db0:	b570      	push	{r4, r5, r6, lr}
 8003db2:	2600      	movs	r6, #0
 8003db4:	4d0c      	ldr	r5, [pc, #48]	; (8003de8 <__libc_init_array+0x38>)
 8003db6:	4c0d      	ldr	r4, [pc, #52]	; (8003dec <__libc_init_array+0x3c>)
 8003db8:	1b64      	subs	r4, r4, r5
 8003dba:	10a4      	asrs	r4, r4, #2
 8003dbc:	42a6      	cmp	r6, r4
 8003dbe:	d109      	bne.n	8003dd4 <__libc_init_array+0x24>
 8003dc0:	f000 fc9c 	bl	80046fc <_init>
 8003dc4:	2600      	movs	r6, #0
 8003dc6:	4d0a      	ldr	r5, [pc, #40]	; (8003df0 <__libc_init_array+0x40>)
 8003dc8:	4c0a      	ldr	r4, [pc, #40]	; (8003df4 <__libc_init_array+0x44>)
 8003dca:	1b64      	subs	r4, r4, r5
 8003dcc:	10a4      	asrs	r4, r4, #2
 8003dce:	42a6      	cmp	r6, r4
 8003dd0:	d105      	bne.n	8003dde <__libc_init_array+0x2e>
 8003dd2:	bd70      	pop	{r4, r5, r6, pc}
 8003dd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003dd8:	4798      	blx	r3
 8003dda:	3601      	adds	r6, #1
 8003ddc:	e7ee      	b.n	8003dbc <__libc_init_array+0xc>
 8003dde:	f855 3b04 	ldr.w	r3, [r5], #4
 8003de2:	4798      	blx	r3
 8003de4:	3601      	adds	r6, #1
 8003de6:	e7f2      	b.n	8003dce <__libc_init_array+0x1e>
 8003de8:	0800478c 	.word	0x0800478c
 8003dec:	0800478c 	.word	0x0800478c
 8003df0:	0800478c 	.word	0x0800478c
 8003df4:	08004790 	.word	0x08004790

08003df8 <memset>:
 8003df8:	4603      	mov	r3, r0
 8003dfa:	4402      	add	r2, r0
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d100      	bne.n	8003e02 <memset+0xa>
 8003e00:	4770      	bx	lr
 8003e02:	f803 1b01 	strb.w	r1, [r3], #1
 8003e06:	e7f9      	b.n	8003dfc <memset+0x4>

08003e08 <siprintf>:
 8003e08:	b40e      	push	{r1, r2, r3}
 8003e0a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003e0e:	b500      	push	{lr}
 8003e10:	b09c      	sub	sp, #112	; 0x70
 8003e12:	ab1d      	add	r3, sp, #116	; 0x74
 8003e14:	9002      	str	r0, [sp, #8]
 8003e16:	9006      	str	r0, [sp, #24]
 8003e18:	9107      	str	r1, [sp, #28]
 8003e1a:	9104      	str	r1, [sp, #16]
 8003e1c:	4808      	ldr	r0, [pc, #32]	; (8003e40 <siprintf+0x38>)
 8003e1e:	4909      	ldr	r1, [pc, #36]	; (8003e44 <siprintf+0x3c>)
 8003e20:	f853 2b04 	ldr.w	r2, [r3], #4
 8003e24:	9105      	str	r1, [sp, #20]
 8003e26:	6800      	ldr	r0, [r0, #0]
 8003e28:	a902      	add	r1, sp, #8
 8003e2a:	9301      	str	r3, [sp, #4]
 8003e2c:	f000 f868 	bl	8003f00 <_svfiprintf_r>
 8003e30:	2200      	movs	r2, #0
 8003e32:	9b02      	ldr	r3, [sp, #8]
 8003e34:	701a      	strb	r2, [r3, #0]
 8003e36:	b01c      	add	sp, #112	; 0x70
 8003e38:	f85d eb04 	ldr.w	lr, [sp], #4
 8003e3c:	b003      	add	sp, #12
 8003e3e:	4770      	bx	lr
 8003e40:	2000000c 	.word	0x2000000c
 8003e44:	ffff0208 	.word	0xffff0208

08003e48 <__ssputs_r>:
 8003e48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e4c:	688e      	ldr	r6, [r1, #8]
 8003e4e:	4682      	mov	sl, r0
 8003e50:	429e      	cmp	r6, r3
 8003e52:	460c      	mov	r4, r1
 8003e54:	4690      	mov	r8, r2
 8003e56:	461f      	mov	r7, r3
 8003e58:	d838      	bhi.n	8003ecc <__ssputs_r+0x84>
 8003e5a:	898a      	ldrh	r2, [r1, #12]
 8003e5c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003e60:	d032      	beq.n	8003ec8 <__ssputs_r+0x80>
 8003e62:	6825      	ldr	r5, [r4, #0]
 8003e64:	6909      	ldr	r1, [r1, #16]
 8003e66:	3301      	adds	r3, #1
 8003e68:	eba5 0901 	sub.w	r9, r5, r1
 8003e6c:	6965      	ldr	r5, [r4, #20]
 8003e6e:	444b      	add	r3, r9
 8003e70:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003e74:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003e78:	106d      	asrs	r5, r5, #1
 8003e7a:	429d      	cmp	r5, r3
 8003e7c:	bf38      	it	cc
 8003e7e:	461d      	movcc	r5, r3
 8003e80:	0553      	lsls	r3, r2, #21
 8003e82:	d531      	bpl.n	8003ee8 <__ssputs_r+0xa0>
 8003e84:	4629      	mov	r1, r5
 8003e86:	f000 fb6f 	bl	8004568 <_malloc_r>
 8003e8a:	4606      	mov	r6, r0
 8003e8c:	b950      	cbnz	r0, 8003ea4 <__ssputs_r+0x5c>
 8003e8e:	230c      	movs	r3, #12
 8003e90:	f04f 30ff 	mov.w	r0, #4294967295
 8003e94:	f8ca 3000 	str.w	r3, [sl]
 8003e98:	89a3      	ldrh	r3, [r4, #12]
 8003e9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e9e:	81a3      	strh	r3, [r4, #12]
 8003ea0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ea4:	464a      	mov	r2, r9
 8003ea6:	6921      	ldr	r1, [r4, #16]
 8003ea8:	f000 face 	bl	8004448 <memcpy>
 8003eac:	89a3      	ldrh	r3, [r4, #12]
 8003eae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003eb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003eb6:	81a3      	strh	r3, [r4, #12]
 8003eb8:	6126      	str	r6, [r4, #16]
 8003eba:	444e      	add	r6, r9
 8003ebc:	6026      	str	r6, [r4, #0]
 8003ebe:	463e      	mov	r6, r7
 8003ec0:	6165      	str	r5, [r4, #20]
 8003ec2:	eba5 0509 	sub.w	r5, r5, r9
 8003ec6:	60a5      	str	r5, [r4, #8]
 8003ec8:	42be      	cmp	r6, r7
 8003eca:	d900      	bls.n	8003ece <__ssputs_r+0x86>
 8003ecc:	463e      	mov	r6, r7
 8003ece:	4632      	mov	r2, r6
 8003ed0:	4641      	mov	r1, r8
 8003ed2:	6820      	ldr	r0, [r4, #0]
 8003ed4:	f000 fac6 	bl	8004464 <memmove>
 8003ed8:	68a3      	ldr	r3, [r4, #8]
 8003eda:	2000      	movs	r0, #0
 8003edc:	1b9b      	subs	r3, r3, r6
 8003ede:	60a3      	str	r3, [r4, #8]
 8003ee0:	6823      	ldr	r3, [r4, #0]
 8003ee2:	4433      	add	r3, r6
 8003ee4:	6023      	str	r3, [r4, #0]
 8003ee6:	e7db      	b.n	8003ea0 <__ssputs_r+0x58>
 8003ee8:	462a      	mov	r2, r5
 8003eea:	f000 fbb1 	bl	8004650 <_realloc_r>
 8003eee:	4606      	mov	r6, r0
 8003ef0:	2800      	cmp	r0, #0
 8003ef2:	d1e1      	bne.n	8003eb8 <__ssputs_r+0x70>
 8003ef4:	4650      	mov	r0, sl
 8003ef6:	6921      	ldr	r1, [r4, #16]
 8003ef8:	f000 face 	bl	8004498 <_free_r>
 8003efc:	e7c7      	b.n	8003e8e <__ssputs_r+0x46>
	...

08003f00 <_svfiprintf_r>:
 8003f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f04:	4698      	mov	r8, r3
 8003f06:	898b      	ldrh	r3, [r1, #12]
 8003f08:	4607      	mov	r7, r0
 8003f0a:	061b      	lsls	r3, r3, #24
 8003f0c:	460d      	mov	r5, r1
 8003f0e:	4614      	mov	r4, r2
 8003f10:	b09d      	sub	sp, #116	; 0x74
 8003f12:	d50e      	bpl.n	8003f32 <_svfiprintf_r+0x32>
 8003f14:	690b      	ldr	r3, [r1, #16]
 8003f16:	b963      	cbnz	r3, 8003f32 <_svfiprintf_r+0x32>
 8003f18:	2140      	movs	r1, #64	; 0x40
 8003f1a:	f000 fb25 	bl	8004568 <_malloc_r>
 8003f1e:	6028      	str	r0, [r5, #0]
 8003f20:	6128      	str	r0, [r5, #16]
 8003f22:	b920      	cbnz	r0, 8003f2e <_svfiprintf_r+0x2e>
 8003f24:	230c      	movs	r3, #12
 8003f26:	603b      	str	r3, [r7, #0]
 8003f28:	f04f 30ff 	mov.w	r0, #4294967295
 8003f2c:	e0d1      	b.n	80040d2 <_svfiprintf_r+0x1d2>
 8003f2e:	2340      	movs	r3, #64	; 0x40
 8003f30:	616b      	str	r3, [r5, #20]
 8003f32:	2300      	movs	r3, #0
 8003f34:	9309      	str	r3, [sp, #36]	; 0x24
 8003f36:	2320      	movs	r3, #32
 8003f38:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003f3c:	2330      	movs	r3, #48	; 0x30
 8003f3e:	f04f 0901 	mov.w	r9, #1
 8003f42:	f8cd 800c 	str.w	r8, [sp, #12]
 8003f46:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80040ec <_svfiprintf_r+0x1ec>
 8003f4a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003f4e:	4623      	mov	r3, r4
 8003f50:	469a      	mov	sl, r3
 8003f52:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003f56:	b10a      	cbz	r2, 8003f5c <_svfiprintf_r+0x5c>
 8003f58:	2a25      	cmp	r2, #37	; 0x25
 8003f5a:	d1f9      	bne.n	8003f50 <_svfiprintf_r+0x50>
 8003f5c:	ebba 0b04 	subs.w	fp, sl, r4
 8003f60:	d00b      	beq.n	8003f7a <_svfiprintf_r+0x7a>
 8003f62:	465b      	mov	r3, fp
 8003f64:	4622      	mov	r2, r4
 8003f66:	4629      	mov	r1, r5
 8003f68:	4638      	mov	r0, r7
 8003f6a:	f7ff ff6d 	bl	8003e48 <__ssputs_r>
 8003f6e:	3001      	adds	r0, #1
 8003f70:	f000 80aa 	beq.w	80040c8 <_svfiprintf_r+0x1c8>
 8003f74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003f76:	445a      	add	r2, fp
 8003f78:	9209      	str	r2, [sp, #36]	; 0x24
 8003f7a:	f89a 3000 	ldrb.w	r3, [sl]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	f000 80a2 	beq.w	80040c8 <_svfiprintf_r+0x1c8>
 8003f84:	2300      	movs	r3, #0
 8003f86:	f04f 32ff 	mov.w	r2, #4294967295
 8003f8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003f8e:	f10a 0a01 	add.w	sl, sl, #1
 8003f92:	9304      	str	r3, [sp, #16]
 8003f94:	9307      	str	r3, [sp, #28]
 8003f96:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003f9a:	931a      	str	r3, [sp, #104]	; 0x68
 8003f9c:	4654      	mov	r4, sl
 8003f9e:	2205      	movs	r2, #5
 8003fa0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003fa4:	4851      	ldr	r0, [pc, #324]	; (80040ec <_svfiprintf_r+0x1ec>)
 8003fa6:	f000 fa41 	bl	800442c <memchr>
 8003faa:	9a04      	ldr	r2, [sp, #16]
 8003fac:	b9d8      	cbnz	r0, 8003fe6 <_svfiprintf_r+0xe6>
 8003fae:	06d0      	lsls	r0, r2, #27
 8003fb0:	bf44      	itt	mi
 8003fb2:	2320      	movmi	r3, #32
 8003fb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003fb8:	0711      	lsls	r1, r2, #28
 8003fba:	bf44      	itt	mi
 8003fbc:	232b      	movmi	r3, #43	; 0x2b
 8003fbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003fc2:	f89a 3000 	ldrb.w	r3, [sl]
 8003fc6:	2b2a      	cmp	r3, #42	; 0x2a
 8003fc8:	d015      	beq.n	8003ff6 <_svfiprintf_r+0xf6>
 8003fca:	4654      	mov	r4, sl
 8003fcc:	2000      	movs	r0, #0
 8003fce:	f04f 0c0a 	mov.w	ip, #10
 8003fd2:	9a07      	ldr	r2, [sp, #28]
 8003fd4:	4621      	mov	r1, r4
 8003fd6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003fda:	3b30      	subs	r3, #48	; 0x30
 8003fdc:	2b09      	cmp	r3, #9
 8003fde:	d94e      	bls.n	800407e <_svfiprintf_r+0x17e>
 8003fe0:	b1b0      	cbz	r0, 8004010 <_svfiprintf_r+0x110>
 8003fe2:	9207      	str	r2, [sp, #28]
 8003fe4:	e014      	b.n	8004010 <_svfiprintf_r+0x110>
 8003fe6:	eba0 0308 	sub.w	r3, r0, r8
 8003fea:	fa09 f303 	lsl.w	r3, r9, r3
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	46a2      	mov	sl, r4
 8003ff2:	9304      	str	r3, [sp, #16]
 8003ff4:	e7d2      	b.n	8003f9c <_svfiprintf_r+0x9c>
 8003ff6:	9b03      	ldr	r3, [sp, #12]
 8003ff8:	1d19      	adds	r1, r3, #4
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	9103      	str	r1, [sp, #12]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	bfbb      	ittet	lt
 8004002:	425b      	neglt	r3, r3
 8004004:	f042 0202 	orrlt.w	r2, r2, #2
 8004008:	9307      	strge	r3, [sp, #28]
 800400a:	9307      	strlt	r3, [sp, #28]
 800400c:	bfb8      	it	lt
 800400e:	9204      	strlt	r2, [sp, #16]
 8004010:	7823      	ldrb	r3, [r4, #0]
 8004012:	2b2e      	cmp	r3, #46	; 0x2e
 8004014:	d10c      	bne.n	8004030 <_svfiprintf_r+0x130>
 8004016:	7863      	ldrb	r3, [r4, #1]
 8004018:	2b2a      	cmp	r3, #42	; 0x2a
 800401a:	d135      	bne.n	8004088 <_svfiprintf_r+0x188>
 800401c:	9b03      	ldr	r3, [sp, #12]
 800401e:	3402      	adds	r4, #2
 8004020:	1d1a      	adds	r2, r3, #4
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	9203      	str	r2, [sp, #12]
 8004026:	2b00      	cmp	r3, #0
 8004028:	bfb8      	it	lt
 800402a:	f04f 33ff 	movlt.w	r3, #4294967295
 800402e:	9305      	str	r3, [sp, #20]
 8004030:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80040f0 <_svfiprintf_r+0x1f0>
 8004034:	2203      	movs	r2, #3
 8004036:	4650      	mov	r0, sl
 8004038:	7821      	ldrb	r1, [r4, #0]
 800403a:	f000 f9f7 	bl	800442c <memchr>
 800403e:	b140      	cbz	r0, 8004052 <_svfiprintf_r+0x152>
 8004040:	2340      	movs	r3, #64	; 0x40
 8004042:	eba0 000a 	sub.w	r0, r0, sl
 8004046:	fa03 f000 	lsl.w	r0, r3, r0
 800404a:	9b04      	ldr	r3, [sp, #16]
 800404c:	3401      	adds	r4, #1
 800404e:	4303      	orrs	r3, r0
 8004050:	9304      	str	r3, [sp, #16]
 8004052:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004056:	2206      	movs	r2, #6
 8004058:	4826      	ldr	r0, [pc, #152]	; (80040f4 <_svfiprintf_r+0x1f4>)
 800405a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800405e:	f000 f9e5 	bl	800442c <memchr>
 8004062:	2800      	cmp	r0, #0
 8004064:	d038      	beq.n	80040d8 <_svfiprintf_r+0x1d8>
 8004066:	4b24      	ldr	r3, [pc, #144]	; (80040f8 <_svfiprintf_r+0x1f8>)
 8004068:	bb1b      	cbnz	r3, 80040b2 <_svfiprintf_r+0x1b2>
 800406a:	9b03      	ldr	r3, [sp, #12]
 800406c:	3307      	adds	r3, #7
 800406e:	f023 0307 	bic.w	r3, r3, #7
 8004072:	3308      	adds	r3, #8
 8004074:	9303      	str	r3, [sp, #12]
 8004076:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004078:	4433      	add	r3, r6
 800407a:	9309      	str	r3, [sp, #36]	; 0x24
 800407c:	e767      	b.n	8003f4e <_svfiprintf_r+0x4e>
 800407e:	460c      	mov	r4, r1
 8004080:	2001      	movs	r0, #1
 8004082:	fb0c 3202 	mla	r2, ip, r2, r3
 8004086:	e7a5      	b.n	8003fd4 <_svfiprintf_r+0xd4>
 8004088:	2300      	movs	r3, #0
 800408a:	f04f 0c0a 	mov.w	ip, #10
 800408e:	4619      	mov	r1, r3
 8004090:	3401      	adds	r4, #1
 8004092:	9305      	str	r3, [sp, #20]
 8004094:	4620      	mov	r0, r4
 8004096:	f810 2b01 	ldrb.w	r2, [r0], #1
 800409a:	3a30      	subs	r2, #48	; 0x30
 800409c:	2a09      	cmp	r2, #9
 800409e:	d903      	bls.n	80040a8 <_svfiprintf_r+0x1a8>
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d0c5      	beq.n	8004030 <_svfiprintf_r+0x130>
 80040a4:	9105      	str	r1, [sp, #20]
 80040a6:	e7c3      	b.n	8004030 <_svfiprintf_r+0x130>
 80040a8:	4604      	mov	r4, r0
 80040aa:	2301      	movs	r3, #1
 80040ac:	fb0c 2101 	mla	r1, ip, r1, r2
 80040b0:	e7f0      	b.n	8004094 <_svfiprintf_r+0x194>
 80040b2:	ab03      	add	r3, sp, #12
 80040b4:	9300      	str	r3, [sp, #0]
 80040b6:	462a      	mov	r2, r5
 80040b8:	4638      	mov	r0, r7
 80040ba:	4b10      	ldr	r3, [pc, #64]	; (80040fc <_svfiprintf_r+0x1fc>)
 80040bc:	a904      	add	r1, sp, #16
 80040be:	f3af 8000 	nop.w
 80040c2:	1c42      	adds	r2, r0, #1
 80040c4:	4606      	mov	r6, r0
 80040c6:	d1d6      	bne.n	8004076 <_svfiprintf_r+0x176>
 80040c8:	89ab      	ldrh	r3, [r5, #12]
 80040ca:	065b      	lsls	r3, r3, #25
 80040cc:	f53f af2c 	bmi.w	8003f28 <_svfiprintf_r+0x28>
 80040d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80040d2:	b01d      	add	sp, #116	; 0x74
 80040d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040d8:	ab03      	add	r3, sp, #12
 80040da:	9300      	str	r3, [sp, #0]
 80040dc:	462a      	mov	r2, r5
 80040de:	4638      	mov	r0, r7
 80040e0:	4b06      	ldr	r3, [pc, #24]	; (80040fc <_svfiprintf_r+0x1fc>)
 80040e2:	a904      	add	r1, sp, #16
 80040e4:	f000 f87c 	bl	80041e0 <_printf_i>
 80040e8:	e7eb      	b.n	80040c2 <_svfiprintf_r+0x1c2>
 80040ea:	bf00      	nop
 80040ec:	08004758 	.word	0x08004758
 80040f0:	0800475e 	.word	0x0800475e
 80040f4:	08004762 	.word	0x08004762
 80040f8:	00000000 	.word	0x00000000
 80040fc:	08003e49 	.word	0x08003e49

08004100 <_printf_common>:
 8004100:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004104:	4616      	mov	r6, r2
 8004106:	4699      	mov	r9, r3
 8004108:	688a      	ldr	r2, [r1, #8]
 800410a:	690b      	ldr	r3, [r1, #16]
 800410c:	4607      	mov	r7, r0
 800410e:	4293      	cmp	r3, r2
 8004110:	bfb8      	it	lt
 8004112:	4613      	movlt	r3, r2
 8004114:	6033      	str	r3, [r6, #0]
 8004116:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800411a:	460c      	mov	r4, r1
 800411c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004120:	b10a      	cbz	r2, 8004126 <_printf_common+0x26>
 8004122:	3301      	adds	r3, #1
 8004124:	6033      	str	r3, [r6, #0]
 8004126:	6823      	ldr	r3, [r4, #0]
 8004128:	0699      	lsls	r1, r3, #26
 800412a:	bf42      	ittt	mi
 800412c:	6833      	ldrmi	r3, [r6, #0]
 800412e:	3302      	addmi	r3, #2
 8004130:	6033      	strmi	r3, [r6, #0]
 8004132:	6825      	ldr	r5, [r4, #0]
 8004134:	f015 0506 	ands.w	r5, r5, #6
 8004138:	d106      	bne.n	8004148 <_printf_common+0x48>
 800413a:	f104 0a19 	add.w	sl, r4, #25
 800413e:	68e3      	ldr	r3, [r4, #12]
 8004140:	6832      	ldr	r2, [r6, #0]
 8004142:	1a9b      	subs	r3, r3, r2
 8004144:	42ab      	cmp	r3, r5
 8004146:	dc28      	bgt.n	800419a <_printf_common+0x9a>
 8004148:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800414c:	1e13      	subs	r3, r2, #0
 800414e:	6822      	ldr	r2, [r4, #0]
 8004150:	bf18      	it	ne
 8004152:	2301      	movne	r3, #1
 8004154:	0692      	lsls	r2, r2, #26
 8004156:	d42d      	bmi.n	80041b4 <_printf_common+0xb4>
 8004158:	4649      	mov	r1, r9
 800415a:	4638      	mov	r0, r7
 800415c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004160:	47c0      	blx	r8
 8004162:	3001      	adds	r0, #1
 8004164:	d020      	beq.n	80041a8 <_printf_common+0xa8>
 8004166:	6823      	ldr	r3, [r4, #0]
 8004168:	68e5      	ldr	r5, [r4, #12]
 800416a:	f003 0306 	and.w	r3, r3, #6
 800416e:	2b04      	cmp	r3, #4
 8004170:	bf18      	it	ne
 8004172:	2500      	movne	r5, #0
 8004174:	6832      	ldr	r2, [r6, #0]
 8004176:	f04f 0600 	mov.w	r6, #0
 800417a:	68a3      	ldr	r3, [r4, #8]
 800417c:	bf08      	it	eq
 800417e:	1aad      	subeq	r5, r5, r2
 8004180:	6922      	ldr	r2, [r4, #16]
 8004182:	bf08      	it	eq
 8004184:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004188:	4293      	cmp	r3, r2
 800418a:	bfc4      	itt	gt
 800418c:	1a9b      	subgt	r3, r3, r2
 800418e:	18ed      	addgt	r5, r5, r3
 8004190:	341a      	adds	r4, #26
 8004192:	42b5      	cmp	r5, r6
 8004194:	d11a      	bne.n	80041cc <_printf_common+0xcc>
 8004196:	2000      	movs	r0, #0
 8004198:	e008      	b.n	80041ac <_printf_common+0xac>
 800419a:	2301      	movs	r3, #1
 800419c:	4652      	mov	r2, sl
 800419e:	4649      	mov	r1, r9
 80041a0:	4638      	mov	r0, r7
 80041a2:	47c0      	blx	r8
 80041a4:	3001      	adds	r0, #1
 80041a6:	d103      	bne.n	80041b0 <_printf_common+0xb0>
 80041a8:	f04f 30ff 	mov.w	r0, #4294967295
 80041ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041b0:	3501      	adds	r5, #1
 80041b2:	e7c4      	b.n	800413e <_printf_common+0x3e>
 80041b4:	2030      	movs	r0, #48	; 0x30
 80041b6:	18e1      	adds	r1, r4, r3
 80041b8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80041bc:	1c5a      	adds	r2, r3, #1
 80041be:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80041c2:	4422      	add	r2, r4
 80041c4:	3302      	adds	r3, #2
 80041c6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80041ca:	e7c5      	b.n	8004158 <_printf_common+0x58>
 80041cc:	2301      	movs	r3, #1
 80041ce:	4622      	mov	r2, r4
 80041d0:	4649      	mov	r1, r9
 80041d2:	4638      	mov	r0, r7
 80041d4:	47c0      	blx	r8
 80041d6:	3001      	adds	r0, #1
 80041d8:	d0e6      	beq.n	80041a8 <_printf_common+0xa8>
 80041da:	3601      	adds	r6, #1
 80041dc:	e7d9      	b.n	8004192 <_printf_common+0x92>
	...

080041e0 <_printf_i>:
 80041e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80041e4:	7e0f      	ldrb	r7, [r1, #24]
 80041e6:	4691      	mov	r9, r2
 80041e8:	2f78      	cmp	r7, #120	; 0x78
 80041ea:	4680      	mov	r8, r0
 80041ec:	460c      	mov	r4, r1
 80041ee:	469a      	mov	sl, r3
 80041f0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80041f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80041f6:	d807      	bhi.n	8004208 <_printf_i+0x28>
 80041f8:	2f62      	cmp	r7, #98	; 0x62
 80041fa:	d80a      	bhi.n	8004212 <_printf_i+0x32>
 80041fc:	2f00      	cmp	r7, #0
 80041fe:	f000 80d9 	beq.w	80043b4 <_printf_i+0x1d4>
 8004202:	2f58      	cmp	r7, #88	; 0x58
 8004204:	f000 80a4 	beq.w	8004350 <_printf_i+0x170>
 8004208:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800420c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004210:	e03a      	b.n	8004288 <_printf_i+0xa8>
 8004212:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004216:	2b15      	cmp	r3, #21
 8004218:	d8f6      	bhi.n	8004208 <_printf_i+0x28>
 800421a:	a101      	add	r1, pc, #4	; (adr r1, 8004220 <_printf_i+0x40>)
 800421c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004220:	08004279 	.word	0x08004279
 8004224:	0800428d 	.word	0x0800428d
 8004228:	08004209 	.word	0x08004209
 800422c:	08004209 	.word	0x08004209
 8004230:	08004209 	.word	0x08004209
 8004234:	08004209 	.word	0x08004209
 8004238:	0800428d 	.word	0x0800428d
 800423c:	08004209 	.word	0x08004209
 8004240:	08004209 	.word	0x08004209
 8004244:	08004209 	.word	0x08004209
 8004248:	08004209 	.word	0x08004209
 800424c:	0800439b 	.word	0x0800439b
 8004250:	080042bd 	.word	0x080042bd
 8004254:	0800437d 	.word	0x0800437d
 8004258:	08004209 	.word	0x08004209
 800425c:	08004209 	.word	0x08004209
 8004260:	080043bd 	.word	0x080043bd
 8004264:	08004209 	.word	0x08004209
 8004268:	080042bd 	.word	0x080042bd
 800426c:	08004209 	.word	0x08004209
 8004270:	08004209 	.word	0x08004209
 8004274:	08004385 	.word	0x08004385
 8004278:	682b      	ldr	r3, [r5, #0]
 800427a:	1d1a      	adds	r2, r3, #4
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	602a      	str	r2, [r5, #0]
 8004280:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004284:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004288:	2301      	movs	r3, #1
 800428a:	e0a4      	b.n	80043d6 <_printf_i+0x1f6>
 800428c:	6820      	ldr	r0, [r4, #0]
 800428e:	6829      	ldr	r1, [r5, #0]
 8004290:	0606      	lsls	r6, r0, #24
 8004292:	f101 0304 	add.w	r3, r1, #4
 8004296:	d50a      	bpl.n	80042ae <_printf_i+0xce>
 8004298:	680e      	ldr	r6, [r1, #0]
 800429a:	602b      	str	r3, [r5, #0]
 800429c:	2e00      	cmp	r6, #0
 800429e:	da03      	bge.n	80042a8 <_printf_i+0xc8>
 80042a0:	232d      	movs	r3, #45	; 0x2d
 80042a2:	4276      	negs	r6, r6
 80042a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042a8:	230a      	movs	r3, #10
 80042aa:	485e      	ldr	r0, [pc, #376]	; (8004424 <_printf_i+0x244>)
 80042ac:	e019      	b.n	80042e2 <_printf_i+0x102>
 80042ae:	680e      	ldr	r6, [r1, #0]
 80042b0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80042b4:	602b      	str	r3, [r5, #0]
 80042b6:	bf18      	it	ne
 80042b8:	b236      	sxthne	r6, r6
 80042ba:	e7ef      	b.n	800429c <_printf_i+0xbc>
 80042bc:	682b      	ldr	r3, [r5, #0]
 80042be:	6820      	ldr	r0, [r4, #0]
 80042c0:	1d19      	adds	r1, r3, #4
 80042c2:	6029      	str	r1, [r5, #0]
 80042c4:	0601      	lsls	r1, r0, #24
 80042c6:	d501      	bpl.n	80042cc <_printf_i+0xec>
 80042c8:	681e      	ldr	r6, [r3, #0]
 80042ca:	e002      	b.n	80042d2 <_printf_i+0xf2>
 80042cc:	0646      	lsls	r6, r0, #25
 80042ce:	d5fb      	bpl.n	80042c8 <_printf_i+0xe8>
 80042d0:	881e      	ldrh	r6, [r3, #0]
 80042d2:	2f6f      	cmp	r7, #111	; 0x6f
 80042d4:	bf0c      	ite	eq
 80042d6:	2308      	moveq	r3, #8
 80042d8:	230a      	movne	r3, #10
 80042da:	4852      	ldr	r0, [pc, #328]	; (8004424 <_printf_i+0x244>)
 80042dc:	2100      	movs	r1, #0
 80042de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80042e2:	6865      	ldr	r5, [r4, #4]
 80042e4:	2d00      	cmp	r5, #0
 80042e6:	bfa8      	it	ge
 80042e8:	6821      	ldrge	r1, [r4, #0]
 80042ea:	60a5      	str	r5, [r4, #8]
 80042ec:	bfa4      	itt	ge
 80042ee:	f021 0104 	bicge.w	r1, r1, #4
 80042f2:	6021      	strge	r1, [r4, #0]
 80042f4:	b90e      	cbnz	r6, 80042fa <_printf_i+0x11a>
 80042f6:	2d00      	cmp	r5, #0
 80042f8:	d04d      	beq.n	8004396 <_printf_i+0x1b6>
 80042fa:	4615      	mov	r5, r2
 80042fc:	fbb6 f1f3 	udiv	r1, r6, r3
 8004300:	fb03 6711 	mls	r7, r3, r1, r6
 8004304:	5dc7      	ldrb	r7, [r0, r7]
 8004306:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800430a:	4637      	mov	r7, r6
 800430c:	42bb      	cmp	r3, r7
 800430e:	460e      	mov	r6, r1
 8004310:	d9f4      	bls.n	80042fc <_printf_i+0x11c>
 8004312:	2b08      	cmp	r3, #8
 8004314:	d10b      	bne.n	800432e <_printf_i+0x14e>
 8004316:	6823      	ldr	r3, [r4, #0]
 8004318:	07de      	lsls	r6, r3, #31
 800431a:	d508      	bpl.n	800432e <_printf_i+0x14e>
 800431c:	6923      	ldr	r3, [r4, #16]
 800431e:	6861      	ldr	r1, [r4, #4]
 8004320:	4299      	cmp	r1, r3
 8004322:	bfde      	ittt	le
 8004324:	2330      	movle	r3, #48	; 0x30
 8004326:	f805 3c01 	strble.w	r3, [r5, #-1]
 800432a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800432e:	1b52      	subs	r2, r2, r5
 8004330:	6122      	str	r2, [r4, #16]
 8004332:	464b      	mov	r3, r9
 8004334:	4621      	mov	r1, r4
 8004336:	4640      	mov	r0, r8
 8004338:	f8cd a000 	str.w	sl, [sp]
 800433c:	aa03      	add	r2, sp, #12
 800433e:	f7ff fedf 	bl	8004100 <_printf_common>
 8004342:	3001      	adds	r0, #1
 8004344:	d14c      	bne.n	80043e0 <_printf_i+0x200>
 8004346:	f04f 30ff 	mov.w	r0, #4294967295
 800434a:	b004      	add	sp, #16
 800434c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004350:	4834      	ldr	r0, [pc, #208]	; (8004424 <_printf_i+0x244>)
 8004352:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004356:	6829      	ldr	r1, [r5, #0]
 8004358:	6823      	ldr	r3, [r4, #0]
 800435a:	f851 6b04 	ldr.w	r6, [r1], #4
 800435e:	6029      	str	r1, [r5, #0]
 8004360:	061d      	lsls	r5, r3, #24
 8004362:	d514      	bpl.n	800438e <_printf_i+0x1ae>
 8004364:	07df      	lsls	r7, r3, #31
 8004366:	bf44      	itt	mi
 8004368:	f043 0320 	orrmi.w	r3, r3, #32
 800436c:	6023      	strmi	r3, [r4, #0]
 800436e:	b91e      	cbnz	r6, 8004378 <_printf_i+0x198>
 8004370:	6823      	ldr	r3, [r4, #0]
 8004372:	f023 0320 	bic.w	r3, r3, #32
 8004376:	6023      	str	r3, [r4, #0]
 8004378:	2310      	movs	r3, #16
 800437a:	e7af      	b.n	80042dc <_printf_i+0xfc>
 800437c:	6823      	ldr	r3, [r4, #0]
 800437e:	f043 0320 	orr.w	r3, r3, #32
 8004382:	6023      	str	r3, [r4, #0]
 8004384:	2378      	movs	r3, #120	; 0x78
 8004386:	4828      	ldr	r0, [pc, #160]	; (8004428 <_printf_i+0x248>)
 8004388:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800438c:	e7e3      	b.n	8004356 <_printf_i+0x176>
 800438e:	0659      	lsls	r1, r3, #25
 8004390:	bf48      	it	mi
 8004392:	b2b6      	uxthmi	r6, r6
 8004394:	e7e6      	b.n	8004364 <_printf_i+0x184>
 8004396:	4615      	mov	r5, r2
 8004398:	e7bb      	b.n	8004312 <_printf_i+0x132>
 800439a:	682b      	ldr	r3, [r5, #0]
 800439c:	6826      	ldr	r6, [r4, #0]
 800439e:	1d18      	adds	r0, r3, #4
 80043a0:	6961      	ldr	r1, [r4, #20]
 80043a2:	6028      	str	r0, [r5, #0]
 80043a4:	0635      	lsls	r5, r6, #24
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	d501      	bpl.n	80043ae <_printf_i+0x1ce>
 80043aa:	6019      	str	r1, [r3, #0]
 80043ac:	e002      	b.n	80043b4 <_printf_i+0x1d4>
 80043ae:	0670      	lsls	r0, r6, #25
 80043b0:	d5fb      	bpl.n	80043aa <_printf_i+0x1ca>
 80043b2:	8019      	strh	r1, [r3, #0]
 80043b4:	2300      	movs	r3, #0
 80043b6:	4615      	mov	r5, r2
 80043b8:	6123      	str	r3, [r4, #16]
 80043ba:	e7ba      	b.n	8004332 <_printf_i+0x152>
 80043bc:	682b      	ldr	r3, [r5, #0]
 80043be:	2100      	movs	r1, #0
 80043c0:	1d1a      	adds	r2, r3, #4
 80043c2:	602a      	str	r2, [r5, #0]
 80043c4:	681d      	ldr	r5, [r3, #0]
 80043c6:	6862      	ldr	r2, [r4, #4]
 80043c8:	4628      	mov	r0, r5
 80043ca:	f000 f82f 	bl	800442c <memchr>
 80043ce:	b108      	cbz	r0, 80043d4 <_printf_i+0x1f4>
 80043d0:	1b40      	subs	r0, r0, r5
 80043d2:	6060      	str	r0, [r4, #4]
 80043d4:	6863      	ldr	r3, [r4, #4]
 80043d6:	6123      	str	r3, [r4, #16]
 80043d8:	2300      	movs	r3, #0
 80043da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043de:	e7a8      	b.n	8004332 <_printf_i+0x152>
 80043e0:	462a      	mov	r2, r5
 80043e2:	4649      	mov	r1, r9
 80043e4:	4640      	mov	r0, r8
 80043e6:	6923      	ldr	r3, [r4, #16]
 80043e8:	47d0      	blx	sl
 80043ea:	3001      	adds	r0, #1
 80043ec:	d0ab      	beq.n	8004346 <_printf_i+0x166>
 80043ee:	6823      	ldr	r3, [r4, #0]
 80043f0:	079b      	lsls	r3, r3, #30
 80043f2:	d413      	bmi.n	800441c <_printf_i+0x23c>
 80043f4:	68e0      	ldr	r0, [r4, #12]
 80043f6:	9b03      	ldr	r3, [sp, #12]
 80043f8:	4298      	cmp	r0, r3
 80043fa:	bfb8      	it	lt
 80043fc:	4618      	movlt	r0, r3
 80043fe:	e7a4      	b.n	800434a <_printf_i+0x16a>
 8004400:	2301      	movs	r3, #1
 8004402:	4632      	mov	r2, r6
 8004404:	4649      	mov	r1, r9
 8004406:	4640      	mov	r0, r8
 8004408:	47d0      	blx	sl
 800440a:	3001      	adds	r0, #1
 800440c:	d09b      	beq.n	8004346 <_printf_i+0x166>
 800440e:	3501      	adds	r5, #1
 8004410:	68e3      	ldr	r3, [r4, #12]
 8004412:	9903      	ldr	r1, [sp, #12]
 8004414:	1a5b      	subs	r3, r3, r1
 8004416:	42ab      	cmp	r3, r5
 8004418:	dcf2      	bgt.n	8004400 <_printf_i+0x220>
 800441a:	e7eb      	b.n	80043f4 <_printf_i+0x214>
 800441c:	2500      	movs	r5, #0
 800441e:	f104 0619 	add.w	r6, r4, #25
 8004422:	e7f5      	b.n	8004410 <_printf_i+0x230>
 8004424:	08004769 	.word	0x08004769
 8004428:	0800477a 	.word	0x0800477a

0800442c <memchr>:
 800442c:	4603      	mov	r3, r0
 800442e:	b510      	push	{r4, lr}
 8004430:	b2c9      	uxtb	r1, r1
 8004432:	4402      	add	r2, r0
 8004434:	4293      	cmp	r3, r2
 8004436:	4618      	mov	r0, r3
 8004438:	d101      	bne.n	800443e <memchr+0x12>
 800443a:	2000      	movs	r0, #0
 800443c:	e003      	b.n	8004446 <memchr+0x1a>
 800443e:	7804      	ldrb	r4, [r0, #0]
 8004440:	3301      	adds	r3, #1
 8004442:	428c      	cmp	r4, r1
 8004444:	d1f6      	bne.n	8004434 <memchr+0x8>
 8004446:	bd10      	pop	{r4, pc}

08004448 <memcpy>:
 8004448:	440a      	add	r2, r1
 800444a:	4291      	cmp	r1, r2
 800444c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004450:	d100      	bne.n	8004454 <memcpy+0xc>
 8004452:	4770      	bx	lr
 8004454:	b510      	push	{r4, lr}
 8004456:	f811 4b01 	ldrb.w	r4, [r1], #1
 800445a:	4291      	cmp	r1, r2
 800445c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004460:	d1f9      	bne.n	8004456 <memcpy+0xe>
 8004462:	bd10      	pop	{r4, pc}

08004464 <memmove>:
 8004464:	4288      	cmp	r0, r1
 8004466:	b510      	push	{r4, lr}
 8004468:	eb01 0402 	add.w	r4, r1, r2
 800446c:	d902      	bls.n	8004474 <memmove+0x10>
 800446e:	4284      	cmp	r4, r0
 8004470:	4623      	mov	r3, r4
 8004472:	d807      	bhi.n	8004484 <memmove+0x20>
 8004474:	1e43      	subs	r3, r0, #1
 8004476:	42a1      	cmp	r1, r4
 8004478:	d008      	beq.n	800448c <memmove+0x28>
 800447a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800447e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004482:	e7f8      	b.n	8004476 <memmove+0x12>
 8004484:	4601      	mov	r1, r0
 8004486:	4402      	add	r2, r0
 8004488:	428a      	cmp	r2, r1
 800448a:	d100      	bne.n	800448e <memmove+0x2a>
 800448c:	bd10      	pop	{r4, pc}
 800448e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004492:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004496:	e7f7      	b.n	8004488 <memmove+0x24>

08004498 <_free_r>:
 8004498:	b538      	push	{r3, r4, r5, lr}
 800449a:	4605      	mov	r5, r0
 800449c:	2900      	cmp	r1, #0
 800449e:	d040      	beq.n	8004522 <_free_r+0x8a>
 80044a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044a4:	1f0c      	subs	r4, r1, #4
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	bfb8      	it	lt
 80044aa:	18e4      	addlt	r4, r4, r3
 80044ac:	f000 f910 	bl	80046d0 <__malloc_lock>
 80044b0:	4a1c      	ldr	r2, [pc, #112]	; (8004524 <_free_r+0x8c>)
 80044b2:	6813      	ldr	r3, [r2, #0]
 80044b4:	b933      	cbnz	r3, 80044c4 <_free_r+0x2c>
 80044b6:	6063      	str	r3, [r4, #4]
 80044b8:	6014      	str	r4, [r2, #0]
 80044ba:	4628      	mov	r0, r5
 80044bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80044c0:	f000 b90c 	b.w	80046dc <__malloc_unlock>
 80044c4:	42a3      	cmp	r3, r4
 80044c6:	d908      	bls.n	80044da <_free_r+0x42>
 80044c8:	6820      	ldr	r0, [r4, #0]
 80044ca:	1821      	adds	r1, r4, r0
 80044cc:	428b      	cmp	r3, r1
 80044ce:	bf01      	itttt	eq
 80044d0:	6819      	ldreq	r1, [r3, #0]
 80044d2:	685b      	ldreq	r3, [r3, #4]
 80044d4:	1809      	addeq	r1, r1, r0
 80044d6:	6021      	streq	r1, [r4, #0]
 80044d8:	e7ed      	b.n	80044b6 <_free_r+0x1e>
 80044da:	461a      	mov	r2, r3
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	b10b      	cbz	r3, 80044e4 <_free_r+0x4c>
 80044e0:	42a3      	cmp	r3, r4
 80044e2:	d9fa      	bls.n	80044da <_free_r+0x42>
 80044e4:	6811      	ldr	r1, [r2, #0]
 80044e6:	1850      	adds	r0, r2, r1
 80044e8:	42a0      	cmp	r0, r4
 80044ea:	d10b      	bne.n	8004504 <_free_r+0x6c>
 80044ec:	6820      	ldr	r0, [r4, #0]
 80044ee:	4401      	add	r1, r0
 80044f0:	1850      	adds	r0, r2, r1
 80044f2:	4283      	cmp	r3, r0
 80044f4:	6011      	str	r1, [r2, #0]
 80044f6:	d1e0      	bne.n	80044ba <_free_r+0x22>
 80044f8:	6818      	ldr	r0, [r3, #0]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	4401      	add	r1, r0
 80044fe:	6011      	str	r1, [r2, #0]
 8004500:	6053      	str	r3, [r2, #4]
 8004502:	e7da      	b.n	80044ba <_free_r+0x22>
 8004504:	d902      	bls.n	800450c <_free_r+0x74>
 8004506:	230c      	movs	r3, #12
 8004508:	602b      	str	r3, [r5, #0]
 800450a:	e7d6      	b.n	80044ba <_free_r+0x22>
 800450c:	6820      	ldr	r0, [r4, #0]
 800450e:	1821      	adds	r1, r4, r0
 8004510:	428b      	cmp	r3, r1
 8004512:	bf01      	itttt	eq
 8004514:	6819      	ldreq	r1, [r3, #0]
 8004516:	685b      	ldreq	r3, [r3, #4]
 8004518:	1809      	addeq	r1, r1, r0
 800451a:	6021      	streq	r1, [r4, #0]
 800451c:	6063      	str	r3, [r4, #4]
 800451e:	6054      	str	r4, [r2, #4]
 8004520:	e7cb      	b.n	80044ba <_free_r+0x22>
 8004522:	bd38      	pop	{r3, r4, r5, pc}
 8004524:	20000228 	.word	0x20000228

08004528 <sbrk_aligned>:
 8004528:	b570      	push	{r4, r5, r6, lr}
 800452a:	4e0e      	ldr	r6, [pc, #56]	; (8004564 <sbrk_aligned+0x3c>)
 800452c:	460c      	mov	r4, r1
 800452e:	6831      	ldr	r1, [r6, #0]
 8004530:	4605      	mov	r5, r0
 8004532:	b911      	cbnz	r1, 800453a <sbrk_aligned+0x12>
 8004534:	f000 f8bc 	bl	80046b0 <_sbrk_r>
 8004538:	6030      	str	r0, [r6, #0]
 800453a:	4621      	mov	r1, r4
 800453c:	4628      	mov	r0, r5
 800453e:	f000 f8b7 	bl	80046b0 <_sbrk_r>
 8004542:	1c43      	adds	r3, r0, #1
 8004544:	d00a      	beq.n	800455c <sbrk_aligned+0x34>
 8004546:	1cc4      	adds	r4, r0, #3
 8004548:	f024 0403 	bic.w	r4, r4, #3
 800454c:	42a0      	cmp	r0, r4
 800454e:	d007      	beq.n	8004560 <sbrk_aligned+0x38>
 8004550:	1a21      	subs	r1, r4, r0
 8004552:	4628      	mov	r0, r5
 8004554:	f000 f8ac 	bl	80046b0 <_sbrk_r>
 8004558:	3001      	adds	r0, #1
 800455a:	d101      	bne.n	8004560 <sbrk_aligned+0x38>
 800455c:	f04f 34ff 	mov.w	r4, #4294967295
 8004560:	4620      	mov	r0, r4
 8004562:	bd70      	pop	{r4, r5, r6, pc}
 8004564:	2000022c 	.word	0x2000022c

08004568 <_malloc_r>:
 8004568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800456c:	1ccd      	adds	r5, r1, #3
 800456e:	f025 0503 	bic.w	r5, r5, #3
 8004572:	3508      	adds	r5, #8
 8004574:	2d0c      	cmp	r5, #12
 8004576:	bf38      	it	cc
 8004578:	250c      	movcc	r5, #12
 800457a:	2d00      	cmp	r5, #0
 800457c:	4607      	mov	r7, r0
 800457e:	db01      	blt.n	8004584 <_malloc_r+0x1c>
 8004580:	42a9      	cmp	r1, r5
 8004582:	d905      	bls.n	8004590 <_malloc_r+0x28>
 8004584:	230c      	movs	r3, #12
 8004586:	2600      	movs	r6, #0
 8004588:	603b      	str	r3, [r7, #0]
 800458a:	4630      	mov	r0, r6
 800458c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004590:	4e2e      	ldr	r6, [pc, #184]	; (800464c <_malloc_r+0xe4>)
 8004592:	f000 f89d 	bl	80046d0 <__malloc_lock>
 8004596:	6833      	ldr	r3, [r6, #0]
 8004598:	461c      	mov	r4, r3
 800459a:	bb34      	cbnz	r4, 80045ea <_malloc_r+0x82>
 800459c:	4629      	mov	r1, r5
 800459e:	4638      	mov	r0, r7
 80045a0:	f7ff ffc2 	bl	8004528 <sbrk_aligned>
 80045a4:	1c43      	adds	r3, r0, #1
 80045a6:	4604      	mov	r4, r0
 80045a8:	d14d      	bne.n	8004646 <_malloc_r+0xde>
 80045aa:	6834      	ldr	r4, [r6, #0]
 80045ac:	4626      	mov	r6, r4
 80045ae:	2e00      	cmp	r6, #0
 80045b0:	d140      	bne.n	8004634 <_malloc_r+0xcc>
 80045b2:	6823      	ldr	r3, [r4, #0]
 80045b4:	4631      	mov	r1, r6
 80045b6:	4638      	mov	r0, r7
 80045b8:	eb04 0803 	add.w	r8, r4, r3
 80045bc:	f000 f878 	bl	80046b0 <_sbrk_r>
 80045c0:	4580      	cmp	r8, r0
 80045c2:	d13a      	bne.n	800463a <_malloc_r+0xd2>
 80045c4:	6821      	ldr	r1, [r4, #0]
 80045c6:	3503      	adds	r5, #3
 80045c8:	1a6d      	subs	r5, r5, r1
 80045ca:	f025 0503 	bic.w	r5, r5, #3
 80045ce:	3508      	adds	r5, #8
 80045d0:	2d0c      	cmp	r5, #12
 80045d2:	bf38      	it	cc
 80045d4:	250c      	movcc	r5, #12
 80045d6:	4638      	mov	r0, r7
 80045d8:	4629      	mov	r1, r5
 80045da:	f7ff ffa5 	bl	8004528 <sbrk_aligned>
 80045de:	3001      	adds	r0, #1
 80045e0:	d02b      	beq.n	800463a <_malloc_r+0xd2>
 80045e2:	6823      	ldr	r3, [r4, #0]
 80045e4:	442b      	add	r3, r5
 80045e6:	6023      	str	r3, [r4, #0]
 80045e8:	e00e      	b.n	8004608 <_malloc_r+0xa0>
 80045ea:	6822      	ldr	r2, [r4, #0]
 80045ec:	1b52      	subs	r2, r2, r5
 80045ee:	d41e      	bmi.n	800462e <_malloc_r+0xc6>
 80045f0:	2a0b      	cmp	r2, #11
 80045f2:	d916      	bls.n	8004622 <_malloc_r+0xba>
 80045f4:	1961      	adds	r1, r4, r5
 80045f6:	42a3      	cmp	r3, r4
 80045f8:	6025      	str	r5, [r4, #0]
 80045fa:	bf18      	it	ne
 80045fc:	6059      	strne	r1, [r3, #4]
 80045fe:	6863      	ldr	r3, [r4, #4]
 8004600:	bf08      	it	eq
 8004602:	6031      	streq	r1, [r6, #0]
 8004604:	5162      	str	r2, [r4, r5]
 8004606:	604b      	str	r3, [r1, #4]
 8004608:	4638      	mov	r0, r7
 800460a:	f104 060b 	add.w	r6, r4, #11
 800460e:	f000 f865 	bl	80046dc <__malloc_unlock>
 8004612:	f026 0607 	bic.w	r6, r6, #7
 8004616:	1d23      	adds	r3, r4, #4
 8004618:	1af2      	subs	r2, r6, r3
 800461a:	d0b6      	beq.n	800458a <_malloc_r+0x22>
 800461c:	1b9b      	subs	r3, r3, r6
 800461e:	50a3      	str	r3, [r4, r2]
 8004620:	e7b3      	b.n	800458a <_malloc_r+0x22>
 8004622:	6862      	ldr	r2, [r4, #4]
 8004624:	42a3      	cmp	r3, r4
 8004626:	bf0c      	ite	eq
 8004628:	6032      	streq	r2, [r6, #0]
 800462a:	605a      	strne	r2, [r3, #4]
 800462c:	e7ec      	b.n	8004608 <_malloc_r+0xa0>
 800462e:	4623      	mov	r3, r4
 8004630:	6864      	ldr	r4, [r4, #4]
 8004632:	e7b2      	b.n	800459a <_malloc_r+0x32>
 8004634:	4634      	mov	r4, r6
 8004636:	6876      	ldr	r6, [r6, #4]
 8004638:	e7b9      	b.n	80045ae <_malloc_r+0x46>
 800463a:	230c      	movs	r3, #12
 800463c:	4638      	mov	r0, r7
 800463e:	603b      	str	r3, [r7, #0]
 8004640:	f000 f84c 	bl	80046dc <__malloc_unlock>
 8004644:	e7a1      	b.n	800458a <_malloc_r+0x22>
 8004646:	6025      	str	r5, [r4, #0]
 8004648:	e7de      	b.n	8004608 <_malloc_r+0xa0>
 800464a:	bf00      	nop
 800464c:	20000228 	.word	0x20000228

08004650 <_realloc_r>:
 8004650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004654:	4680      	mov	r8, r0
 8004656:	4614      	mov	r4, r2
 8004658:	460e      	mov	r6, r1
 800465a:	b921      	cbnz	r1, 8004666 <_realloc_r+0x16>
 800465c:	4611      	mov	r1, r2
 800465e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004662:	f7ff bf81 	b.w	8004568 <_malloc_r>
 8004666:	b92a      	cbnz	r2, 8004674 <_realloc_r+0x24>
 8004668:	f7ff ff16 	bl	8004498 <_free_r>
 800466c:	4625      	mov	r5, r4
 800466e:	4628      	mov	r0, r5
 8004670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004674:	f000 f838 	bl	80046e8 <_malloc_usable_size_r>
 8004678:	4284      	cmp	r4, r0
 800467a:	4607      	mov	r7, r0
 800467c:	d802      	bhi.n	8004684 <_realloc_r+0x34>
 800467e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004682:	d812      	bhi.n	80046aa <_realloc_r+0x5a>
 8004684:	4621      	mov	r1, r4
 8004686:	4640      	mov	r0, r8
 8004688:	f7ff ff6e 	bl	8004568 <_malloc_r>
 800468c:	4605      	mov	r5, r0
 800468e:	2800      	cmp	r0, #0
 8004690:	d0ed      	beq.n	800466e <_realloc_r+0x1e>
 8004692:	42bc      	cmp	r4, r7
 8004694:	4622      	mov	r2, r4
 8004696:	4631      	mov	r1, r6
 8004698:	bf28      	it	cs
 800469a:	463a      	movcs	r2, r7
 800469c:	f7ff fed4 	bl	8004448 <memcpy>
 80046a0:	4631      	mov	r1, r6
 80046a2:	4640      	mov	r0, r8
 80046a4:	f7ff fef8 	bl	8004498 <_free_r>
 80046a8:	e7e1      	b.n	800466e <_realloc_r+0x1e>
 80046aa:	4635      	mov	r5, r6
 80046ac:	e7df      	b.n	800466e <_realloc_r+0x1e>
	...

080046b0 <_sbrk_r>:
 80046b0:	b538      	push	{r3, r4, r5, lr}
 80046b2:	2300      	movs	r3, #0
 80046b4:	4d05      	ldr	r5, [pc, #20]	; (80046cc <_sbrk_r+0x1c>)
 80046b6:	4604      	mov	r4, r0
 80046b8:	4608      	mov	r0, r1
 80046ba:	602b      	str	r3, [r5, #0]
 80046bc:	f7fc f9c8 	bl	8000a50 <_sbrk>
 80046c0:	1c43      	adds	r3, r0, #1
 80046c2:	d102      	bne.n	80046ca <_sbrk_r+0x1a>
 80046c4:	682b      	ldr	r3, [r5, #0]
 80046c6:	b103      	cbz	r3, 80046ca <_sbrk_r+0x1a>
 80046c8:	6023      	str	r3, [r4, #0]
 80046ca:	bd38      	pop	{r3, r4, r5, pc}
 80046cc:	20000230 	.word	0x20000230

080046d0 <__malloc_lock>:
 80046d0:	4801      	ldr	r0, [pc, #4]	; (80046d8 <__malloc_lock+0x8>)
 80046d2:	f000 b811 	b.w	80046f8 <__retarget_lock_acquire_recursive>
 80046d6:	bf00      	nop
 80046d8:	20000234 	.word	0x20000234

080046dc <__malloc_unlock>:
 80046dc:	4801      	ldr	r0, [pc, #4]	; (80046e4 <__malloc_unlock+0x8>)
 80046de:	f000 b80c 	b.w	80046fa <__retarget_lock_release_recursive>
 80046e2:	bf00      	nop
 80046e4:	20000234 	.word	0x20000234

080046e8 <_malloc_usable_size_r>:
 80046e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046ec:	1f18      	subs	r0, r3, #4
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	bfbc      	itt	lt
 80046f2:	580b      	ldrlt	r3, [r1, r0]
 80046f4:	18c0      	addlt	r0, r0, r3
 80046f6:	4770      	bx	lr

080046f8 <__retarget_lock_acquire_recursive>:
 80046f8:	4770      	bx	lr

080046fa <__retarget_lock_release_recursive>:
 80046fa:	4770      	bx	lr

080046fc <_init>:
 80046fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046fe:	bf00      	nop
 8004700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004702:	bc08      	pop	{r3}
 8004704:	469e      	mov	lr, r3
 8004706:	4770      	bx	lr

08004708 <_fini>:
 8004708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800470a:	bf00      	nop
 800470c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800470e:	bc08      	pop	{r3}
 8004710:	469e      	mov	lr, r3
 8004712:	4770      	bx	lr
