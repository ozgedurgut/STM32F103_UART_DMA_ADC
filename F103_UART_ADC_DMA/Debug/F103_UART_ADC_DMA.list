
F103_UART_ADC_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036d4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  080037e0  080037e0  000137e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003844  08003844  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08003844  08003844  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003844  08003844  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003844  08003844  00013844  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003848  08003848  00013848  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800384c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000208  20000078  080038c4  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000280  080038c4  00020280  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008456  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bdf  00000000  00000000  000284f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000880  00000000  00000000  0002a0d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007c8  00000000  00000000  0002a958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017a72  00000000  00000000  0002b120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000abe4  00000000  00000000  00042b92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008798a  00000000  00000000  0004d776  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d5100  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002520  00000000  00000000  000d5150  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	080037c8 	.word	0x080037c8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	080037c8 	.word	0x080037c8

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <HAL_UART_TxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800015c:	b480      	push	{r7}
 800015e:	b083      	sub	sp, #12
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
	//HAL_UART_DMA_Tx_Stop(&huart1);

}
 8000164:	bf00      	nop
 8000166:	370c      	adds	r7, #12
 8000168:	46bd      	mov	sp, r7
 800016a:	bc80      	pop	{r7}
 800016c:	4770      	bx	lr
	...

08000170 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b084      	sub	sp, #16
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	uint8_t i;
	if (huart->Instance == USART1)  //current UART
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	681b      	ldr	r3, [r3, #0]
 800017c:	4a19      	ldr	r2, [pc, #100]	; (80001e4 <HAL_UART_RxCpltCallback+0x74>)
 800017e:	4293      	cmp	r3, r2
 8000180:	d12b      	bne.n	80001da <HAL_UART_RxCpltCallback+0x6a>
	{
		if (Rx_indx==0) {for (i=0;i<100;i++) Rx_Buffer[i]=0;}   //clear Rx_Buffer before receiving new data
 8000182:	4b19      	ldr	r3, [pc, #100]	; (80001e8 <HAL_UART_RxCpltCallback+0x78>)
 8000184:	781b      	ldrb	r3, [r3, #0]
 8000186:	2b00      	cmp	r3, #0
 8000188:	d10c      	bne.n	80001a4 <HAL_UART_RxCpltCallback+0x34>
 800018a:	2300      	movs	r3, #0
 800018c:	73fb      	strb	r3, [r7, #15]
 800018e:	e006      	b.n	800019e <HAL_UART_RxCpltCallback+0x2e>
 8000190:	7bfb      	ldrb	r3, [r7, #15]
 8000192:	4a16      	ldr	r2, [pc, #88]	; (80001ec <HAL_UART_RxCpltCallback+0x7c>)
 8000194:	2100      	movs	r1, #0
 8000196:	54d1      	strb	r1, [r2, r3]
 8000198:	7bfb      	ldrb	r3, [r7, #15]
 800019a:	3301      	adds	r3, #1
 800019c:	73fb      	strb	r3, [r7, #15]
 800019e:	7bfb      	ldrb	r3, [r7, #15]
 80001a0:	2b63      	cmp	r3, #99	; 0x63
 80001a2:	d9f5      	bls.n	8000190 <HAL_UART_RxCpltCallback+0x20>

		if (Rx_data[0]!=13) //if received data different from ascii 13 (enter)
 80001a4:	4b12      	ldr	r3, [pc, #72]	; (80001f0 <HAL_UART_RxCpltCallback+0x80>)
 80001a6:	781b      	ldrb	r3, [r3, #0]
 80001a8:	2b0d      	cmp	r3, #13
 80001aa:	d00b      	beq.n	80001c4 <HAL_UART_RxCpltCallback+0x54>
		{
			Rx_Buffer[Rx_indx++]=Rx_data[0];    //add data to Rx_Buffer
 80001ac:	4b0e      	ldr	r3, [pc, #56]	; (80001e8 <HAL_UART_RxCpltCallback+0x78>)
 80001ae:	781b      	ldrb	r3, [r3, #0]
 80001b0:	1c5a      	adds	r2, r3, #1
 80001b2:	b2d1      	uxtb	r1, r2
 80001b4:	4a0c      	ldr	r2, [pc, #48]	; (80001e8 <HAL_UART_RxCpltCallback+0x78>)
 80001b6:	7011      	strb	r1, [r2, #0]
 80001b8:	461a      	mov	r2, r3
 80001ba:	4b0d      	ldr	r3, [pc, #52]	; (80001f0 <HAL_UART_RxCpltCallback+0x80>)
 80001bc:	7819      	ldrb	r1, [r3, #0]
 80001be:	4b0b      	ldr	r3, [pc, #44]	; (80001ec <HAL_UART_RxCpltCallback+0x7c>)
 80001c0:	5499      	strb	r1, [r3, r2]
 80001c2:	e005      	b.n	80001d0 <HAL_UART_RxCpltCallback+0x60>
		}
		else            //if received data = 13
		{
			Rx_indx=0;
 80001c4:	4b08      	ldr	r3, [pc, #32]	; (80001e8 <HAL_UART_RxCpltCallback+0x78>)
 80001c6:	2200      	movs	r2, #0
 80001c8:	701a      	strb	r2, [r3, #0]
			Transfer_cplt=1;//transfer complete, data is ready to read
 80001ca:	4b0a      	ldr	r3, [pc, #40]	; (80001f4 <HAL_UART_RxCpltCallback+0x84>)
 80001cc:	2201      	movs	r2, #1
 80001ce:	701a      	strb	r2, [r3, #0]
		}

		HAL_UART_Receive_IT(&huart1, Rx_data, 1);   //activate UART receive interrupt every time
 80001d0:	2201      	movs	r2, #1
 80001d2:	4907      	ldr	r1, [pc, #28]	; (80001f0 <HAL_UART_RxCpltCallback+0x80>)
 80001d4:	4808      	ldr	r0, [pc, #32]	; (80001f8 <HAL_UART_RxCpltCallback+0x88>)
 80001d6:	f002 f93a 	bl	800244e <HAL_UART_Receive_IT>
	}

}
 80001da:	bf00      	nop
 80001dc:	3710      	adds	r7, #16
 80001de:	46bd      	mov	sp, r7
 80001e0:	bd80      	pop	{r7, pc}
 80001e2:	bf00      	nop
 80001e4:	40013800 	.word	0x40013800
 80001e8:	20000190 	.word	0x20000190
 80001ec:	20000198 	.word	0x20000198
 80001f0:	20000194 	.word	0x20000194
 80001f4:	200001fc 	.word	0x200001fc
 80001f8:	20000108 	.word	0x20000108

080001fc <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000200:	f000 fb4a 	bl	8000898 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000204:	f000 f836 	bl	8000274 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000208:	f000 f922 	bl	8000450 <MX_GPIO_Init>
	MX_DMA_Init();
 800020c:	f000 f8fa 	bl	8000404 <MX_DMA_Init>
	MX_ADC1_Init();
 8000210:	f000 f880 	bl	8000314 <MX_ADC1_Init>
	MX_USART1_UART_Init();
 8000214:	f000 f8cc 	bl	80003b0 <MX_USART1_UART_Init>
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		if(Transfer_cplt){
 8000218:	4b0f      	ldr	r3, [pc, #60]	; (8000258 <main+0x5c>)
 800021a:	781b      	ldrb	r3, [r3, #0]
 800021c:	2b00      	cmp	r3, #0
 800021e:	d0fb      	beq.n	8000218 <main+0x1c>
			sprintf(buffer,"%s\r\n",Rx_Buffer);
 8000220:	4a0e      	ldr	r2, [pc, #56]	; (800025c <main+0x60>)
 8000222:	490f      	ldr	r1, [pc, #60]	; (8000260 <main+0x64>)
 8000224:	480f      	ldr	r0, [pc, #60]	; (8000264 <main+0x68>)
 8000226:	f002 fe55 	bl	8002ed4 <siprintf>
			len=strlen(buffer);
 800022a:	480e      	ldr	r0, [pc, #56]	; (8000264 <main+0x68>)
 800022c:	f7ff ff8e 	bl	800014c <strlen>
 8000230:	4603      	mov	r3, r0
 8000232:	461a      	mov	r2, r3
 8000234:	4b0c      	ldr	r3, [pc, #48]	; (8000268 <main+0x6c>)
 8000236:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit_DMA(&huart1, (uint8_t *)TxBuffer, len);
 8000238:	4b0b      	ldr	r3, [pc, #44]	; (8000268 <main+0x6c>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	b29b      	uxth	r3, r3
 800023e:	461a      	mov	r2, r3
 8000240:	490a      	ldr	r1, [pc, #40]	; (800026c <main+0x70>)
 8000242:	480b      	ldr	r0, [pc, #44]	; (8000270 <main+0x74>)
 8000244:	f002 f934 	bl	80024b0 <HAL_UART_Transmit_DMA>
			Transfer_cplt=0;
 8000248:	4b03      	ldr	r3, [pc, #12]	; (8000258 <main+0x5c>)
 800024a:	2200      	movs	r2, #0
 800024c:	701a      	strb	r2, [r3, #0]
			HAL_Delay(500);
 800024e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000252:	f000 fb83 	bl	800095c <HAL_Delay>
		if(Transfer_cplt){
 8000256:	e7df      	b.n	8000218 <main+0x1c>
 8000258:	200001fc 	.word	0x200001fc
 800025c:	20000198 	.word	0x20000198
 8000260:	080037e0 	.word	0x080037e0
 8000264:	20000204 	.word	0x20000204
 8000268:	20000200 	.word	0x20000200
 800026c:	20000000 	.word	0x20000000
 8000270:	20000108 	.word	0x20000108

08000274 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b094      	sub	sp, #80	; 0x50
 8000278:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800027a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800027e:	2228      	movs	r2, #40	; 0x28
 8000280:	2100      	movs	r1, #0
 8000282:	4618      	mov	r0, r3
 8000284:	f002 fe1e 	bl	8002ec4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000288:	f107 0314 	add.w	r3, r7, #20
 800028c:	2200      	movs	r2, #0
 800028e:	601a      	str	r2, [r3, #0]
 8000290:	605a      	str	r2, [r3, #4]
 8000292:	609a      	str	r2, [r3, #8]
 8000294:	60da      	str	r2, [r3, #12]
 8000296:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000298:	1d3b      	adds	r3, r7, #4
 800029a:	2200      	movs	r2, #0
 800029c:	601a      	str	r2, [r3, #0]
 800029e:	605a      	str	r2, [r3, #4]
 80002a0:	609a      	str	r2, [r3, #8]
 80002a2:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002a4:	2302      	movs	r3, #2
 80002a6:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002a8:	2301      	movs	r3, #1
 80002aa:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002ac:	2310      	movs	r3, #16
 80002ae:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002b0:	2300      	movs	r3, #0
 80002b2:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002b8:	4618      	mov	r0, r3
 80002ba:	f001 fbab 	bl	8001a14 <HAL_RCC_OscConfig>
 80002be:	4603      	mov	r3, r0
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d001      	beq.n	80002c8 <SystemClock_Config+0x54>
	{
		Error_Handler();
 80002c4:	f000 f910 	bl	80004e8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002c8:	230f      	movs	r3, #15
 80002ca:	617b      	str	r3, [r7, #20]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002cc:	2300      	movs	r3, #0
 80002ce:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002d0:	2300      	movs	r3, #0
 80002d2:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002d4:	2300      	movs	r3, #0
 80002d6:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002d8:	2300      	movs	r3, #0
 80002da:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002dc:	f107 0314 	add.w	r3, r7, #20
 80002e0:	2100      	movs	r1, #0
 80002e2:	4618      	mov	r0, r3
 80002e4:	f001 fe18 	bl	8001f18 <HAL_RCC_ClockConfig>
 80002e8:	4603      	mov	r3, r0
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d001      	beq.n	80002f2 <SystemClock_Config+0x7e>
	{
		Error_Handler();
 80002ee:	f000 f8fb 	bl	80004e8 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80002f2:	2302      	movs	r3, #2
 80002f4:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80002f6:	2300      	movs	r3, #0
 80002f8:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002fa:	1d3b      	adds	r3, r7, #4
 80002fc:	4618      	mov	r0, r3
 80002fe:	f001 ffa3 	bl	8002248 <HAL_RCCEx_PeriphCLKConfig>
 8000302:	4603      	mov	r3, r0
 8000304:	2b00      	cmp	r3, #0
 8000306:	d001      	beq.n	800030c <SystemClock_Config+0x98>
	{
		Error_Handler();
 8000308:	f000 f8ee 	bl	80004e8 <Error_Handler>
	}
}
 800030c:	bf00      	nop
 800030e:	3750      	adds	r7, #80	; 0x50
 8000310:	46bd      	mov	sp, r7
 8000312:	bd80      	pop	{r7, pc}

08000314 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b084      	sub	sp, #16
 8000318:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 800031a:	1d3b      	adds	r3, r7, #4
 800031c:	2200      	movs	r2, #0
 800031e:	601a      	str	r2, [r3, #0]
 8000320:	605a      	str	r2, [r3, #4]
 8000322:	609a      	str	r2, [r3, #8]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 8000324:	4b20      	ldr	r3, [pc, #128]	; (80003a8 <MX_ADC1_Init+0x94>)
 8000326:	4a21      	ldr	r2, [pc, #132]	; (80003ac <MX_ADC1_Init+0x98>)
 8000328:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800032a:	4b1f      	ldr	r3, [pc, #124]	; (80003a8 <MX_ADC1_Init+0x94>)
 800032c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000330:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8000332:	4b1d      	ldr	r3, [pc, #116]	; (80003a8 <MX_ADC1_Init+0x94>)
 8000334:	2201      	movs	r2, #1
 8000336:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000338:	4b1b      	ldr	r3, [pc, #108]	; (80003a8 <MX_ADC1_Init+0x94>)
 800033a:	2200      	movs	r2, #0
 800033c:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800033e:	4b1a      	ldr	r3, [pc, #104]	; (80003a8 <MX_ADC1_Init+0x94>)
 8000340:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000344:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000346:	4b18      	ldr	r3, [pc, #96]	; (80003a8 <MX_ADC1_Init+0x94>)
 8000348:	2200      	movs	r2, #0
 800034a:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 2;
 800034c:	4b16      	ldr	r3, [pc, #88]	; (80003a8 <MX_ADC1_Init+0x94>)
 800034e:	2202      	movs	r2, #2
 8000350:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000352:	4815      	ldr	r0, [pc, #84]	; (80003a8 <MX_ADC1_Init+0x94>)
 8000354:	f000 fb26 	bl	80009a4 <HAL_ADC_Init>
 8000358:	4603      	mov	r3, r0
 800035a:	2b00      	cmp	r3, #0
 800035c:	d001      	beq.n	8000362 <MX_ADC1_Init+0x4e>
	{
		Error_Handler();
 800035e:	f000 f8c3 	bl	80004e8 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8000362:	2300      	movs	r3, #0
 8000364:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000366:	2301      	movs	r3, #1
 8000368:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800036a:	2300      	movs	r3, #0
 800036c:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800036e:	1d3b      	adds	r3, r7, #4
 8000370:	4619      	mov	r1, r3
 8000372:	480d      	ldr	r0, [pc, #52]	; (80003a8 <MX_ADC1_Init+0x94>)
 8000374:	f000 fcc4 	bl	8000d00 <HAL_ADC_ConfigChannel>
 8000378:	4603      	mov	r3, r0
 800037a:	2b00      	cmp	r3, #0
 800037c:	d001      	beq.n	8000382 <MX_ADC1_Init+0x6e>
	{
		Error_Handler();
 800037e:	f000 f8b3 	bl	80004e8 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 8000382:	2301      	movs	r3, #1
 8000384:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 8000386:	2302      	movs	r3, #2
 8000388:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800038a:	1d3b      	adds	r3, r7, #4
 800038c:	4619      	mov	r1, r3
 800038e:	4806      	ldr	r0, [pc, #24]	; (80003a8 <MX_ADC1_Init+0x94>)
 8000390:	f000 fcb6 	bl	8000d00 <HAL_ADC_ConfigChannel>
 8000394:	4603      	mov	r3, r0
 8000396:	2b00      	cmp	r3, #0
 8000398:	d001      	beq.n	800039e <MX_ADC1_Init+0x8a>
	{
		Error_Handler();
 800039a:	f000 f8a5 	bl	80004e8 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 800039e:	bf00      	nop
 80003a0:	3710      	adds	r7, #16
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bd80      	pop	{r7, pc}
 80003a6:	bf00      	nop
 80003a8:	20000094 	.word	0x20000094
 80003ac:	40012400 	.word	0x40012400

080003b0 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80003b4:	4b11      	ldr	r3, [pc, #68]	; (80003fc <MX_USART1_UART_Init+0x4c>)
 80003b6:	4a12      	ldr	r2, [pc, #72]	; (8000400 <MX_USART1_UART_Init+0x50>)
 80003b8:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 80003ba:	4b10      	ldr	r3, [pc, #64]	; (80003fc <MX_USART1_UART_Init+0x4c>)
 80003bc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80003c0:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003c2:	4b0e      	ldr	r3, [pc, #56]	; (80003fc <MX_USART1_UART_Init+0x4c>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80003c8:	4b0c      	ldr	r3, [pc, #48]	; (80003fc <MX_USART1_UART_Init+0x4c>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80003ce:	4b0b      	ldr	r3, [pc, #44]	; (80003fc <MX_USART1_UART_Init+0x4c>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80003d4:	4b09      	ldr	r3, [pc, #36]	; (80003fc <MX_USART1_UART_Init+0x4c>)
 80003d6:	220c      	movs	r2, #12
 80003d8:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003da:	4b08      	ldr	r3, [pc, #32]	; (80003fc <MX_USART1_UART_Init+0x4c>)
 80003dc:	2200      	movs	r2, #0
 80003de:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003e0:	4b06      	ldr	r3, [pc, #24]	; (80003fc <MX_USART1_UART_Init+0x4c>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 80003e6:	4805      	ldr	r0, [pc, #20]	; (80003fc <MX_USART1_UART_Init+0x4c>)
 80003e8:	f001 ffe4 	bl	80023b4 <HAL_UART_Init>
 80003ec:	4603      	mov	r3, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d001      	beq.n	80003f6 <MX_USART1_UART_Init+0x46>
	{
		Error_Handler();
 80003f2:	f000 f879 	bl	80004e8 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80003f6:	bf00      	nop
 80003f8:	bd80      	pop	{r7, pc}
 80003fa:	bf00      	nop
 80003fc:	20000108 	.word	0x20000108
 8000400:	40013800 	.word	0x40013800

08000404 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b082      	sub	sp, #8
 8000408:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 800040a:	4b10      	ldr	r3, [pc, #64]	; (800044c <MX_DMA_Init+0x48>)
 800040c:	695b      	ldr	r3, [r3, #20]
 800040e:	4a0f      	ldr	r2, [pc, #60]	; (800044c <MX_DMA_Init+0x48>)
 8000410:	f043 0301 	orr.w	r3, r3, #1
 8000414:	6153      	str	r3, [r2, #20]
 8000416:	4b0d      	ldr	r3, [pc, #52]	; (800044c <MX_DMA_Init+0x48>)
 8000418:	695b      	ldr	r3, [r3, #20]
 800041a:	f003 0301 	and.w	r3, r3, #1
 800041e:	607b      	str	r3, [r7, #4]
 8000420:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000422:	2200      	movs	r2, #0
 8000424:	2100      	movs	r1, #0
 8000426:	200b      	movs	r0, #11
 8000428:	f000 fe83 	bl	8001132 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800042c:	200b      	movs	r0, #11
 800042e:	f000 fe9c 	bl	800116a <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000432:	2200      	movs	r2, #0
 8000434:	2100      	movs	r1, #0
 8000436:	200e      	movs	r0, #14
 8000438:	f000 fe7b 	bl	8001132 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800043c:	200e      	movs	r0, #14
 800043e:	f000 fe94 	bl	800116a <HAL_NVIC_EnableIRQ>

}
 8000442:	bf00      	nop
 8000444:	3708      	adds	r7, #8
 8000446:	46bd      	mov	sp, r7
 8000448:	bd80      	pop	{r7, pc}
 800044a:	bf00      	nop
 800044c:	40021000 	.word	0x40021000

08000450 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b088      	sub	sp, #32
 8000454:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000456:	f107 0310 	add.w	r3, r7, #16
 800045a:	2200      	movs	r2, #0
 800045c:	601a      	str	r2, [r3, #0]
 800045e:	605a      	str	r2, [r3, #4]
 8000460:	609a      	str	r2, [r3, #8]
 8000462:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000464:	4b1e      	ldr	r3, [pc, #120]	; (80004e0 <MX_GPIO_Init+0x90>)
 8000466:	699b      	ldr	r3, [r3, #24]
 8000468:	4a1d      	ldr	r2, [pc, #116]	; (80004e0 <MX_GPIO_Init+0x90>)
 800046a:	f043 0320 	orr.w	r3, r3, #32
 800046e:	6193      	str	r3, [r2, #24]
 8000470:	4b1b      	ldr	r3, [pc, #108]	; (80004e0 <MX_GPIO_Init+0x90>)
 8000472:	699b      	ldr	r3, [r3, #24]
 8000474:	f003 0320 	and.w	r3, r3, #32
 8000478:	60fb      	str	r3, [r7, #12]
 800047a:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800047c:	4b18      	ldr	r3, [pc, #96]	; (80004e0 <MX_GPIO_Init+0x90>)
 800047e:	699b      	ldr	r3, [r3, #24]
 8000480:	4a17      	ldr	r2, [pc, #92]	; (80004e0 <MX_GPIO_Init+0x90>)
 8000482:	f043 0304 	orr.w	r3, r3, #4
 8000486:	6193      	str	r3, [r2, #24]
 8000488:	4b15      	ldr	r3, [pc, #84]	; (80004e0 <MX_GPIO_Init+0x90>)
 800048a:	699b      	ldr	r3, [r3, #24]
 800048c:	f003 0304 	and.w	r3, r3, #4
 8000490:	60bb      	str	r3, [r7, #8]
 8000492:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000494:	4b12      	ldr	r3, [pc, #72]	; (80004e0 <MX_GPIO_Init+0x90>)
 8000496:	699b      	ldr	r3, [r3, #24]
 8000498:	4a11      	ldr	r2, [pc, #68]	; (80004e0 <MX_GPIO_Init+0x90>)
 800049a:	f043 0308 	orr.w	r3, r3, #8
 800049e:	6193      	str	r3, [r2, #24]
 80004a0:	4b0f      	ldr	r3, [pc, #60]	; (80004e0 <MX_GPIO_Init+0x90>)
 80004a2:	699b      	ldr	r3, [r3, #24]
 80004a4:	f003 0308 	and.w	r3, r3, #8
 80004a8:	607b      	str	r3, [r7, #4]
 80004aa:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_10, GPIO_PIN_RESET);
 80004ac:	2200      	movs	r2, #0
 80004ae:	f240 4104 	movw	r1, #1028	; 0x404
 80004b2:	480c      	ldr	r0, [pc, #48]	; (80004e4 <MX_GPIO_Init+0x94>)
 80004b4:	f001 fa96 	bl	80019e4 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PB2 PB10 */
	GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10;
 80004b8:	f240 4304 	movw	r3, #1028	; 0x404
 80004bc:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004be:	2301      	movs	r3, #1
 80004c0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c2:	2300      	movs	r3, #0
 80004c4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004c6:	2302      	movs	r3, #2
 80004c8:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004ca:	f107 0310 	add.w	r3, r7, #16
 80004ce:	4619      	mov	r1, r3
 80004d0:	4804      	ldr	r0, [pc, #16]	; (80004e4 <MX_GPIO_Init+0x94>)
 80004d2:	f001 f903 	bl	80016dc <HAL_GPIO_Init>

}
 80004d6:	bf00      	nop
 80004d8:	3720      	adds	r7, #32
 80004da:	46bd      	mov	sp, r7
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	bf00      	nop
 80004e0:	40021000 	.word	0x40021000
 80004e4:	40010c00 	.word	0x40010c00

080004e8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004ec:	b672      	cpsid	i
}
 80004ee:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80004f0:	e7fe      	b.n	80004f0 <Error_Handler+0x8>
	...

080004f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b085      	sub	sp, #20
 80004f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004fa:	4b15      	ldr	r3, [pc, #84]	; (8000550 <HAL_MspInit+0x5c>)
 80004fc:	699b      	ldr	r3, [r3, #24]
 80004fe:	4a14      	ldr	r2, [pc, #80]	; (8000550 <HAL_MspInit+0x5c>)
 8000500:	f043 0301 	orr.w	r3, r3, #1
 8000504:	6193      	str	r3, [r2, #24]
 8000506:	4b12      	ldr	r3, [pc, #72]	; (8000550 <HAL_MspInit+0x5c>)
 8000508:	699b      	ldr	r3, [r3, #24]
 800050a:	f003 0301 	and.w	r3, r3, #1
 800050e:	60bb      	str	r3, [r7, #8]
 8000510:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000512:	4b0f      	ldr	r3, [pc, #60]	; (8000550 <HAL_MspInit+0x5c>)
 8000514:	69db      	ldr	r3, [r3, #28]
 8000516:	4a0e      	ldr	r2, [pc, #56]	; (8000550 <HAL_MspInit+0x5c>)
 8000518:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800051c:	61d3      	str	r3, [r2, #28]
 800051e:	4b0c      	ldr	r3, [pc, #48]	; (8000550 <HAL_MspInit+0x5c>)
 8000520:	69db      	ldr	r3, [r3, #28]
 8000522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000526:	607b      	str	r3, [r7, #4]
 8000528:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800052a:	4b0a      	ldr	r3, [pc, #40]	; (8000554 <HAL_MspInit+0x60>)
 800052c:	685b      	ldr	r3, [r3, #4]
 800052e:	60fb      	str	r3, [r7, #12]
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000536:	60fb      	str	r3, [r7, #12]
 8000538:	68fb      	ldr	r3, [r7, #12]
 800053a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800053e:	60fb      	str	r3, [r7, #12]
 8000540:	4a04      	ldr	r2, [pc, #16]	; (8000554 <HAL_MspInit+0x60>)
 8000542:	68fb      	ldr	r3, [r7, #12]
 8000544:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000546:	bf00      	nop
 8000548:	3714      	adds	r7, #20
 800054a:	46bd      	mov	sp, r7
 800054c:	bc80      	pop	{r7}
 800054e:	4770      	bx	lr
 8000550:	40021000 	.word	0x40021000
 8000554:	40010000 	.word	0x40010000

08000558 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b088      	sub	sp, #32
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000560:	f107 0310 	add.w	r3, r7, #16
 8000564:	2200      	movs	r2, #0
 8000566:	601a      	str	r2, [r3, #0]
 8000568:	605a      	str	r2, [r3, #4]
 800056a:	609a      	str	r2, [r3, #8]
 800056c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	4a2c      	ldr	r2, [pc, #176]	; (8000624 <HAL_ADC_MspInit+0xcc>)
 8000574:	4293      	cmp	r3, r2
 8000576:	d151      	bne.n	800061c <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000578:	4b2b      	ldr	r3, [pc, #172]	; (8000628 <HAL_ADC_MspInit+0xd0>)
 800057a:	699b      	ldr	r3, [r3, #24]
 800057c:	4a2a      	ldr	r2, [pc, #168]	; (8000628 <HAL_ADC_MspInit+0xd0>)
 800057e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000582:	6193      	str	r3, [r2, #24]
 8000584:	4b28      	ldr	r3, [pc, #160]	; (8000628 <HAL_ADC_MspInit+0xd0>)
 8000586:	699b      	ldr	r3, [r3, #24]
 8000588:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800058c:	60fb      	str	r3, [r7, #12]
 800058e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000590:	4b25      	ldr	r3, [pc, #148]	; (8000628 <HAL_ADC_MspInit+0xd0>)
 8000592:	699b      	ldr	r3, [r3, #24]
 8000594:	4a24      	ldr	r2, [pc, #144]	; (8000628 <HAL_ADC_MspInit+0xd0>)
 8000596:	f043 0304 	orr.w	r3, r3, #4
 800059a:	6193      	str	r3, [r2, #24]
 800059c:	4b22      	ldr	r3, [pc, #136]	; (8000628 <HAL_ADC_MspInit+0xd0>)
 800059e:	699b      	ldr	r3, [r3, #24]
 80005a0:	f003 0304 	and.w	r3, r3, #4
 80005a4:	60bb      	str	r3, [r7, #8]
 80005a6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80005a8:	2303      	movs	r3, #3
 80005aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005ac:	2303      	movs	r3, #3
 80005ae:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005b0:	f107 0310 	add.w	r3, r7, #16
 80005b4:	4619      	mov	r1, r3
 80005b6:	481d      	ldr	r0, [pc, #116]	; (800062c <HAL_ADC_MspInit+0xd4>)
 80005b8:	f001 f890 	bl	80016dc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80005bc:	4b1c      	ldr	r3, [pc, #112]	; (8000630 <HAL_ADC_MspInit+0xd8>)
 80005be:	4a1d      	ldr	r2, [pc, #116]	; (8000634 <HAL_ADC_MspInit+0xdc>)
 80005c0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80005c2:	4b1b      	ldr	r3, [pc, #108]	; (8000630 <HAL_ADC_MspInit+0xd8>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80005c8:	4b19      	ldr	r3, [pc, #100]	; (8000630 <HAL_ADC_MspInit+0xd8>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80005ce:	4b18      	ldr	r3, [pc, #96]	; (8000630 <HAL_ADC_MspInit+0xd8>)
 80005d0:	2280      	movs	r2, #128	; 0x80
 80005d2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80005d4:	4b16      	ldr	r3, [pc, #88]	; (8000630 <HAL_ADC_MspInit+0xd8>)
 80005d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005da:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80005dc:	4b14      	ldr	r3, [pc, #80]	; (8000630 <HAL_ADC_MspInit+0xd8>)
 80005de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80005e2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80005e4:	4b12      	ldr	r3, [pc, #72]	; (8000630 <HAL_ADC_MspInit+0xd8>)
 80005e6:	2220      	movs	r2, #32
 80005e8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80005ea:	4b11      	ldr	r3, [pc, #68]	; (8000630 <HAL_ADC_MspInit+0xd8>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80005f0:	480f      	ldr	r0, [pc, #60]	; (8000630 <HAL_ADC_MspInit+0xd8>)
 80005f2:	f000 fdd5 	bl	80011a0 <HAL_DMA_Init>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80005fc:	f7ff ff74 	bl	80004e8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	4a0b      	ldr	r2, [pc, #44]	; (8000630 <HAL_ADC_MspInit+0xd8>)
 8000604:	621a      	str	r2, [r3, #32]
 8000606:	4a0a      	ldr	r2, [pc, #40]	; (8000630 <HAL_ADC_MspInit+0xd8>)
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800060c:	2200      	movs	r2, #0
 800060e:	2100      	movs	r1, #0
 8000610:	2012      	movs	r0, #18
 8000612:	f000 fd8e 	bl	8001132 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000616:	2012      	movs	r0, #18
 8000618:	f000 fda7 	bl	800116a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800061c:	bf00      	nop
 800061e:	3720      	adds	r7, #32
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	40012400 	.word	0x40012400
 8000628:	40021000 	.word	0x40021000
 800062c:	40010800 	.word	0x40010800
 8000630:	200000c4 	.word	0x200000c4
 8000634:	40020008 	.word	0x40020008

08000638 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b088      	sub	sp, #32
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000640:	f107 0310 	add.w	r3, r7, #16
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	609a      	str	r2, [r3, #8]
 800064c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	4a33      	ldr	r2, [pc, #204]	; (8000720 <HAL_UART_MspInit+0xe8>)
 8000654:	4293      	cmp	r3, r2
 8000656:	d15f      	bne.n	8000718 <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000658:	4b32      	ldr	r3, [pc, #200]	; (8000724 <HAL_UART_MspInit+0xec>)
 800065a:	699b      	ldr	r3, [r3, #24]
 800065c:	4a31      	ldr	r2, [pc, #196]	; (8000724 <HAL_UART_MspInit+0xec>)
 800065e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000662:	6193      	str	r3, [r2, #24]
 8000664:	4b2f      	ldr	r3, [pc, #188]	; (8000724 <HAL_UART_MspInit+0xec>)
 8000666:	699b      	ldr	r3, [r3, #24]
 8000668:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800066c:	60fb      	str	r3, [r7, #12]
 800066e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000670:	4b2c      	ldr	r3, [pc, #176]	; (8000724 <HAL_UART_MspInit+0xec>)
 8000672:	699b      	ldr	r3, [r3, #24]
 8000674:	4a2b      	ldr	r2, [pc, #172]	; (8000724 <HAL_UART_MspInit+0xec>)
 8000676:	f043 0304 	orr.w	r3, r3, #4
 800067a:	6193      	str	r3, [r2, #24]
 800067c:	4b29      	ldr	r3, [pc, #164]	; (8000724 <HAL_UART_MspInit+0xec>)
 800067e:	699b      	ldr	r3, [r3, #24]
 8000680:	f003 0304 	and.w	r3, r3, #4
 8000684:	60bb      	str	r3, [r7, #8]
 8000686:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000688:	f44f 7300 	mov.w	r3, #512	; 0x200
 800068c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800068e:	2302      	movs	r3, #2
 8000690:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000692:	2303      	movs	r3, #3
 8000694:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000696:	f107 0310 	add.w	r3, r7, #16
 800069a:	4619      	mov	r1, r3
 800069c:	4822      	ldr	r0, [pc, #136]	; (8000728 <HAL_UART_MspInit+0xf0>)
 800069e:	f001 f81d 	bl	80016dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80006a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006a8:	2300      	movs	r3, #0
 80006aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ac:	2300      	movs	r3, #0
 80006ae:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b0:	f107 0310 	add.w	r3, r7, #16
 80006b4:	4619      	mov	r1, r3
 80006b6:	481c      	ldr	r0, [pc, #112]	; (8000728 <HAL_UART_MspInit+0xf0>)
 80006b8:	f001 f810 	bl	80016dc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80006bc:	4b1b      	ldr	r3, [pc, #108]	; (800072c <HAL_UART_MspInit+0xf4>)
 80006be:	4a1c      	ldr	r2, [pc, #112]	; (8000730 <HAL_UART_MspInit+0xf8>)
 80006c0:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80006c2:	4b1a      	ldr	r3, [pc, #104]	; (800072c <HAL_UART_MspInit+0xf4>)
 80006c4:	2210      	movs	r2, #16
 80006c6:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80006c8:	4b18      	ldr	r3, [pc, #96]	; (800072c <HAL_UART_MspInit+0xf4>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80006ce:	4b17      	ldr	r3, [pc, #92]	; (800072c <HAL_UART_MspInit+0xf4>)
 80006d0:	2280      	movs	r2, #128	; 0x80
 80006d2:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80006d4:	4b15      	ldr	r3, [pc, #84]	; (800072c <HAL_UART_MspInit+0xf4>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80006da:	4b14      	ldr	r3, [pc, #80]	; (800072c <HAL_UART_MspInit+0xf4>)
 80006dc:	2200      	movs	r2, #0
 80006de:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 80006e0:	4b12      	ldr	r3, [pc, #72]	; (800072c <HAL_UART_MspInit+0xf4>)
 80006e2:	2220      	movs	r2, #32
 80006e4:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80006e6:	4b11      	ldr	r3, [pc, #68]	; (800072c <HAL_UART_MspInit+0xf4>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80006ec:	480f      	ldr	r0, [pc, #60]	; (800072c <HAL_UART_MspInit+0xf4>)
 80006ee:	f000 fd57 	bl	80011a0 <HAL_DMA_Init>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 80006f8:	f7ff fef6 	bl	80004e8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	4a0b      	ldr	r2, [pc, #44]	; (800072c <HAL_UART_MspInit+0xf4>)
 8000700:	635a      	str	r2, [r3, #52]	; 0x34
 8000702:	4a0a      	ldr	r2, [pc, #40]	; (800072c <HAL_UART_MspInit+0xf4>)
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000708:	2200      	movs	r2, #0
 800070a:	2100      	movs	r1, #0
 800070c:	2025      	movs	r0, #37	; 0x25
 800070e:	f000 fd10 	bl	8001132 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000712:	2025      	movs	r0, #37	; 0x25
 8000714:	f000 fd29 	bl	800116a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000718:	bf00      	nop
 800071a:	3720      	adds	r7, #32
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	40013800 	.word	0x40013800
 8000724:	40021000 	.word	0x40021000
 8000728:	40010800 	.word	0x40010800
 800072c:	2000014c 	.word	0x2000014c
 8000730:	40020044 	.word	0x40020044

08000734 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000738:	e7fe      	b.n	8000738 <NMI_Handler+0x4>

0800073a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800073a:	b480      	push	{r7}
 800073c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800073e:	e7fe      	b.n	800073e <HardFault_Handler+0x4>

08000740 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000744:	e7fe      	b.n	8000744 <MemManage_Handler+0x4>

08000746 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000746:	b480      	push	{r7}
 8000748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800074a:	e7fe      	b.n	800074a <BusFault_Handler+0x4>

0800074c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000750:	e7fe      	b.n	8000750 <UsageFault_Handler+0x4>

08000752 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000752:	b480      	push	{r7}
 8000754:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000756:	bf00      	nop
 8000758:	46bd      	mov	sp, r7
 800075a:	bc80      	pop	{r7}
 800075c:	4770      	bx	lr

0800075e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800075e:	b480      	push	{r7}
 8000760:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000762:	bf00      	nop
 8000764:	46bd      	mov	sp, r7
 8000766:	bc80      	pop	{r7}
 8000768:	4770      	bx	lr

0800076a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800076a:	b480      	push	{r7}
 800076c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800076e:	bf00      	nop
 8000770:	46bd      	mov	sp, r7
 8000772:	bc80      	pop	{r7}
 8000774:	4770      	bx	lr

08000776 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000776:	b580      	push	{r7, lr}
 8000778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800077a:	f000 f8d3 	bl	8000924 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800077e:	bf00      	nop
 8000780:	bd80      	pop	{r7, pc}
	...

08000784 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000788:	4802      	ldr	r0, [pc, #8]	; (8000794 <DMA1_Channel1_IRQHandler+0x10>)
 800078a:	f000 fe73 	bl	8001474 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	200000c4 	.word	0x200000c4

08000798 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800079c:	4802      	ldr	r0, [pc, #8]	; (80007a8 <DMA1_Channel4_IRQHandler+0x10>)
 800079e:	f000 fe69 	bl	8001474 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80007a2:	bf00      	nop
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	2000014c 	.word	0x2000014c

080007ac <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80007b0:	4802      	ldr	r0, [pc, #8]	; (80007bc <ADC1_2_IRQHandler+0x10>)
 80007b2:	f000 f9cf 	bl	8000b54 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80007b6:	bf00      	nop
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	20000094 	.word	0x20000094

080007c0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80007c4:	4802      	ldr	r0, [pc, #8]	; (80007d0 <USART1_IRQHandler+0x10>)
 80007c6:	f001 fedf 	bl	8002588 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80007ca:	bf00      	nop
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	20000108 	.word	0x20000108

080007d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b086      	sub	sp, #24
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007dc:	4a14      	ldr	r2, [pc, #80]	; (8000830 <_sbrk+0x5c>)
 80007de:	4b15      	ldr	r3, [pc, #84]	; (8000834 <_sbrk+0x60>)
 80007e0:	1ad3      	subs	r3, r2, r3
 80007e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007e4:	697b      	ldr	r3, [r7, #20]
 80007e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007e8:	4b13      	ldr	r3, [pc, #76]	; (8000838 <_sbrk+0x64>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d102      	bne.n	80007f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007f0:	4b11      	ldr	r3, [pc, #68]	; (8000838 <_sbrk+0x64>)
 80007f2:	4a12      	ldr	r2, [pc, #72]	; (800083c <_sbrk+0x68>)
 80007f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007f6:	4b10      	ldr	r3, [pc, #64]	; (8000838 <_sbrk+0x64>)
 80007f8:	681a      	ldr	r2, [r3, #0]
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	4413      	add	r3, r2
 80007fe:	693a      	ldr	r2, [r7, #16]
 8000800:	429a      	cmp	r2, r3
 8000802:	d207      	bcs.n	8000814 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000804:	f002 fb34 	bl	8002e70 <__errno>
 8000808:	4603      	mov	r3, r0
 800080a:	220c      	movs	r2, #12
 800080c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800080e:	f04f 33ff 	mov.w	r3, #4294967295
 8000812:	e009      	b.n	8000828 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000814:	4b08      	ldr	r3, [pc, #32]	; (8000838 <_sbrk+0x64>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800081a:	4b07      	ldr	r3, [pc, #28]	; (8000838 <_sbrk+0x64>)
 800081c:	681a      	ldr	r2, [r3, #0]
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	4413      	add	r3, r2
 8000822:	4a05      	ldr	r2, [pc, #20]	; (8000838 <_sbrk+0x64>)
 8000824:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000826:	68fb      	ldr	r3, [r7, #12]
}
 8000828:	4618      	mov	r0, r3
 800082a:	3718      	adds	r7, #24
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	20005000 	.word	0x20005000
 8000834:	00000400 	.word	0x00000400
 8000838:	20000268 	.word	0x20000268
 800083c:	20000280 	.word	0x20000280

08000840 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000844:	bf00      	nop
 8000846:	46bd      	mov	sp, r7
 8000848:	bc80      	pop	{r7}
 800084a:	4770      	bx	lr

0800084c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800084c:	480c      	ldr	r0, [pc, #48]	; (8000880 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800084e:	490d      	ldr	r1, [pc, #52]	; (8000884 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000850:	4a0d      	ldr	r2, [pc, #52]	; (8000888 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000852:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000854:	e002      	b.n	800085c <LoopCopyDataInit>

08000856 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000856:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000858:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800085a:	3304      	adds	r3, #4

0800085c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800085c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800085e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000860:	d3f9      	bcc.n	8000856 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000862:	4a0a      	ldr	r2, [pc, #40]	; (800088c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000864:	4c0a      	ldr	r4, [pc, #40]	; (8000890 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000866:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000868:	e001      	b.n	800086e <LoopFillZerobss>

0800086a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800086a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800086c:	3204      	adds	r2, #4

0800086e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800086e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000870:	d3fb      	bcc.n	800086a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000872:	f7ff ffe5 	bl	8000840 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000876:	f002 fb01 	bl	8002e7c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800087a:	f7ff fcbf 	bl	80001fc <main>
  bx lr
 800087e:	4770      	bx	lr
  ldr r0, =_sdata
 8000880:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000884:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000888:	0800384c 	.word	0x0800384c
  ldr r2, =_sbss
 800088c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000890:	20000280 	.word	0x20000280

08000894 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000894:	e7fe      	b.n	8000894 <CAN1_RX1_IRQHandler>
	...

08000898 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800089c:	4b08      	ldr	r3, [pc, #32]	; (80008c0 <HAL_Init+0x28>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4a07      	ldr	r2, [pc, #28]	; (80008c0 <HAL_Init+0x28>)
 80008a2:	f043 0310 	orr.w	r3, r3, #16
 80008a6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008a8:	2003      	movs	r0, #3
 80008aa:	f000 fc37 	bl	800111c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008ae:	200f      	movs	r0, #15
 80008b0:	f000 f808 	bl	80008c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008b4:	f7ff fe1e 	bl	80004f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008b8:	2300      	movs	r3, #0
}
 80008ba:	4618      	mov	r0, r3
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	40022000 	.word	0x40022000

080008c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008cc:	4b12      	ldr	r3, [pc, #72]	; (8000918 <HAL_InitTick+0x54>)
 80008ce:	681a      	ldr	r2, [r3, #0]
 80008d0:	4b12      	ldr	r3, [pc, #72]	; (800091c <HAL_InitTick+0x58>)
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	4619      	mov	r1, r3
 80008d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008da:	fbb3 f3f1 	udiv	r3, r3, r1
 80008de:	fbb2 f3f3 	udiv	r3, r2, r3
 80008e2:	4618      	mov	r0, r3
 80008e4:	f000 fc4f 	bl	8001186 <HAL_SYSTICK_Config>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008ee:	2301      	movs	r3, #1
 80008f0:	e00e      	b.n	8000910 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	2b0f      	cmp	r3, #15
 80008f6:	d80a      	bhi.n	800090e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008f8:	2200      	movs	r2, #0
 80008fa:	6879      	ldr	r1, [r7, #4]
 80008fc:	f04f 30ff 	mov.w	r0, #4294967295
 8000900:	f000 fc17 	bl	8001132 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000904:	4a06      	ldr	r2, [pc, #24]	; (8000920 <HAL_InitTick+0x5c>)
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800090a:	2300      	movs	r3, #0
 800090c:	e000      	b.n	8000910 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800090e:	2301      	movs	r3, #1
}
 8000910:	4618      	mov	r0, r3
 8000912:	3708      	adds	r7, #8
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	20000008 	.word	0x20000008
 800091c:	20000010 	.word	0x20000010
 8000920:	2000000c 	.word	0x2000000c

08000924 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000928:	4b05      	ldr	r3, [pc, #20]	; (8000940 <HAL_IncTick+0x1c>)
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	461a      	mov	r2, r3
 800092e:	4b05      	ldr	r3, [pc, #20]	; (8000944 <HAL_IncTick+0x20>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	4413      	add	r3, r2
 8000934:	4a03      	ldr	r2, [pc, #12]	; (8000944 <HAL_IncTick+0x20>)
 8000936:	6013      	str	r3, [r2, #0]
}
 8000938:	bf00      	nop
 800093a:	46bd      	mov	sp, r7
 800093c:	bc80      	pop	{r7}
 800093e:	4770      	bx	lr
 8000940:	20000010 	.word	0x20000010
 8000944:	2000026c 	.word	0x2000026c

08000948 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  return uwTick;
 800094c:	4b02      	ldr	r3, [pc, #8]	; (8000958 <HAL_GetTick+0x10>)
 800094e:	681b      	ldr	r3, [r3, #0]
}
 8000950:	4618      	mov	r0, r3
 8000952:	46bd      	mov	sp, r7
 8000954:	bc80      	pop	{r7}
 8000956:	4770      	bx	lr
 8000958:	2000026c 	.word	0x2000026c

0800095c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b084      	sub	sp, #16
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000964:	f7ff fff0 	bl	8000948 <HAL_GetTick>
 8000968:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000974:	d005      	beq.n	8000982 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000976:	4b0a      	ldr	r3, [pc, #40]	; (80009a0 <HAL_Delay+0x44>)
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	461a      	mov	r2, r3
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	4413      	add	r3, r2
 8000980:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000982:	bf00      	nop
 8000984:	f7ff ffe0 	bl	8000948 <HAL_GetTick>
 8000988:	4602      	mov	r2, r0
 800098a:	68bb      	ldr	r3, [r7, #8]
 800098c:	1ad3      	subs	r3, r2, r3
 800098e:	68fa      	ldr	r2, [r7, #12]
 8000990:	429a      	cmp	r2, r3
 8000992:	d8f7      	bhi.n	8000984 <HAL_Delay+0x28>
  {
  }
}
 8000994:	bf00      	nop
 8000996:	bf00      	nop
 8000998:	3710      	adds	r7, #16
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	20000010 	.word	0x20000010

080009a4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b086      	sub	sp, #24
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80009ac:	2300      	movs	r3, #0
 80009ae:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80009b0:	2300      	movs	r3, #0
 80009b2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80009b4:	2300      	movs	r3, #0
 80009b6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80009b8:	2300      	movs	r3, #0
 80009ba:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d101      	bne.n	80009c6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80009c2:	2301      	movs	r3, #1
 80009c4:	e0be      	b.n	8000b44 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	689b      	ldr	r3, [r3, #8]
 80009ca:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d109      	bne.n	80009e8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	2200      	movs	r2, #0
 80009d8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	2200      	movs	r2, #0
 80009de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80009e2:	6878      	ldr	r0, [r7, #4]
 80009e4:	f7ff fdb8 	bl	8000558 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80009e8:	6878      	ldr	r0, [r7, #4]
 80009ea:	f000 fa81 	bl	8000ef0 <ADC_ConversionStop_Disable>
 80009ee:	4603      	mov	r3, r0
 80009f0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009f6:	f003 0310 	and.w	r3, r3, #16
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	f040 8099 	bne.w	8000b32 <HAL_ADC_Init+0x18e>
 8000a00:	7dfb      	ldrb	r3, [r7, #23]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	f040 8095 	bne.w	8000b32 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a0c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000a10:	f023 0302 	bic.w	r3, r3, #2
 8000a14:	f043 0202 	orr.w	r2, r3, #2
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a24:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	7b1b      	ldrb	r3, [r3, #12]
 8000a2a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000a2c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a2e:	68ba      	ldr	r2, [r7, #8]
 8000a30:	4313      	orrs	r3, r2
 8000a32:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	689b      	ldr	r3, [r3, #8]
 8000a38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a3c:	d003      	beq.n	8000a46 <HAL_ADC_Init+0xa2>
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	689b      	ldr	r3, [r3, #8]
 8000a42:	2b01      	cmp	r3, #1
 8000a44:	d102      	bne.n	8000a4c <HAL_ADC_Init+0xa8>
 8000a46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a4a:	e000      	b.n	8000a4e <HAL_ADC_Init+0xaa>
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	693a      	ldr	r2, [r7, #16]
 8000a50:	4313      	orrs	r3, r2
 8000a52:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	7d1b      	ldrb	r3, [r3, #20]
 8000a58:	2b01      	cmp	r3, #1
 8000a5a:	d119      	bne.n	8000a90 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	7b1b      	ldrb	r3, [r3, #12]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d109      	bne.n	8000a78 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	699b      	ldr	r3, [r3, #24]
 8000a68:	3b01      	subs	r3, #1
 8000a6a:	035a      	lsls	r2, r3, #13
 8000a6c:	693b      	ldr	r3, [r7, #16]
 8000a6e:	4313      	orrs	r3, r2
 8000a70:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a74:	613b      	str	r3, [r7, #16]
 8000a76:	e00b      	b.n	8000a90 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a7c:	f043 0220 	orr.w	r2, r3, #32
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a88:	f043 0201 	orr.w	r2, r3, #1
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	685b      	ldr	r3, [r3, #4]
 8000a96:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	693a      	ldr	r2, [r7, #16]
 8000aa0:	430a      	orrs	r2, r1
 8000aa2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	689a      	ldr	r2, [r3, #8]
 8000aaa:	4b28      	ldr	r3, [pc, #160]	; (8000b4c <HAL_ADC_Init+0x1a8>)
 8000aac:	4013      	ands	r3, r2
 8000aae:	687a      	ldr	r2, [r7, #4]
 8000ab0:	6812      	ldr	r2, [r2, #0]
 8000ab2:	68b9      	ldr	r1, [r7, #8]
 8000ab4:	430b      	orrs	r3, r1
 8000ab6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	689b      	ldr	r3, [r3, #8]
 8000abc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ac0:	d003      	beq.n	8000aca <HAL_ADC_Init+0x126>
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	689b      	ldr	r3, [r3, #8]
 8000ac6:	2b01      	cmp	r3, #1
 8000ac8:	d104      	bne.n	8000ad4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	691b      	ldr	r3, [r3, #16]
 8000ace:	3b01      	subs	r3, #1
 8000ad0:	051b      	lsls	r3, r3, #20
 8000ad2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ada:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	68fa      	ldr	r2, [r7, #12]
 8000ae4:	430a      	orrs	r2, r1
 8000ae6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	689a      	ldr	r2, [r3, #8]
 8000aee:	4b18      	ldr	r3, [pc, #96]	; (8000b50 <HAL_ADC_Init+0x1ac>)
 8000af0:	4013      	ands	r3, r2
 8000af2:	68ba      	ldr	r2, [r7, #8]
 8000af4:	429a      	cmp	r2, r3
 8000af6:	d10b      	bne.n	8000b10 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	2200      	movs	r2, #0
 8000afc:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b02:	f023 0303 	bic.w	r3, r3, #3
 8000b06:	f043 0201 	orr.w	r2, r3, #1
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000b0e:	e018      	b.n	8000b42 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b14:	f023 0312 	bic.w	r3, r3, #18
 8000b18:	f043 0210 	orr.w	r2, r3, #16
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b24:	f043 0201 	orr.w	r2, r3, #1
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000b30:	e007      	b.n	8000b42 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b36:	f043 0210 	orr.w	r2, r3, #16
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000b42:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	3718      	adds	r7, #24
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	ffe1f7fd 	.word	0xffe1f7fd
 8000b50:	ff1f0efe 	.word	0xff1f0efe

08000b54 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	f003 0320 	and.w	r3, r3, #32
 8000b66:	2b20      	cmp	r3, #32
 8000b68:	d140      	bne.n	8000bec <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	f003 0302 	and.w	r3, r3, #2
 8000b74:	2b02      	cmp	r3, #2
 8000b76:	d139      	bne.n	8000bec <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b7c:	f003 0310 	and.w	r3, r3, #16
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d105      	bne.n	8000b90 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b88:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	689b      	ldr	r3, [r3, #8]
 8000b96:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000b9a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000b9e:	d11d      	bne.n	8000bdc <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d119      	bne.n	8000bdc <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	685a      	ldr	r2, [r3, #4]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	f022 0220 	bic.w	r2, r2, #32
 8000bb6:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bbc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bc8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d105      	bne.n	8000bdc <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bd4:	f043 0201 	orr.w	r2, r3, #1
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8000bdc:	6878      	ldr	r0, [r7, #4]
 8000bde:	f000 f87c 	bl	8000cda <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	f06f 0212 	mvn.w	r2, #18
 8000bea:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	685b      	ldr	r3, [r3, #4]
 8000bf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bf6:	2b80      	cmp	r3, #128	; 0x80
 8000bf8:	d14f      	bne.n	8000c9a <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f003 0304 	and.w	r3, r3, #4
 8000c04:	2b04      	cmp	r3, #4
 8000c06:	d148      	bne.n	8000c9a <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c0c:	f003 0310 	and.w	r3, r3, #16
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d105      	bne.n	8000c20 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c18:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	689b      	ldr	r3, [r3, #8]
 8000c26:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8000c2a:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8000c2e:	d012      	beq.n	8000c56 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d125      	bne.n	8000c8a <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	689b      	ldr	r3, [r3, #8]
 8000c44:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000c48:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000c4c:	d11d      	bne.n	8000c8a <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d119      	bne.n	8000c8a <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	685a      	ldr	r2, [r3, #4]
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000c64:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c6a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d105      	bne.n	8000c8a <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c82:	f043 0201 	orr.w	r2, r3, #1
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000c8a:	6878      	ldr	r0, [r7, #4]
 8000c8c:	f000 f971 	bl	8000f72 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f06f 020c 	mvn.w	r2, #12
 8000c98:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ca4:	2b40      	cmp	r3, #64	; 0x40
 8000ca6:	d114      	bne.n	8000cd2 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	f003 0301 	and.w	r3, r3, #1
 8000cb2:	2b01      	cmp	r3, #1
 8000cb4:	d10d      	bne.n	8000cd2 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cba:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000cc2:	6878      	ldr	r0, [r7, #4]
 8000cc4:	f000 f812 	bl	8000cec <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f06f 0201 	mvn.w	r2, #1
 8000cd0:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8000cd2:	bf00      	nop
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}

08000cda <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000cda:	b480      	push	{r7}
 8000cdc:	b083      	sub	sp, #12
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000ce2:	bf00      	nop
 8000ce4:	370c      	adds	r7, #12
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bc80      	pop	{r7}
 8000cea:	4770      	bx	lr

08000cec <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8000cf4:	bf00      	nop
 8000cf6:	370c      	adds	r7, #12
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bc80      	pop	{r7}
 8000cfc:	4770      	bx	lr
	...

08000d00 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000d00:	b480      	push	{r7}
 8000d02:	b085      	sub	sp, #20
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
 8000d08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000d18:	2b01      	cmp	r3, #1
 8000d1a:	d101      	bne.n	8000d20 <HAL_ADC_ConfigChannel+0x20>
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	e0dc      	b.n	8000eda <HAL_ADC_ConfigChannel+0x1da>
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	2201      	movs	r2, #1
 8000d24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	2b06      	cmp	r3, #6
 8000d2e:	d81c      	bhi.n	8000d6a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	685a      	ldr	r2, [r3, #4]
 8000d3a:	4613      	mov	r3, r2
 8000d3c:	009b      	lsls	r3, r3, #2
 8000d3e:	4413      	add	r3, r2
 8000d40:	3b05      	subs	r3, #5
 8000d42:	221f      	movs	r2, #31
 8000d44:	fa02 f303 	lsl.w	r3, r2, r3
 8000d48:	43db      	mvns	r3, r3
 8000d4a:	4019      	ands	r1, r3
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	6818      	ldr	r0, [r3, #0]
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	685a      	ldr	r2, [r3, #4]
 8000d54:	4613      	mov	r3, r2
 8000d56:	009b      	lsls	r3, r3, #2
 8000d58:	4413      	add	r3, r2
 8000d5a:	3b05      	subs	r3, #5
 8000d5c:	fa00 f203 	lsl.w	r2, r0, r3
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	430a      	orrs	r2, r1
 8000d66:	635a      	str	r2, [r3, #52]	; 0x34
 8000d68:	e03c      	b.n	8000de4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	2b0c      	cmp	r3, #12
 8000d70:	d81c      	bhi.n	8000dac <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	685a      	ldr	r2, [r3, #4]
 8000d7c:	4613      	mov	r3, r2
 8000d7e:	009b      	lsls	r3, r3, #2
 8000d80:	4413      	add	r3, r2
 8000d82:	3b23      	subs	r3, #35	; 0x23
 8000d84:	221f      	movs	r2, #31
 8000d86:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8a:	43db      	mvns	r3, r3
 8000d8c:	4019      	ands	r1, r3
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	6818      	ldr	r0, [r3, #0]
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	685a      	ldr	r2, [r3, #4]
 8000d96:	4613      	mov	r3, r2
 8000d98:	009b      	lsls	r3, r3, #2
 8000d9a:	4413      	add	r3, r2
 8000d9c:	3b23      	subs	r3, #35	; 0x23
 8000d9e:	fa00 f203 	lsl.w	r2, r0, r3
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	430a      	orrs	r2, r1
 8000da8:	631a      	str	r2, [r3, #48]	; 0x30
 8000daa:	e01b      	b.n	8000de4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	685a      	ldr	r2, [r3, #4]
 8000db6:	4613      	mov	r3, r2
 8000db8:	009b      	lsls	r3, r3, #2
 8000dba:	4413      	add	r3, r2
 8000dbc:	3b41      	subs	r3, #65	; 0x41
 8000dbe:	221f      	movs	r2, #31
 8000dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc4:	43db      	mvns	r3, r3
 8000dc6:	4019      	ands	r1, r3
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	6818      	ldr	r0, [r3, #0]
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	685a      	ldr	r2, [r3, #4]
 8000dd0:	4613      	mov	r3, r2
 8000dd2:	009b      	lsls	r3, r3, #2
 8000dd4:	4413      	add	r3, r2
 8000dd6:	3b41      	subs	r3, #65	; 0x41
 8000dd8:	fa00 f203 	lsl.w	r2, r0, r3
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	430a      	orrs	r2, r1
 8000de2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	2b09      	cmp	r3, #9
 8000dea:	d91c      	bls.n	8000e26 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	68d9      	ldr	r1, [r3, #12]
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	4613      	mov	r3, r2
 8000df8:	005b      	lsls	r3, r3, #1
 8000dfa:	4413      	add	r3, r2
 8000dfc:	3b1e      	subs	r3, #30
 8000dfe:	2207      	movs	r2, #7
 8000e00:	fa02 f303 	lsl.w	r3, r2, r3
 8000e04:	43db      	mvns	r3, r3
 8000e06:	4019      	ands	r1, r3
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	6898      	ldr	r0, [r3, #8]
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	4613      	mov	r3, r2
 8000e12:	005b      	lsls	r3, r3, #1
 8000e14:	4413      	add	r3, r2
 8000e16:	3b1e      	subs	r3, #30
 8000e18:	fa00 f203 	lsl.w	r2, r0, r3
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	430a      	orrs	r2, r1
 8000e22:	60da      	str	r2, [r3, #12]
 8000e24:	e019      	b.n	8000e5a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	6919      	ldr	r1, [r3, #16]
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	4613      	mov	r3, r2
 8000e32:	005b      	lsls	r3, r3, #1
 8000e34:	4413      	add	r3, r2
 8000e36:	2207      	movs	r2, #7
 8000e38:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3c:	43db      	mvns	r3, r3
 8000e3e:	4019      	ands	r1, r3
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	6898      	ldr	r0, [r3, #8]
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	4613      	mov	r3, r2
 8000e4a:	005b      	lsls	r3, r3, #1
 8000e4c:	4413      	add	r3, r2
 8000e4e:	fa00 f203 	lsl.w	r2, r0, r3
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	430a      	orrs	r2, r1
 8000e58:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	2b10      	cmp	r3, #16
 8000e60:	d003      	beq.n	8000e6a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000e66:	2b11      	cmp	r3, #17
 8000e68:	d132      	bne.n	8000ed0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4a1d      	ldr	r2, [pc, #116]	; (8000ee4 <HAL_ADC_ConfigChannel+0x1e4>)
 8000e70:	4293      	cmp	r3, r2
 8000e72:	d125      	bne.n	8000ec0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	689b      	ldr	r3, [r3, #8]
 8000e7a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d126      	bne.n	8000ed0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	689a      	ldr	r2, [r3, #8]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000e90:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	2b10      	cmp	r3, #16
 8000e98:	d11a      	bne.n	8000ed0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000e9a:	4b13      	ldr	r3, [pc, #76]	; (8000ee8 <HAL_ADC_ConfigChannel+0x1e8>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4a13      	ldr	r2, [pc, #76]	; (8000eec <HAL_ADC_ConfigChannel+0x1ec>)
 8000ea0:	fba2 2303 	umull	r2, r3, r2, r3
 8000ea4:	0c9a      	lsrs	r2, r3, #18
 8000ea6:	4613      	mov	r3, r2
 8000ea8:	009b      	lsls	r3, r3, #2
 8000eaa:	4413      	add	r3, r2
 8000eac:	005b      	lsls	r3, r3, #1
 8000eae:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000eb0:	e002      	b.n	8000eb8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000eb2:	68bb      	ldr	r3, [r7, #8]
 8000eb4:	3b01      	subs	r3, #1
 8000eb6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d1f9      	bne.n	8000eb2 <HAL_ADC_ConfigChannel+0x1b2>
 8000ebe:	e007      	b.n	8000ed0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ec4:	f043 0220 	orr.w	r2, r3, #32
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3714      	adds	r7, #20
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bc80      	pop	{r7}
 8000ee2:	4770      	bx	lr
 8000ee4:	40012400 	.word	0x40012400
 8000ee8:	20000008 	.word	0x20000008
 8000eec:	431bde83 	.word	0x431bde83

08000ef0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b084      	sub	sp, #16
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	689b      	ldr	r3, [r3, #8]
 8000f02:	f003 0301 	and.w	r3, r3, #1
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	d12e      	bne.n	8000f68 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	689a      	ldr	r2, [r3, #8]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f022 0201 	bic.w	r2, r2, #1
 8000f18:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000f1a:	f7ff fd15 	bl	8000948 <HAL_GetTick>
 8000f1e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000f20:	e01b      	b.n	8000f5a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000f22:	f7ff fd11 	bl	8000948 <HAL_GetTick>
 8000f26:	4602      	mov	r2, r0
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	1ad3      	subs	r3, r2, r3
 8000f2c:	2b02      	cmp	r3, #2
 8000f2e:	d914      	bls.n	8000f5a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	689b      	ldr	r3, [r3, #8]
 8000f36:	f003 0301 	and.w	r3, r3, #1
 8000f3a:	2b01      	cmp	r3, #1
 8000f3c:	d10d      	bne.n	8000f5a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f42:	f043 0210 	orr.w	r2, r3, #16
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f4e:	f043 0201 	orr.w	r2, r3, #1
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
 8000f58:	e007      	b.n	8000f6a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	689b      	ldr	r3, [r3, #8]
 8000f60:	f003 0301 	and.w	r3, r3, #1
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d0dc      	beq.n	8000f22 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000f68:	2300      	movs	r3, #0
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3710      	adds	r7, #16
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000f72:	b480      	push	{r7}
 8000f74:	b083      	sub	sp, #12
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8000f7a:	bf00      	nop
 8000f7c:	370c      	adds	r7, #12
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bc80      	pop	{r7}
 8000f82:	4770      	bx	lr

08000f84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b085      	sub	sp, #20
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	f003 0307 	and.w	r3, r3, #7
 8000f92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f94:	4b0c      	ldr	r3, [pc, #48]	; (8000fc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f9a:	68ba      	ldr	r2, [r7, #8]
 8000f9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fb6:	4a04      	ldr	r2, [pc, #16]	; (8000fc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	60d3      	str	r3, [r2, #12]
}
 8000fbc:	bf00      	nop
 8000fbe:	3714      	adds	r7, #20
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bc80      	pop	{r7}
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	e000ed00 	.word	0xe000ed00

08000fcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fd0:	4b04      	ldr	r3, [pc, #16]	; (8000fe4 <__NVIC_GetPriorityGrouping+0x18>)
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	0a1b      	lsrs	r3, r3, #8
 8000fd6:	f003 0307 	and.w	r3, r3, #7
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bc80      	pop	{r7}
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	e000ed00 	.word	0xe000ed00

08000fe8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	db0b      	blt.n	8001012 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ffa:	79fb      	ldrb	r3, [r7, #7]
 8000ffc:	f003 021f 	and.w	r2, r3, #31
 8001000:	4906      	ldr	r1, [pc, #24]	; (800101c <__NVIC_EnableIRQ+0x34>)
 8001002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001006:	095b      	lsrs	r3, r3, #5
 8001008:	2001      	movs	r0, #1
 800100a:	fa00 f202 	lsl.w	r2, r0, r2
 800100e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001012:	bf00      	nop
 8001014:	370c      	adds	r7, #12
 8001016:	46bd      	mov	sp, r7
 8001018:	bc80      	pop	{r7}
 800101a:	4770      	bx	lr
 800101c:	e000e100 	.word	0xe000e100

08001020 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	6039      	str	r1, [r7, #0]
 800102a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800102c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001030:	2b00      	cmp	r3, #0
 8001032:	db0a      	blt.n	800104a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	b2da      	uxtb	r2, r3
 8001038:	490c      	ldr	r1, [pc, #48]	; (800106c <__NVIC_SetPriority+0x4c>)
 800103a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103e:	0112      	lsls	r2, r2, #4
 8001040:	b2d2      	uxtb	r2, r2
 8001042:	440b      	add	r3, r1
 8001044:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001048:	e00a      	b.n	8001060 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	b2da      	uxtb	r2, r3
 800104e:	4908      	ldr	r1, [pc, #32]	; (8001070 <__NVIC_SetPriority+0x50>)
 8001050:	79fb      	ldrb	r3, [r7, #7]
 8001052:	f003 030f 	and.w	r3, r3, #15
 8001056:	3b04      	subs	r3, #4
 8001058:	0112      	lsls	r2, r2, #4
 800105a:	b2d2      	uxtb	r2, r2
 800105c:	440b      	add	r3, r1
 800105e:	761a      	strb	r2, [r3, #24]
}
 8001060:	bf00      	nop
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	bc80      	pop	{r7}
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	e000e100 	.word	0xe000e100
 8001070:	e000ed00 	.word	0xe000ed00

08001074 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001074:	b480      	push	{r7}
 8001076:	b089      	sub	sp, #36	; 0x24
 8001078:	af00      	add	r7, sp, #0
 800107a:	60f8      	str	r0, [r7, #12]
 800107c:	60b9      	str	r1, [r7, #8]
 800107e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	f003 0307 	and.w	r3, r3, #7
 8001086:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	f1c3 0307 	rsb	r3, r3, #7
 800108e:	2b04      	cmp	r3, #4
 8001090:	bf28      	it	cs
 8001092:	2304      	movcs	r3, #4
 8001094:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	3304      	adds	r3, #4
 800109a:	2b06      	cmp	r3, #6
 800109c:	d902      	bls.n	80010a4 <NVIC_EncodePriority+0x30>
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	3b03      	subs	r3, #3
 80010a2:	e000      	b.n	80010a6 <NVIC_EncodePriority+0x32>
 80010a4:	2300      	movs	r3, #0
 80010a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a8:	f04f 32ff 	mov.w	r2, #4294967295
 80010ac:	69bb      	ldr	r3, [r7, #24]
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	43da      	mvns	r2, r3
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	401a      	ands	r2, r3
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010bc:	f04f 31ff 	mov.w	r1, #4294967295
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	fa01 f303 	lsl.w	r3, r1, r3
 80010c6:	43d9      	mvns	r1, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010cc:	4313      	orrs	r3, r2
         );
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3724      	adds	r7, #36	; 0x24
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bc80      	pop	{r7}
 80010d6:	4770      	bx	lr

080010d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	3b01      	subs	r3, #1
 80010e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010e8:	d301      	bcc.n	80010ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010ea:	2301      	movs	r3, #1
 80010ec:	e00f      	b.n	800110e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ee:	4a0a      	ldr	r2, [pc, #40]	; (8001118 <SysTick_Config+0x40>)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	3b01      	subs	r3, #1
 80010f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010f6:	210f      	movs	r1, #15
 80010f8:	f04f 30ff 	mov.w	r0, #4294967295
 80010fc:	f7ff ff90 	bl	8001020 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001100:	4b05      	ldr	r3, [pc, #20]	; (8001118 <SysTick_Config+0x40>)
 8001102:	2200      	movs	r2, #0
 8001104:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001106:	4b04      	ldr	r3, [pc, #16]	; (8001118 <SysTick_Config+0x40>)
 8001108:	2207      	movs	r2, #7
 800110a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800110c:	2300      	movs	r3, #0
}
 800110e:	4618      	mov	r0, r3
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	e000e010 	.word	0xe000e010

0800111c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	f7ff ff2d 	bl	8000f84 <__NVIC_SetPriorityGrouping>
}
 800112a:	bf00      	nop
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}

08001132 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001132:	b580      	push	{r7, lr}
 8001134:	b086      	sub	sp, #24
 8001136:	af00      	add	r7, sp, #0
 8001138:	4603      	mov	r3, r0
 800113a:	60b9      	str	r1, [r7, #8]
 800113c:	607a      	str	r2, [r7, #4]
 800113e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001140:	2300      	movs	r3, #0
 8001142:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001144:	f7ff ff42 	bl	8000fcc <__NVIC_GetPriorityGrouping>
 8001148:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800114a:	687a      	ldr	r2, [r7, #4]
 800114c:	68b9      	ldr	r1, [r7, #8]
 800114e:	6978      	ldr	r0, [r7, #20]
 8001150:	f7ff ff90 	bl	8001074 <NVIC_EncodePriority>
 8001154:	4602      	mov	r2, r0
 8001156:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800115a:	4611      	mov	r1, r2
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff ff5f 	bl	8001020 <__NVIC_SetPriority>
}
 8001162:	bf00      	nop
 8001164:	3718      	adds	r7, #24
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}

0800116a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800116a:	b580      	push	{r7, lr}
 800116c:	b082      	sub	sp, #8
 800116e:	af00      	add	r7, sp, #0
 8001170:	4603      	mov	r3, r0
 8001172:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001174:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff ff35 	bl	8000fe8 <__NVIC_EnableIRQ>
}
 800117e:	bf00      	nop
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}

08001186 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001186:	b580      	push	{r7, lr}
 8001188:	b082      	sub	sp, #8
 800118a:	af00      	add	r7, sp, #0
 800118c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800118e:	6878      	ldr	r0, [r7, #4]
 8001190:	f7ff ffa2 	bl	80010d8 <SysTick_Config>
 8001194:	4603      	mov	r3, r0
}
 8001196:	4618      	mov	r0, r3
 8001198:	3708      	adds	r7, #8
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
	...

080011a0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b085      	sub	sp, #20
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80011a8:	2300      	movs	r3, #0
 80011aa:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d101      	bne.n	80011b6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	e043      	b.n	800123e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	461a      	mov	r2, r3
 80011bc:	4b22      	ldr	r3, [pc, #136]	; (8001248 <HAL_DMA_Init+0xa8>)
 80011be:	4413      	add	r3, r2
 80011c0:	4a22      	ldr	r2, [pc, #136]	; (800124c <HAL_DMA_Init+0xac>)
 80011c2:	fba2 2303 	umull	r2, r3, r2, r3
 80011c6:	091b      	lsrs	r3, r3, #4
 80011c8:	009a      	lsls	r2, r3, #2
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4a1f      	ldr	r2, [pc, #124]	; (8001250 <HAL_DMA_Init+0xb0>)
 80011d2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2202      	movs	r2, #2
 80011d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80011ea:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80011ee:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80011f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	68db      	ldr	r3, [r3, #12]
 80011fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001204:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	695b      	ldr	r3, [r3, #20]
 800120a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001210:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	69db      	ldr	r3, [r3, #28]
 8001216:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001218:	68fa      	ldr	r2, [r7, #12]
 800121a:	4313      	orrs	r3, r2
 800121c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	68fa      	ldr	r2, [r7, #12]
 8001224:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2200      	movs	r2, #0
 800122a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2201      	movs	r2, #1
 8001230:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2200      	movs	r2, #0
 8001238:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800123c:	2300      	movs	r3, #0
}
 800123e:	4618      	mov	r0, r3
 8001240:	3714      	adds	r7, #20
 8001242:	46bd      	mov	sp, r7
 8001244:	bc80      	pop	{r7}
 8001246:	4770      	bx	lr
 8001248:	bffdfff8 	.word	0xbffdfff8
 800124c:	cccccccd 	.word	0xcccccccd
 8001250:	40020000 	.word	0x40020000

08001254 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b086      	sub	sp, #24
 8001258:	af00      	add	r7, sp, #0
 800125a:	60f8      	str	r0, [r7, #12]
 800125c:	60b9      	str	r1, [r7, #8]
 800125e:	607a      	str	r2, [r7, #4]
 8001260:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001262:	2300      	movs	r3, #0
 8001264:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	f893 3020 	ldrb.w	r3, [r3, #32]
 800126c:	2b01      	cmp	r3, #1
 800126e:	d101      	bne.n	8001274 <HAL_DMA_Start_IT+0x20>
 8001270:	2302      	movs	r3, #2
 8001272:	e04a      	b.n	800130a <HAL_DMA_Start_IT+0xb6>
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	2201      	movs	r2, #1
 8001278:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001282:	2b01      	cmp	r3, #1
 8001284:	d13a      	bne.n	80012fc <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	2202      	movs	r2, #2
 800128a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	2200      	movs	r2, #0
 8001292:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f022 0201 	bic.w	r2, r2, #1
 80012a2:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	687a      	ldr	r2, [r7, #4]
 80012a8:	68b9      	ldr	r1, [r7, #8]
 80012aa:	68f8      	ldr	r0, [r7, #12]
 80012ac:	f000 f9e8 	bl	8001680 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d008      	beq.n	80012ca <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f042 020e 	orr.w	r2, r2, #14
 80012c6:	601a      	str	r2, [r3, #0]
 80012c8:	e00f      	b.n	80012ea <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f022 0204 	bic.w	r2, r2, #4
 80012d8:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f042 020a 	orr.w	r2, r2, #10
 80012e8:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f042 0201 	orr.w	r2, r2, #1
 80012f8:	601a      	str	r2, [r3, #0]
 80012fa:	e005      	b.n	8001308 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	2200      	movs	r2, #0
 8001300:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001304:	2302      	movs	r3, #2
 8001306:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001308:	7dfb      	ldrb	r3, [r7, #23]
}
 800130a:	4618      	mov	r0, r3
 800130c:	3718      	adds	r7, #24
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}

08001312 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001312:	b480      	push	{r7}
 8001314:	b085      	sub	sp, #20
 8001316:	af00      	add	r7, sp, #0
 8001318:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800131a:	2300      	movs	r3, #0
 800131c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001324:	2b02      	cmp	r3, #2
 8001326:	d008      	beq.n	800133a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2204      	movs	r2, #4
 800132c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2200      	movs	r2, #0
 8001332:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	e020      	b.n	800137c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f022 020e 	bic.w	r2, r2, #14
 8001348:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f022 0201 	bic.w	r2, r2, #1
 8001358:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001362:	2101      	movs	r1, #1
 8001364:	fa01 f202 	lsl.w	r2, r1, r2
 8001368:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2201      	movs	r2, #1
 800136e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2200      	movs	r2, #0
 8001376:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800137a:	7bfb      	ldrb	r3, [r7, #15]
}
 800137c:	4618      	mov	r0, r3
 800137e:	3714      	adds	r7, #20
 8001380:	46bd      	mov	sp, r7
 8001382:	bc80      	pop	{r7}
 8001384:	4770      	bx	lr
	...

08001388 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001390:	2300      	movs	r3, #0
 8001392:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800139a:	2b02      	cmp	r3, #2
 800139c:	d005      	beq.n	80013aa <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2204      	movs	r2, #4
 80013a2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80013a4:	2301      	movs	r3, #1
 80013a6:	73fb      	strb	r3, [r7, #15]
 80013a8:	e051      	b.n	800144e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f022 020e 	bic.w	r2, r2, #14
 80013b8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f022 0201 	bic.w	r2, r2, #1
 80013c8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a22      	ldr	r2, [pc, #136]	; (8001458 <HAL_DMA_Abort_IT+0xd0>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d029      	beq.n	8001428 <HAL_DMA_Abort_IT+0xa0>
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a20      	ldr	r2, [pc, #128]	; (800145c <HAL_DMA_Abort_IT+0xd4>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d022      	beq.n	8001424 <HAL_DMA_Abort_IT+0x9c>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a1f      	ldr	r2, [pc, #124]	; (8001460 <HAL_DMA_Abort_IT+0xd8>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d01a      	beq.n	800141e <HAL_DMA_Abort_IT+0x96>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a1d      	ldr	r2, [pc, #116]	; (8001464 <HAL_DMA_Abort_IT+0xdc>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d012      	beq.n	8001418 <HAL_DMA_Abort_IT+0x90>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a1c      	ldr	r2, [pc, #112]	; (8001468 <HAL_DMA_Abort_IT+0xe0>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d00a      	beq.n	8001412 <HAL_DMA_Abort_IT+0x8a>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a1a      	ldr	r2, [pc, #104]	; (800146c <HAL_DMA_Abort_IT+0xe4>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d102      	bne.n	800140c <HAL_DMA_Abort_IT+0x84>
 8001406:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800140a:	e00e      	b.n	800142a <HAL_DMA_Abort_IT+0xa2>
 800140c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001410:	e00b      	b.n	800142a <HAL_DMA_Abort_IT+0xa2>
 8001412:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001416:	e008      	b.n	800142a <HAL_DMA_Abort_IT+0xa2>
 8001418:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800141c:	e005      	b.n	800142a <HAL_DMA_Abort_IT+0xa2>
 800141e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001422:	e002      	b.n	800142a <HAL_DMA_Abort_IT+0xa2>
 8001424:	2310      	movs	r3, #16
 8001426:	e000      	b.n	800142a <HAL_DMA_Abort_IT+0xa2>
 8001428:	2301      	movs	r3, #1
 800142a:	4a11      	ldr	r2, [pc, #68]	; (8001470 <HAL_DMA_Abort_IT+0xe8>)
 800142c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2201      	movs	r2, #1
 8001432:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2200      	movs	r2, #0
 800143a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001442:	2b00      	cmp	r3, #0
 8001444:	d003      	beq.n	800144e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	4798      	blx	r3
    } 
  }
  return status;
 800144e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001450:	4618      	mov	r0, r3
 8001452:	3710      	adds	r7, #16
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	40020008 	.word	0x40020008
 800145c:	4002001c 	.word	0x4002001c
 8001460:	40020030 	.word	0x40020030
 8001464:	40020044 	.word	0x40020044
 8001468:	40020058 	.word	0x40020058
 800146c:	4002006c 	.word	0x4002006c
 8001470:	40020000 	.word	0x40020000

08001474 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001490:	2204      	movs	r2, #4
 8001492:	409a      	lsls	r2, r3
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	4013      	ands	r3, r2
 8001498:	2b00      	cmp	r3, #0
 800149a:	d04f      	beq.n	800153c <HAL_DMA_IRQHandler+0xc8>
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	f003 0304 	and.w	r3, r3, #4
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d04a      	beq.n	800153c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f003 0320 	and.w	r3, r3, #32
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d107      	bne.n	80014c4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f022 0204 	bic.w	r2, r2, #4
 80014c2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a66      	ldr	r2, [pc, #408]	; (8001664 <HAL_DMA_IRQHandler+0x1f0>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d029      	beq.n	8001522 <HAL_DMA_IRQHandler+0xae>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a65      	ldr	r2, [pc, #404]	; (8001668 <HAL_DMA_IRQHandler+0x1f4>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d022      	beq.n	800151e <HAL_DMA_IRQHandler+0xaa>
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a63      	ldr	r2, [pc, #396]	; (800166c <HAL_DMA_IRQHandler+0x1f8>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d01a      	beq.n	8001518 <HAL_DMA_IRQHandler+0xa4>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a62      	ldr	r2, [pc, #392]	; (8001670 <HAL_DMA_IRQHandler+0x1fc>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d012      	beq.n	8001512 <HAL_DMA_IRQHandler+0x9e>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a60      	ldr	r2, [pc, #384]	; (8001674 <HAL_DMA_IRQHandler+0x200>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d00a      	beq.n	800150c <HAL_DMA_IRQHandler+0x98>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a5f      	ldr	r2, [pc, #380]	; (8001678 <HAL_DMA_IRQHandler+0x204>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d102      	bne.n	8001506 <HAL_DMA_IRQHandler+0x92>
 8001500:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001504:	e00e      	b.n	8001524 <HAL_DMA_IRQHandler+0xb0>
 8001506:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800150a:	e00b      	b.n	8001524 <HAL_DMA_IRQHandler+0xb0>
 800150c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001510:	e008      	b.n	8001524 <HAL_DMA_IRQHandler+0xb0>
 8001512:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001516:	e005      	b.n	8001524 <HAL_DMA_IRQHandler+0xb0>
 8001518:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800151c:	e002      	b.n	8001524 <HAL_DMA_IRQHandler+0xb0>
 800151e:	2340      	movs	r3, #64	; 0x40
 8001520:	e000      	b.n	8001524 <HAL_DMA_IRQHandler+0xb0>
 8001522:	2304      	movs	r3, #4
 8001524:	4a55      	ldr	r2, [pc, #340]	; (800167c <HAL_DMA_IRQHandler+0x208>)
 8001526:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800152c:	2b00      	cmp	r3, #0
 800152e:	f000 8094 	beq.w	800165a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800153a:	e08e      	b.n	800165a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001540:	2202      	movs	r2, #2
 8001542:	409a      	lsls	r2, r3
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	4013      	ands	r3, r2
 8001548:	2b00      	cmp	r3, #0
 800154a:	d056      	beq.n	80015fa <HAL_DMA_IRQHandler+0x186>
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	f003 0302 	and.w	r3, r3, #2
 8001552:	2b00      	cmp	r3, #0
 8001554:	d051      	beq.n	80015fa <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f003 0320 	and.w	r3, r3, #32
 8001560:	2b00      	cmp	r3, #0
 8001562:	d10b      	bne.n	800157c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f022 020a 	bic.w	r2, r2, #10
 8001572:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2201      	movs	r2, #1
 8001578:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a38      	ldr	r2, [pc, #224]	; (8001664 <HAL_DMA_IRQHandler+0x1f0>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d029      	beq.n	80015da <HAL_DMA_IRQHandler+0x166>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a37      	ldr	r2, [pc, #220]	; (8001668 <HAL_DMA_IRQHandler+0x1f4>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d022      	beq.n	80015d6 <HAL_DMA_IRQHandler+0x162>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a35      	ldr	r2, [pc, #212]	; (800166c <HAL_DMA_IRQHandler+0x1f8>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d01a      	beq.n	80015d0 <HAL_DMA_IRQHandler+0x15c>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a34      	ldr	r2, [pc, #208]	; (8001670 <HAL_DMA_IRQHandler+0x1fc>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d012      	beq.n	80015ca <HAL_DMA_IRQHandler+0x156>
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a32      	ldr	r2, [pc, #200]	; (8001674 <HAL_DMA_IRQHandler+0x200>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d00a      	beq.n	80015c4 <HAL_DMA_IRQHandler+0x150>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a31      	ldr	r2, [pc, #196]	; (8001678 <HAL_DMA_IRQHandler+0x204>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d102      	bne.n	80015be <HAL_DMA_IRQHandler+0x14a>
 80015b8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80015bc:	e00e      	b.n	80015dc <HAL_DMA_IRQHandler+0x168>
 80015be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80015c2:	e00b      	b.n	80015dc <HAL_DMA_IRQHandler+0x168>
 80015c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015c8:	e008      	b.n	80015dc <HAL_DMA_IRQHandler+0x168>
 80015ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015ce:	e005      	b.n	80015dc <HAL_DMA_IRQHandler+0x168>
 80015d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015d4:	e002      	b.n	80015dc <HAL_DMA_IRQHandler+0x168>
 80015d6:	2320      	movs	r3, #32
 80015d8:	e000      	b.n	80015dc <HAL_DMA_IRQHandler+0x168>
 80015da:	2302      	movs	r3, #2
 80015dc:	4a27      	ldr	r2, [pc, #156]	; (800167c <HAL_DMA_IRQHandler+0x208>)
 80015de:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2200      	movs	r2, #0
 80015e4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d034      	beq.n	800165a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80015f8:	e02f      	b.n	800165a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fe:	2208      	movs	r2, #8
 8001600:	409a      	lsls	r2, r3
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	4013      	ands	r3, r2
 8001606:	2b00      	cmp	r3, #0
 8001608:	d028      	beq.n	800165c <HAL_DMA_IRQHandler+0x1e8>
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	f003 0308 	and.w	r3, r3, #8
 8001610:	2b00      	cmp	r3, #0
 8001612:	d023      	beq.n	800165c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f022 020e 	bic.w	r2, r2, #14
 8001622:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800162c:	2101      	movs	r1, #1
 800162e:	fa01 f202 	lsl.w	r2, r1, r2
 8001632:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2201      	movs	r2, #1
 8001638:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2201      	movs	r2, #1
 800163e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2200      	movs	r2, #0
 8001646:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164e:	2b00      	cmp	r3, #0
 8001650:	d004      	beq.n	800165c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001656:	6878      	ldr	r0, [r7, #4]
 8001658:	4798      	blx	r3
    }
  }
  return;
 800165a:	bf00      	nop
 800165c:	bf00      	nop
}
 800165e:	3710      	adds	r7, #16
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	40020008 	.word	0x40020008
 8001668:	4002001c 	.word	0x4002001c
 800166c:	40020030 	.word	0x40020030
 8001670:	40020044 	.word	0x40020044
 8001674:	40020058 	.word	0x40020058
 8001678:	4002006c 	.word	0x4002006c
 800167c:	40020000 	.word	0x40020000

08001680 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001680:	b480      	push	{r7}
 8001682:	b085      	sub	sp, #20
 8001684:	af00      	add	r7, sp, #0
 8001686:	60f8      	str	r0, [r7, #12]
 8001688:	60b9      	str	r1, [r7, #8]
 800168a:	607a      	str	r2, [r7, #4]
 800168c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001696:	2101      	movs	r1, #1
 8001698:	fa01 f202 	lsl.w	r2, r1, r2
 800169c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	683a      	ldr	r2, [r7, #0]
 80016a4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	2b10      	cmp	r3, #16
 80016ac:	d108      	bne.n	80016c0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	68ba      	ldr	r2, [r7, #8]
 80016bc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80016be:	e007      	b.n	80016d0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	68ba      	ldr	r2, [r7, #8]
 80016c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	687a      	ldr	r2, [r7, #4]
 80016ce:	60da      	str	r2, [r3, #12]
}
 80016d0:	bf00      	nop
 80016d2:	3714      	adds	r7, #20
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bc80      	pop	{r7}
 80016d8:	4770      	bx	lr
	...

080016dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016dc:	b480      	push	{r7}
 80016de:	b08b      	sub	sp, #44	; 0x2c
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016e6:	2300      	movs	r3, #0
 80016e8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80016ea:	2300      	movs	r3, #0
 80016ec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016ee:	e169      	b.n	80019c4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80016f0:	2201      	movs	r2, #1
 80016f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f4:	fa02 f303 	lsl.w	r3, r2, r3
 80016f8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	69fa      	ldr	r2, [r7, #28]
 8001700:	4013      	ands	r3, r2
 8001702:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001704:	69ba      	ldr	r2, [r7, #24]
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	429a      	cmp	r2, r3
 800170a:	f040 8158 	bne.w	80019be <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	4a9a      	ldr	r2, [pc, #616]	; (800197c <HAL_GPIO_Init+0x2a0>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d05e      	beq.n	80017d6 <HAL_GPIO_Init+0xfa>
 8001718:	4a98      	ldr	r2, [pc, #608]	; (800197c <HAL_GPIO_Init+0x2a0>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d875      	bhi.n	800180a <HAL_GPIO_Init+0x12e>
 800171e:	4a98      	ldr	r2, [pc, #608]	; (8001980 <HAL_GPIO_Init+0x2a4>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d058      	beq.n	80017d6 <HAL_GPIO_Init+0xfa>
 8001724:	4a96      	ldr	r2, [pc, #600]	; (8001980 <HAL_GPIO_Init+0x2a4>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d86f      	bhi.n	800180a <HAL_GPIO_Init+0x12e>
 800172a:	4a96      	ldr	r2, [pc, #600]	; (8001984 <HAL_GPIO_Init+0x2a8>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d052      	beq.n	80017d6 <HAL_GPIO_Init+0xfa>
 8001730:	4a94      	ldr	r2, [pc, #592]	; (8001984 <HAL_GPIO_Init+0x2a8>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d869      	bhi.n	800180a <HAL_GPIO_Init+0x12e>
 8001736:	4a94      	ldr	r2, [pc, #592]	; (8001988 <HAL_GPIO_Init+0x2ac>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d04c      	beq.n	80017d6 <HAL_GPIO_Init+0xfa>
 800173c:	4a92      	ldr	r2, [pc, #584]	; (8001988 <HAL_GPIO_Init+0x2ac>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d863      	bhi.n	800180a <HAL_GPIO_Init+0x12e>
 8001742:	4a92      	ldr	r2, [pc, #584]	; (800198c <HAL_GPIO_Init+0x2b0>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d046      	beq.n	80017d6 <HAL_GPIO_Init+0xfa>
 8001748:	4a90      	ldr	r2, [pc, #576]	; (800198c <HAL_GPIO_Init+0x2b0>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d85d      	bhi.n	800180a <HAL_GPIO_Init+0x12e>
 800174e:	2b12      	cmp	r3, #18
 8001750:	d82a      	bhi.n	80017a8 <HAL_GPIO_Init+0xcc>
 8001752:	2b12      	cmp	r3, #18
 8001754:	d859      	bhi.n	800180a <HAL_GPIO_Init+0x12e>
 8001756:	a201      	add	r2, pc, #4	; (adr r2, 800175c <HAL_GPIO_Init+0x80>)
 8001758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800175c:	080017d7 	.word	0x080017d7
 8001760:	080017b1 	.word	0x080017b1
 8001764:	080017c3 	.word	0x080017c3
 8001768:	08001805 	.word	0x08001805
 800176c:	0800180b 	.word	0x0800180b
 8001770:	0800180b 	.word	0x0800180b
 8001774:	0800180b 	.word	0x0800180b
 8001778:	0800180b 	.word	0x0800180b
 800177c:	0800180b 	.word	0x0800180b
 8001780:	0800180b 	.word	0x0800180b
 8001784:	0800180b 	.word	0x0800180b
 8001788:	0800180b 	.word	0x0800180b
 800178c:	0800180b 	.word	0x0800180b
 8001790:	0800180b 	.word	0x0800180b
 8001794:	0800180b 	.word	0x0800180b
 8001798:	0800180b 	.word	0x0800180b
 800179c:	0800180b 	.word	0x0800180b
 80017a0:	080017b9 	.word	0x080017b9
 80017a4:	080017cd 	.word	0x080017cd
 80017a8:	4a79      	ldr	r2, [pc, #484]	; (8001990 <HAL_GPIO_Init+0x2b4>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d013      	beq.n	80017d6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80017ae:	e02c      	b.n	800180a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	623b      	str	r3, [r7, #32]
          break;
 80017b6:	e029      	b.n	800180c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	3304      	adds	r3, #4
 80017be:	623b      	str	r3, [r7, #32]
          break;
 80017c0:	e024      	b.n	800180c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	68db      	ldr	r3, [r3, #12]
 80017c6:	3308      	adds	r3, #8
 80017c8:	623b      	str	r3, [r7, #32]
          break;
 80017ca:	e01f      	b.n	800180c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	330c      	adds	r3, #12
 80017d2:	623b      	str	r3, [r7, #32]
          break;
 80017d4:	e01a      	b.n	800180c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d102      	bne.n	80017e4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80017de:	2304      	movs	r3, #4
 80017e0:	623b      	str	r3, [r7, #32]
          break;
 80017e2:	e013      	b.n	800180c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d105      	bne.n	80017f8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017ec:	2308      	movs	r3, #8
 80017ee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	69fa      	ldr	r2, [r7, #28]
 80017f4:	611a      	str	r2, [r3, #16]
          break;
 80017f6:	e009      	b.n	800180c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017f8:	2308      	movs	r3, #8
 80017fa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	69fa      	ldr	r2, [r7, #28]
 8001800:	615a      	str	r2, [r3, #20]
          break;
 8001802:	e003      	b.n	800180c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001804:	2300      	movs	r3, #0
 8001806:	623b      	str	r3, [r7, #32]
          break;
 8001808:	e000      	b.n	800180c <HAL_GPIO_Init+0x130>
          break;
 800180a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	2bff      	cmp	r3, #255	; 0xff
 8001810:	d801      	bhi.n	8001816 <HAL_GPIO_Init+0x13a>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	e001      	b.n	800181a <HAL_GPIO_Init+0x13e>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	3304      	adds	r3, #4
 800181a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800181c:	69bb      	ldr	r3, [r7, #24]
 800181e:	2bff      	cmp	r3, #255	; 0xff
 8001820:	d802      	bhi.n	8001828 <HAL_GPIO_Init+0x14c>
 8001822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	e002      	b.n	800182e <HAL_GPIO_Init+0x152>
 8001828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182a:	3b08      	subs	r3, #8
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	210f      	movs	r1, #15
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	fa01 f303 	lsl.w	r3, r1, r3
 800183c:	43db      	mvns	r3, r3
 800183e:	401a      	ands	r2, r3
 8001840:	6a39      	ldr	r1, [r7, #32]
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	fa01 f303 	lsl.w	r3, r1, r3
 8001848:	431a      	orrs	r2, r3
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001856:	2b00      	cmp	r3, #0
 8001858:	f000 80b1 	beq.w	80019be <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800185c:	4b4d      	ldr	r3, [pc, #308]	; (8001994 <HAL_GPIO_Init+0x2b8>)
 800185e:	699b      	ldr	r3, [r3, #24]
 8001860:	4a4c      	ldr	r2, [pc, #304]	; (8001994 <HAL_GPIO_Init+0x2b8>)
 8001862:	f043 0301 	orr.w	r3, r3, #1
 8001866:	6193      	str	r3, [r2, #24]
 8001868:	4b4a      	ldr	r3, [pc, #296]	; (8001994 <HAL_GPIO_Init+0x2b8>)
 800186a:	699b      	ldr	r3, [r3, #24]
 800186c:	f003 0301 	and.w	r3, r3, #1
 8001870:	60bb      	str	r3, [r7, #8]
 8001872:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001874:	4a48      	ldr	r2, [pc, #288]	; (8001998 <HAL_GPIO_Init+0x2bc>)
 8001876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001878:	089b      	lsrs	r3, r3, #2
 800187a:	3302      	adds	r3, #2
 800187c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001880:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001884:	f003 0303 	and.w	r3, r3, #3
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	220f      	movs	r2, #15
 800188c:	fa02 f303 	lsl.w	r3, r2, r3
 8001890:	43db      	mvns	r3, r3
 8001892:	68fa      	ldr	r2, [r7, #12]
 8001894:	4013      	ands	r3, r2
 8001896:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	4a40      	ldr	r2, [pc, #256]	; (800199c <HAL_GPIO_Init+0x2c0>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d013      	beq.n	80018c8 <HAL_GPIO_Init+0x1ec>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	4a3f      	ldr	r2, [pc, #252]	; (80019a0 <HAL_GPIO_Init+0x2c4>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d00d      	beq.n	80018c4 <HAL_GPIO_Init+0x1e8>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	4a3e      	ldr	r2, [pc, #248]	; (80019a4 <HAL_GPIO_Init+0x2c8>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d007      	beq.n	80018c0 <HAL_GPIO_Init+0x1e4>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	4a3d      	ldr	r2, [pc, #244]	; (80019a8 <HAL_GPIO_Init+0x2cc>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d101      	bne.n	80018bc <HAL_GPIO_Init+0x1e0>
 80018b8:	2303      	movs	r3, #3
 80018ba:	e006      	b.n	80018ca <HAL_GPIO_Init+0x1ee>
 80018bc:	2304      	movs	r3, #4
 80018be:	e004      	b.n	80018ca <HAL_GPIO_Init+0x1ee>
 80018c0:	2302      	movs	r3, #2
 80018c2:	e002      	b.n	80018ca <HAL_GPIO_Init+0x1ee>
 80018c4:	2301      	movs	r3, #1
 80018c6:	e000      	b.n	80018ca <HAL_GPIO_Init+0x1ee>
 80018c8:	2300      	movs	r3, #0
 80018ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018cc:	f002 0203 	and.w	r2, r2, #3
 80018d0:	0092      	lsls	r2, r2, #2
 80018d2:	4093      	lsls	r3, r2
 80018d4:	68fa      	ldr	r2, [r7, #12]
 80018d6:	4313      	orrs	r3, r2
 80018d8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80018da:	492f      	ldr	r1, [pc, #188]	; (8001998 <HAL_GPIO_Init+0x2bc>)
 80018dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018de:	089b      	lsrs	r3, r3, #2
 80018e0:	3302      	adds	r3, #2
 80018e2:	68fa      	ldr	r2, [r7, #12]
 80018e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d006      	beq.n	8001902 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80018f4:	4b2d      	ldr	r3, [pc, #180]	; (80019ac <HAL_GPIO_Init+0x2d0>)
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	492c      	ldr	r1, [pc, #176]	; (80019ac <HAL_GPIO_Init+0x2d0>)
 80018fa:	69bb      	ldr	r3, [r7, #24]
 80018fc:	4313      	orrs	r3, r2
 80018fe:	600b      	str	r3, [r1, #0]
 8001900:	e006      	b.n	8001910 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001902:	4b2a      	ldr	r3, [pc, #168]	; (80019ac <HAL_GPIO_Init+0x2d0>)
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	43db      	mvns	r3, r3
 800190a:	4928      	ldr	r1, [pc, #160]	; (80019ac <HAL_GPIO_Init+0x2d0>)
 800190c:	4013      	ands	r3, r2
 800190e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001918:	2b00      	cmp	r3, #0
 800191a:	d006      	beq.n	800192a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800191c:	4b23      	ldr	r3, [pc, #140]	; (80019ac <HAL_GPIO_Init+0x2d0>)
 800191e:	685a      	ldr	r2, [r3, #4]
 8001920:	4922      	ldr	r1, [pc, #136]	; (80019ac <HAL_GPIO_Init+0x2d0>)
 8001922:	69bb      	ldr	r3, [r7, #24]
 8001924:	4313      	orrs	r3, r2
 8001926:	604b      	str	r3, [r1, #4]
 8001928:	e006      	b.n	8001938 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800192a:	4b20      	ldr	r3, [pc, #128]	; (80019ac <HAL_GPIO_Init+0x2d0>)
 800192c:	685a      	ldr	r2, [r3, #4]
 800192e:	69bb      	ldr	r3, [r7, #24]
 8001930:	43db      	mvns	r3, r3
 8001932:	491e      	ldr	r1, [pc, #120]	; (80019ac <HAL_GPIO_Init+0x2d0>)
 8001934:	4013      	ands	r3, r2
 8001936:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001940:	2b00      	cmp	r3, #0
 8001942:	d006      	beq.n	8001952 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001944:	4b19      	ldr	r3, [pc, #100]	; (80019ac <HAL_GPIO_Init+0x2d0>)
 8001946:	689a      	ldr	r2, [r3, #8]
 8001948:	4918      	ldr	r1, [pc, #96]	; (80019ac <HAL_GPIO_Init+0x2d0>)
 800194a:	69bb      	ldr	r3, [r7, #24]
 800194c:	4313      	orrs	r3, r2
 800194e:	608b      	str	r3, [r1, #8]
 8001950:	e006      	b.n	8001960 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001952:	4b16      	ldr	r3, [pc, #88]	; (80019ac <HAL_GPIO_Init+0x2d0>)
 8001954:	689a      	ldr	r2, [r3, #8]
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	43db      	mvns	r3, r3
 800195a:	4914      	ldr	r1, [pc, #80]	; (80019ac <HAL_GPIO_Init+0x2d0>)
 800195c:	4013      	ands	r3, r2
 800195e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001968:	2b00      	cmp	r3, #0
 800196a:	d021      	beq.n	80019b0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800196c:	4b0f      	ldr	r3, [pc, #60]	; (80019ac <HAL_GPIO_Init+0x2d0>)
 800196e:	68da      	ldr	r2, [r3, #12]
 8001970:	490e      	ldr	r1, [pc, #56]	; (80019ac <HAL_GPIO_Init+0x2d0>)
 8001972:	69bb      	ldr	r3, [r7, #24]
 8001974:	4313      	orrs	r3, r2
 8001976:	60cb      	str	r3, [r1, #12]
 8001978:	e021      	b.n	80019be <HAL_GPIO_Init+0x2e2>
 800197a:	bf00      	nop
 800197c:	10320000 	.word	0x10320000
 8001980:	10310000 	.word	0x10310000
 8001984:	10220000 	.word	0x10220000
 8001988:	10210000 	.word	0x10210000
 800198c:	10120000 	.word	0x10120000
 8001990:	10110000 	.word	0x10110000
 8001994:	40021000 	.word	0x40021000
 8001998:	40010000 	.word	0x40010000
 800199c:	40010800 	.word	0x40010800
 80019a0:	40010c00 	.word	0x40010c00
 80019a4:	40011000 	.word	0x40011000
 80019a8:	40011400 	.word	0x40011400
 80019ac:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80019b0:	4b0b      	ldr	r3, [pc, #44]	; (80019e0 <HAL_GPIO_Init+0x304>)
 80019b2:	68da      	ldr	r2, [r3, #12]
 80019b4:	69bb      	ldr	r3, [r7, #24]
 80019b6:	43db      	mvns	r3, r3
 80019b8:	4909      	ldr	r1, [pc, #36]	; (80019e0 <HAL_GPIO_Init+0x304>)
 80019ba:	4013      	ands	r3, r2
 80019bc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80019be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c0:	3301      	adds	r3, #1
 80019c2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ca:	fa22 f303 	lsr.w	r3, r2, r3
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	f47f ae8e 	bne.w	80016f0 <HAL_GPIO_Init+0x14>
  }
}
 80019d4:	bf00      	nop
 80019d6:	bf00      	nop
 80019d8:	372c      	adds	r7, #44	; 0x2c
 80019da:	46bd      	mov	sp, r7
 80019dc:	bc80      	pop	{r7}
 80019de:	4770      	bx	lr
 80019e0:	40010400 	.word	0x40010400

080019e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	460b      	mov	r3, r1
 80019ee:	807b      	strh	r3, [r7, #2]
 80019f0:	4613      	mov	r3, r2
 80019f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019f4:	787b      	ldrb	r3, [r7, #1]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d003      	beq.n	8001a02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019fa:	887a      	ldrh	r2, [r7, #2]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a00:	e003      	b.n	8001a0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a02:	887b      	ldrh	r3, [r7, #2]
 8001a04:	041a      	lsls	r2, r3, #16
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	611a      	str	r2, [r3, #16]
}
 8001a0a:	bf00      	nop
 8001a0c:	370c      	adds	r7, #12
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bc80      	pop	{r7}
 8001a12:	4770      	bx	lr

08001a14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b086      	sub	sp, #24
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d101      	bne.n	8001a26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e272      	b.n	8001f0c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 0301 	and.w	r3, r3, #1
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	f000 8087 	beq.w	8001b42 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a34:	4b92      	ldr	r3, [pc, #584]	; (8001c80 <HAL_RCC_OscConfig+0x26c>)
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f003 030c 	and.w	r3, r3, #12
 8001a3c:	2b04      	cmp	r3, #4
 8001a3e:	d00c      	beq.n	8001a5a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a40:	4b8f      	ldr	r3, [pc, #572]	; (8001c80 <HAL_RCC_OscConfig+0x26c>)
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f003 030c 	and.w	r3, r3, #12
 8001a48:	2b08      	cmp	r3, #8
 8001a4a:	d112      	bne.n	8001a72 <HAL_RCC_OscConfig+0x5e>
 8001a4c:	4b8c      	ldr	r3, [pc, #560]	; (8001c80 <HAL_RCC_OscConfig+0x26c>)
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a58:	d10b      	bne.n	8001a72 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a5a:	4b89      	ldr	r3, [pc, #548]	; (8001c80 <HAL_RCC_OscConfig+0x26c>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d06c      	beq.n	8001b40 <HAL_RCC_OscConfig+0x12c>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d168      	bne.n	8001b40 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e24c      	b.n	8001f0c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a7a:	d106      	bne.n	8001a8a <HAL_RCC_OscConfig+0x76>
 8001a7c:	4b80      	ldr	r3, [pc, #512]	; (8001c80 <HAL_RCC_OscConfig+0x26c>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a7f      	ldr	r2, [pc, #508]	; (8001c80 <HAL_RCC_OscConfig+0x26c>)
 8001a82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a86:	6013      	str	r3, [r2, #0]
 8001a88:	e02e      	b.n	8001ae8 <HAL_RCC_OscConfig+0xd4>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d10c      	bne.n	8001aac <HAL_RCC_OscConfig+0x98>
 8001a92:	4b7b      	ldr	r3, [pc, #492]	; (8001c80 <HAL_RCC_OscConfig+0x26c>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a7a      	ldr	r2, [pc, #488]	; (8001c80 <HAL_RCC_OscConfig+0x26c>)
 8001a98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a9c:	6013      	str	r3, [r2, #0]
 8001a9e:	4b78      	ldr	r3, [pc, #480]	; (8001c80 <HAL_RCC_OscConfig+0x26c>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a77      	ldr	r2, [pc, #476]	; (8001c80 <HAL_RCC_OscConfig+0x26c>)
 8001aa4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001aa8:	6013      	str	r3, [r2, #0]
 8001aaa:	e01d      	b.n	8001ae8 <HAL_RCC_OscConfig+0xd4>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ab4:	d10c      	bne.n	8001ad0 <HAL_RCC_OscConfig+0xbc>
 8001ab6:	4b72      	ldr	r3, [pc, #456]	; (8001c80 <HAL_RCC_OscConfig+0x26c>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a71      	ldr	r2, [pc, #452]	; (8001c80 <HAL_RCC_OscConfig+0x26c>)
 8001abc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ac0:	6013      	str	r3, [r2, #0]
 8001ac2:	4b6f      	ldr	r3, [pc, #444]	; (8001c80 <HAL_RCC_OscConfig+0x26c>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a6e      	ldr	r2, [pc, #440]	; (8001c80 <HAL_RCC_OscConfig+0x26c>)
 8001ac8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001acc:	6013      	str	r3, [r2, #0]
 8001ace:	e00b      	b.n	8001ae8 <HAL_RCC_OscConfig+0xd4>
 8001ad0:	4b6b      	ldr	r3, [pc, #428]	; (8001c80 <HAL_RCC_OscConfig+0x26c>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a6a      	ldr	r2, [pc, #424]	; (8001c80 <HAL_RCC_OscConfig+0x26c>)
 8001ad6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ada:	6013      	str	r3, [r2, #0]
 8001adc:	4b68      	ldr	r3, [pc, #416]	; (8001c80 <HAL_RCC_OscConfig+0x26c>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a67      	ldr	r2, [pc, #412]	; (8001c80 <HAL_RCC_OscConfig+0x26c>)
 8001ae2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ae6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d013      	beq.n	8001b18 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af0:	f7fe ff2a 	bl	8000948 <HAL_GetTick>
 8001af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001af6:	e008      	b.n	8001b0a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001af8:	f7fe ff26 	bl	8000948 <HAL_GetTick>
 8001afc:	4602      	mov	r2, r0
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	2b64      	cmp	r3, #100	; 0x64
 8001b04:	d901      	bls.n	8001b0a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e200      	b.n	8001f0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b0a:	4b5d      	ldr	r3, [pc, #372]	; (8001c80 <HAL_RCC_OscConfig+0x26c>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d0f0      	beq.n	8001af8 <HAL_RCC_OscConfig+0xe4>
 8001b16:	e014      	b.n	8001b42 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b18:	f7fe ff16 	bl	8000948 <HAL_GetTick>
 8001b1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b1e:	e008      	b.n	8001b32 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b20:	f7fe ff12 	bl	8000948 <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	2b64      	cmp	r3, #100	; 0x64
 8001b2c:	d901      	bls.n	8001b32 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e1ec      	b.n	8001f0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b32:	4b53      	ldr	r3, [pc, #332]	; (8001c80 <HAL_RCC_OscConfig+0x26c>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d1f0      	bne.n	8001b20 <HAL_RCC_OscConfig+0x10c>
 8001b3e:	e000      	b.n	8001b42 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0302 	and.w	r3, r3, #2
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d063      	beq.n	8001c16 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b4e:	4b4c      	ldr	r3, [pc, #304]	; (8001c80 <HAL_RCC_OscConfig+0x26c>)
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f003 030c 	and.w	r3, r3, #12
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d00b      	beq.n	8001b72 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b5a:	4b49      	ldr	r3, [pc, #292]	; (8001c80 <HAL_RCC_OscConfig+0x26c>)
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f003 030c 	and.w	r3, r3, #12
 8001b62:	2b08      	cmp	r3, #8
 8001b64:	d11c      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x18c>
 8001b66:	4b46      	ldr	r3, [pc, #280]	; (8001c80 <HAL_RCC_OscConfig+0x26c>)
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d116      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b72:	4b43      	ldr	r3, [pc, #268]	; (8001c80 <HAL_RCC_OscConfig+0x26c>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0302 	and.w	r3, r3, #2
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d005      	beq.n	8001b8a <HAL_RCC_OscConfig+0x176>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	691b      	ldr	r3, [r3, #16]
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d001      	beq.n	8001b8a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e1c0      	b.n	8001f0c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b8a:	4b3d      	ldr	r3, [pc, #244]	; (8001c80 <HAL_RCC_OscConfig+0x26c>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	695b      	ldr	r3, [r3, #20]
 8001b96:	00db      	lsls	r3, r3, #3
 8001b98:	4939      	ldr	r1, [pc, #228]	; (8001c80 <HAL_RCC_OscConfig+0x26c>)
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b9e:	e03a      	b.n	8001c16 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	691b      	ldr	r3, [r3, #16]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d020      	beq.n	8001bea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ba8:	4b36      	ldr	r3, [pc, #216]	; (8001c84 <HAL_RCC_OscConfig+0x270>)
 8001baa:	2201      	movs	r2, #1
 8001bac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bae:	f7fe fecb 	bl	8000948 <HAL_GetTick>
 8001bb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bb4:	e008      	b.n	8001bc8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bb6:	f7fe fec7 	bl	8000948 <HAL_GetTick>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d901      	bls.n	8001bc8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	e1a1      	b.n	8001f0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bc8:	4b2d      	ldr	r3, [pc, #180]	; (8001c80 <HAL_RCC_OscConfig+0x26c>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0302 	and.w	r3, r3, #2
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d0f0      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bd4:	4b2a      	ldr	r3, [pc, #168]	; (8001c80 <HAL_RCC_OscConfig+0x26c>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	695b      	ldr	r3, [r3, #20]
 8001be0:	00db      	lsls	r3, r3, #3
 8001be2:	4927      	ldr	r1, [pc, #156]	; (8001c80 <HAL_RCC_OscConfig+0x26c>)
 8001be4:	4313      	orrs	r3, r2
 8001be6:	600b      	str	r3, [r1, #0]
 8001be8:	e015      	b.n	8001c16 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bea:	4b26      	ldr	r3, [pc, #152]	; (8001c84 <HAL_RCC_OscConfig+0x270>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf0:	f7fe feaa 	bl	8000948 <HAL_GetTick>
 8001bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bf6:	e008      	b.n	8001c0a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bf8:	f7fe fea6 	bl	8000948 <HAL_GetTick>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d901      	bls.n	8001c0a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e180      	b.n	8001f0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c0a:	4b1d      	ldr	r3, [pc, #116]	; (8001c80 <HAL_RCC_OscConfig+0x26c>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0302 	and.w	r3, r3, #2
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d1f0      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0308 	and.w	r3, r3, #8
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d03a      	beq.n	8001c98 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	699b      	ldr	r3, [r3, #24]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d019      	beq.n	8001c5e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c2a:	4b17      	ldr	r3, [pc, #92]	; (8001c88 <HAL_RCC_OscConfig+0x274>)
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c30:	f7fe fe8a 	bl	8000948 <HAL_GetTick>
 8001c34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c36:	e008      	b.n	8001c4a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c38:	f7fe fe86 	bl	8000948 <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d901      	bls.n	8001c4a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e160      	b.n	8001f0c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c4a:	4b0d      	ldr	r3, [pc, #52]	; (8001c80 <HAL_RCC_OscConfig+0x26c>)
 8001c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c4e:	f003 0302 	and.w	r3, r3, #2
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d0f0      	beq.n	8001c38 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001c56:	2001      	movs	r0, #1
 8001c58:	f000 fad8 	bl	800220c <RCC_Delay>
 8001c5c:	e01c      	b.n	8001c98 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c5e:	4b0a      	ldr	r3, [pc, #40]	; (8001c88 <HAL_RCC_OscConfig+0x274>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c64:	f7fe fe70 	bl	8000948 <HAL_GetTick>
 8001c68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c6a:	e00f      	b.n	8001c8c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c6c:	f7fe fe6c 	bl	8000948 <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d908      	bls.n	8001c8c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e146      	b.n	8001f0c <HAL_RCC_OscConfig+0x4f8>
 8001c7e:	bf00      	nop
 8001c80:	40021000 	.word	0x40021000
 8001c84:	42420000 	.word	0x42420000
 8001c88:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c8c:	4b92      	ldr	r3, [pc, #584]	; (8001ed8 <HAL_RCC_OscConfig+0x4c4>)
 8001c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c90:	f003 0302 	and.w	r3, r3, #2
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d1e9      	bne.n	8001c6c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0304 	and.w	r3, r3, #4
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	f000 80a6 	beq.w	8001df2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001caa:	4b8b      	ldr	r3, [pc, #556]	; (8001ed8 <HAL_RCC_OscConfig+0x4c4>)
 8001cac:	69db      	ldr	r3, [r3, #28]
 8001cae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d10d      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cb6:	4b88      	ldr	r3, [pc, #544]	; (8001ed8 <HAL_RCC_OscConfig+0x4c4>)
 8001cb8:	69db      	ldr	r3, [r3, #28]
 8001cba:	4a87      	ldr	r2, [pc, #540]	; (8001ed8 <HAL_RCC_OscConfig+0x4c4>)
 8001cbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cc0:	61d3      	str	r3, [r2, #28]
 8001cc2:	4b85      	ldr	r3, [pc, #532]	; (8001ed8 <HAL_RCC_OscConfig+0x4c4>)
 8001cc4:	69db      	ldr	r3, [r3, #28]
 8001cc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cca:	60bb      	str	r3, [r7, #8]
 8001ccc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cd2:	4b82      	ldr	r3, [pc, #520]	; (8001edc <HAL_RCC_OscConfig+0x4c8>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d118      	bne.n	8001d10 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cde:	4b7f      	ldr	r3, [pc, #508]	; (8001edc <HAL_RCC_OscConfig+0x4c8>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a7e      	ldr	r2, [pc, #504]	; (8001edc <HAL_RCC_OscConfig+0x4c8>)
 8001ce4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ce8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cea:	f7fe fe2d 	bl	8000948 <HAL_GetTick>
 8001cee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cf0:	e008      	b.n	8001d04 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cf2:	f7fe fe29 	bl	8000948 <HAL_GetTick>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	2b64      	cmp	r3, #100	; 0x64
 8001cfe:	d901      	bls.n	8001d04 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d00:	2303      	movs	r3, #3
 8001d02:	e103      	b.n	8001f0c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d04:	4b75      	ldr	r3, [pc, #468]	; (8001edc <HAL_RCC_OscConfig+0x4c8>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d0f0      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d106      	bne.n	8001d26 <HAL_RCC_OscConfig+0x312>
 8001d18:	4b6f      	ldr	r3, [pc, #444]	; (8001ed8 <HAL_RCC_OscConfig+0x4c4>)
 8001d1a:	6a1b      	ldr	r3, [r3, #32]
 8001d1c:	4a6e      	ldr	r2, [pc, #440]	; (8001ed8 <HAL_RCC_OscConfig+0x4c4>)
 8001d1e:	f043 0301 	orr.w	r3, r3, #1
 8001d22:	6213      	str	r3, [r2, #32]
 8001d24:	e02d      	b.n	8001d82 <HAL_RCC_OscConfig+0x36e>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	68db      	ldr	r3, [r3, #12]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d10c      	bne.n	8001d48 <HAL_RCC_OscConfig+0x334>
 8001d2e:	4b6a      	ldr	r3, [pc, #424]	; (8001ed8 <HAL_RCC_OscConfig+0x4c4>)
 8001d30:	6a1b      	ldr	r3, [r3, #32]
 8001d32:	4a69      	ldr	r2, [pc, #420]	; (8001ed8 <HAL_RCC_OscConfig+0x4c4>)
 8001d34:	f023 0301 	bic.w	r3, r3, #1
 8001d38:	6213      	str	r3, [r2, #32]
 8001d3a:	4b67      	ldr	r3, [pc, #412]	; (8001ed8 <HAL_RCC_OscConfig+0x4c4>)
 8001d3c:	6a1b      	ldr	r3, [r3, #32]
 8001d3e:	4a66      	ldr	r2, [pc, #408]	; (8001ed8 <HAL_RCC_OscConfig+0x4c4>)
 8001d40:	f023 0304 	bic.w	r3, r3, #4
 8001d44:	6213      	str	r3, [r2, #32]
 8001d46:	e01c      	b.n	8001d82 <HAL_RCC_OscConfig+0x36e>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	2b05      	cmp	r3, #5
 8001d4e:	d10c      	bne.n	8001d6a <HAL_RCC_OscConfig+0x356>
 8001d50:	4b61      	ldr	r3, [pc, #388]	; (8001ed8 <HAL_RCC_OscConfig+0x4c4>)
 8001d52:	6a1b      	ldr	r3, [r3, #32]
 8001d54:	4a60      	ldr	r2, [pc, #384]	; (8001ed8 <HAL_RCC_OscConfig+0x4c4>)
 8001d56:	f043 0304 	orr.w	r3, r3, #4
 8001d5a:	6213      	str	r3, [r2, #32]
 8001d5c:	4b5e      	ldr	r3, [pc, #376]	; (8001ed8 <HAL_RCC_OscConfig+0x4c4>)
 8001d5e:	6a1b      	ldr	r3, [r3, #32]
 8001d60:	4a5d      	ldr	r2, [pc, #372]	; (8001ed8 <HAL_RCC_OscConfig+0x4c4>)
 8001d62:	f043 0301 	orr.w	r3, r3, #1
 8001d66:	6213      	str	r3, [r2, #32]
 8001d68:	e00b      	b.n	8001d82 <HAL_RCC_OscConfig+0x36e>
 8001d6a:	4b5b      	ldr	r3, [pc, #364]	; (8001ed8 <HAL_RCC_OscConfig+0x4c4>)
 8001d6c:	6a1b      	ldr	r3, [r3, #32]
 8001d6e:	4a5a      	ldr	r2, [pc, #360]	; (8001ed8 <HAL_RCC_OscConfig+0x4c4>)
 8001d70:	f023 0301 	bic.w	r3, r3, #1
 8001d74:	6213      	str	r3, [r2, #32]
 8001d76:	4b58      	ldr	r3, [pc, #352]	; (8001ed8 <HAL_RCC_OscConfig+0x4c4>)
 8001d78:	6a1b      	ldr	r3, [r3, #32]
 8001d7a:	4a57      	ldr	r2, [pc, #348]	; (8001ed8 <HAL_RCC_OscConfig+0x4c4>)
 8001d7c:	f023 0304 	bic.w	r3, r3, #4
 8001d80:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	68db      	ldr	r3, [r3, #12]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d015      	beq.n	8001db6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d8a:	f7fe fddd 	bl	8000948 <HAL_GetTick>
 8001d8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d90:	e00a      	b.n	8001da8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d92:	f7fe fdd9 	bl	8000948 <HAL_GetTick>
 8001d96:	4602      	mov	r2, r0
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	1ad3      	subs	r3, r2, r3
 8001d9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d901      	bls.n	8001da8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001da4:	2303      	movs	r3, #3
 8001da6:	e0b1      	b.n	8001f0c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001da8:	4b4b      	ldr	r3, [pc, #300]	; (8001ed8 <HAL_RCC_OscConfig+0x4c4>)
 8001daa:	6a1b      	ldr	r3, [r3, #32]
 8001dac:	f003 0302 	and.w	r3, r3, #2
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d0ee      	beq.n	8001d92 <HAL_RCC_OscConfig+0x37e>
 8001db4:	e014      	b.n	8001de0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001db6:	f7fe fdc7 	bl	8000948 <HAL_GetTick>
 8001dba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dbc:	e00a      	b.n	8001dd4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dbe:	f7fe fdc3 	bl	8000948 <HAL_GetTick>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d901      	bls.n	8001dd4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	e09b      	b.n	8001f0c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dd4:	4b40      	ldr	r3, [pc, #256]	; (8001ed8 <HAL_RCC_OscConfig+0x4c4>)
 8001dd6:	6a1b      	ldr	r3, [r3, #32]
 8001dd8:	f003 0302 	and.w	r3, r3, #2
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d1ee      	bne.n	8001dbe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001de0:	7dfb      	ldrb	r3, [r7, #23]
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d105      	bne.n	8001df2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001de6:	4b3c      	ldr	r3, [pc, #240]	; (8001ed8 <HAL_RCC_OscConfig+0x4c4>)
 8001de8:	69db      	ldr	r3, [r3, #28]
 8001dea:	4a3b      	ldr	r2, [pc, #236]	; (8001ed8 <HAL_RCC_OscConfig+0x4c4>)
 8001dec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001df0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	69db      	ldr	r3, [r3, #28]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	f000 8087 	beq.w	8001f0a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001dfc:	4b36      	ldr	r3, [pc, #216]	; (8001ed8 <HAL_RCC_OscConfig+0x4c4>)
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f003 030c 	and.w	r3, r3, #12
 8001e04:	2b08      	cmp	r3, #8
 8001e06:	d061      	beq.n	8001ecc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	69db      	ldr	r3, [r3, #28]
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d146      	bne.n	8001e9e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e10:	4b33      	ldr	r3, [pc, #204]	; (8001ee0 <HAL_RCC_OscConfig+0x4cc>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e16:	f7fe fd97 	bl	8000948 <HAL_GetTick>
 8001e1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e1c:	e008      	b.n	8001e30 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e1e:	f7fe fd93 	bl	8000948 <HAL_GetTick>
 8001e22:	4602      	mov	r2, r0
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d901      	bls.n	8001e30 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	e06d      	b.n	8001f0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e30:	4b29      	ldr	r3, [pc, #164]	; (8001ed8 <HAL_RCC_OscConfig+0x4c4>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d1f0      	bne.n	8001e1e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6a1b      	ldr	r3, [r3, #32]
 8001e40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e44:	d108      	bne.n	8001e58 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e46:	4b24      	ldr	r3, [pc, #144]	; (8001ed8 <HAL_RCC_OscConfig+0x4c4>)
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	4921      	ldr	r1, [pc, #132]	; (8001ed8 <HAL_RCC_OscConfig+0x4c4>)
 8001e54:	4313      	orrs	r3, r2
 8001e56:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e58:	4b1f      	ldr	r3, [pc, #124]	; (8001ed8 <HAL_RCC_OscConfig+0x4c4>)
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6a19      	ldr	r1, [r3, #32]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e68:	430b      	orrs	r3, r1
 8001e6a:	491b      	ldr	r1, [pc, #108]	; (8001ed8 <HAL_RCC_OscConfig+0x4c4>)
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e70:	4b1b      	ldr	r3, [pc, #108]	; (8001ee0 <HAL_RCC_OscConfig+0x4cc>)
 8001e72:	2201      	movs	r2, #1
 8001e74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e76:	f7fe fd67 	bl	8000948 <HAL_GetTick>
 8001e7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e7c:	e008      	b.n	8001e90 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e7e:	f7fe fd63 	bl	8000948 <HAL_GetTick>
 8001e82:	4602      	mov	r2, r0
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	2b02      	cmp	r3, #2
 8001e8a:	d901      	bls.n	8001e90 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	e03d      	b.n	8001f0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e90:	4b11      	ldr	r3, [pc, #68]	; (8001ed8 <HAL_RCC_OscConfig+0x4c4>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d0f0      	beq.n	8001e7e <HAL_RCC_OscConfig+0x46a>
 8001e9c:	e035      	b.n	8001f0a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e9e:	4b10      	ldr	r3, [pc, #64]	; (8001ee0 <HAL_RCC_OscConfig+0x4cc>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea4:	f7fe fd50 	bl	8000948 <HAL_GetTick>
 8001ea8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eaa:	e008      	b.n	8001ebe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eac:	f7fe fd4c 	bl	8000948 <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d901      	bls.n	8001ebe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	e026      	b.n	8001f0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ebe:	4b06      	ldr	r3, [pc, #24]	; (8001ed8 <HAL_RCC_OscConfig+0x4c4>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d1f0      	bne.n	8001eac <HAL_RCC_OscConfig+0x498>
 8001eca:	e01e      	b.n	8001f0a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	69db      	ldr	r3, [r3, #28]
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d107      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e019      	b.n	8001f0c <HAL_RCC_OscConfig+0x4f8>
 8001ed8:	40021000 	.word	0x40021000
 8001edc:	40007000 	.word	0x40007000
 8001ee0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ee4:	4b0b      	ldr	r3, [pc, #44]	; (8001f14 <HAL_RCC_OscConfig+0x500>)
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6a1b      	ldr	r3, [r3, #32]
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d106      	bne.n	8001f06 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d001      	beq.n	8001f0a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e000      	b.n	8001f0c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001f0a:	2300      	movs	r3, #0
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3718      	adds	r7, #24
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	40021000 	.word	0x40021000

08001f18 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d101      	bne.n	8001f2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e0d0      	b.n	80020ce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f2c:	4b6a      	ldr	r3, [pc, #424]	; (80020d8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0307 	and.w	r3, r3, #7
 8001f34:	683a      	ldr	r2, [r7, #0]
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d910      	bls.n	8001f5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f3a:	4b67      	ldr	r3, [pc, #412]	; (80020d8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f023 0207 	bic.w	r2, r3, #7
 8001f42:	4965      	ldr	r1, [pc, #404]	; (80020d8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f4a:	4b63      	ldr	r3, [pc, #396]	; (80020d8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0307 	and.w	r3, r3, #7
 8001f52:	683a      	ldr	r2, [r7, #0]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d001      	beq.n	8001f5c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e0b8      	b.n	80020ce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 0302 	and.w	r3, r3, #2
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d020      	beq.n	8001faa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0304 	and.w	r3, r3, #4
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d005      	beq.n	8001f80 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f74:	4b59      	ldr	r3, [pc, #356]	; (80020dc <HAL_RCC_ClockConfig+0x1c4>)
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	4a58      	ldr	r2, [pc, #352]	; (80020dc <HAL_RCC_ClockConfig+0x1c4>)
 8001f7a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f7e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0308 	and.w	r3, r3, #8
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d005      	beq.n	8001f98 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f8c:	4b53      	ldr	r3, [pc, #332]	; (80020dc <HAL_RCC_ClockConfig+0x1c4>)
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	4a52      	ldr	r2, [pc, #328]	; (80020dc <HAL_RCC_ClockConfig+0x1c4>)
 8001f92:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001f96:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f98:	4b50      	ldr	r3, [pc, #320]	; (80020dc <HAL_RCC_ClockConfig+0x1c4>)
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	494d      	ldr	r1, [pc, #308]	; (80020dc <HAL_RCC_ClockConfig+0x1c4>)
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 0301 	and.w	r3, r3, #1
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d040      	beq.n	8002038 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d107      	bne.n	8001fce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fbe:	4b47      	ldr	r3, [pc, #284]	; (80020dc <HAL_RCC_ClockConfig+0x1c4>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d115      	bne.n	8001ff6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e07f      	b.n	80020ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d107      	bne.n	8001fe6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fd6:	4b41      	ldr	r3, [pc, #260]	; (80020dc <HAL_RCC_ClockConfig+0x1c4>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d109      	bne.n	8001ff6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e073      	b.n	80020ce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fe6:	4b3d      	ldr	r3, [pc, #244]	; (80020dc <HAL_RCC_ClockConfig+0x1c4>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 0302 	and.w	r3, r3, #2
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d101      	bne.n	8001ff6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e06b      	b.n	80020ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ff6:	4b39      	ldr	r3, [pc, #228]	; (80020dc <HAL_RCC_ClockConfig+0x1c4>)
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f023 0203 	bic.w	r2, r3, #3
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	4936      	ldr	r1, [pc, #216]	; (80020dc <HAL_RCC_ClockConfig+0x1c4>)
 8002004:	4313      	orrs	r3, r2
 8002006:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002008:	f7fe fc9e 	bl	8000948 <HAL_GetTick>
 800200c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800200e:	e00a      	b.n	8002026 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002010:	f7fe fc9a 	bl	8000948 <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	f241 3288 	movw	r2, #5000	; 0x1388
 800201e:	4293      	cmp	r3, r2
 8002020:	d901      	bls.n	8002026 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e053      	b.n	80020ce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002026:	4b2d      	ldr	r3, [pc, #180]	; (80020dc <HAL_RCC_ClockConfig+0x1c4>)
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f003 020c 	and.w	r2, r3, #12
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	429a      	cmp	r2, r3
 8002036:	d1eb      	bne.n	8002010 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002038:	4b27      	ldr	r3, [pc, #156]	; (80020d8 <HAL_RCC_ClockConfig+0x1c0>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0307 	and.w	r3, r3, #7
 8002040:	683a      	ldr	r2, [r7, #0]
 8002042:	429a      	cmp	r2, r3
 8002044:	d210      	bcs.n	8002068 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002046:	4b24      	ldr	r3, [pc, #144]	; (80020d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f023 0207 	bic.w	r2, r3, #7
 800204e:	4922      	ldr	r1, [pc, #136]	; (80020d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	4313      	orrs	r3, r2
 8002054:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002056:	4b20      	ldr	r3, [pc, #128]	; (80020d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0307 	and.w	r3, r3, #7
 800205e:	683a      	ldr	r2, [r7, #0]
 8002060:	429a      	cmp	r2, r3
 8002062:	d001      	beq.n	8002068 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e032      	b.n	80020ce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0304 	and.w	r3, r3, #4
 8002070:	2b00      	cmp	r3, #0
 8002072:	d008      	beq.n	8002086 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002074:	4b19      	ldr	r3, [pc, #100]	; (80020dc <HAL_RCC_ClockConfig+0x1c4>)
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	4916      	ldr	r1, [pc, #88]	; (80020dc <HAL_RCC_ClockConfig+0x1c4>)
 8002082:	4313      	orrs	r3, r2
 8002084:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0308 	and.w	r3, r3, #8
 800208e:	2b00      	cmp	r3, #0
 8002090:	d009      	beq.n	80020a6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002092:	4b12      	ldr	r3, [pc, #72]	; (80020dc <HAL_RCC_ClockConfig+0x1c4>)
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	691b      	ldr	r3, [r3, #16]
 800209e:	00db      	lsls	r3, r3, #3
 80020a0:	490e      	ldr	r1, [pc, #56]	; (80020dc <HAL_RCC_ClockConfig+0x1c4>)
 80020a2:	4313      	orrs	r3, r2
 80020a4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020a6:	f000 f821 	bl	80020ec <HAL_RCC_GetSysClockFreq>
 80020aa:	4602      	mov	r2, r0
 80020ac:	4b0b      	ldr	r3, [pc, #44]	; (80020dc <HAL_RCC_ClockConfig+0x1c4>)
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	091b      	lsrs	r3, r3, #4
 80020b2:	f003 030f 	and.w	r3, r3, #15
 80020b6:	490a      	ldr	r1, [pc, #40]	; (80020e0 <HAL_RCC_ClockConfig+0x1c8>)
 80020b8:	5ccb      	ldrb	r3, [r1, r3]
 80020ba:	fa22 f303 	lsr.w	r3, r2, r3
 80020be:	4a09      	ldr	r2, [pc, #36]	; (80020e4 <HAL_RCC_ClockConfig+0x1cc>)
 80020c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80020c2:	4b09      	ldr	r3, [pc, #36]	; (80020e8 <HAL_RCC_ClockConfig+0x1d0>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7fe fbfc 	bl	80008c4 <HAL_InitTick>

  return HAL_OK;
 80020cc:	2300      	movs	r3, #0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3710      	adds	r7, #16
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	40022000 	.word	0x40022000
 80020dc:	40021000 	.word	0x40021000
 80020e0:	080037f8 	.word	0x080037f8
 80020e4:	20000008 	.word	0x20000008
 80020e8:	2000000c 	.word	0x2000000c

080020ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020ec:	b490      	push	{r4, r7}
 80020ee:	b08a      	sub	sp, #40	; 0x28
 80020f0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80020f2:	4b29      	ldr	r3, [pc, #164]	; (8002198 <HAL_RCC_GetSysClockFreq+0xac>)
 80020f4:	1d3c      	adds	r4, r7, #4
 80020f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80020fc:	f240 2301 	movw	r3, #513	; 0x201
 8002100:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002102:	2300      	movs	r3, #0
 8002104:	61fb      	str	r3, [r7, #28]
 8002106:	2300      	movs	r3, #0
 8002108:	61bb      	str	r3, [r7, #24]
 800210a:	2300      	movs	r3, #0
 800210c:	627b      	str	r3, [r7, #36]	; 0x24
 800210e:	2300      	movs	r3, #0
 8002110:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002112:	2300      	movs	r3, #0
 8002114:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002116:	4b21      	ldr	r3, [pc, #132]	; (800219c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	f003 030c 	and.w	r3, r3, #12
 8002122:	2b04      	cmp	r3, #4
 8002124:	d002      	beq.n	800212c <HAL_RCC_GetSysClockFreq+0x40>
 8002126:	2b08      	cmp	r3, #8
 8002128:	d003      	beq.n	8002132 <HAL_RCC_GetSysClockFreq+0x46>
 800212a:	e02b      	b.n	8002184 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800212c:	4b1c      	ldr	r3, [pc, #112]	; (80021a0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800212e:	623b      	str	r3, [r7, #32]
      break;
 8002130:	e02b      	b.n	800218a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	0c9b      	lsrs	r3, r3, #18
 8002136:	f003 030f 	and.w	r3, r3, #15
 800213a:	3328      	adds	r3, #40	; 0x28
 800213c:	443b      	add	r3, r7
 800213e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002142:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d012      	beq.n	8002174 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800214e:	4b13      	ldr	r3, [pc, #76]	; (800219c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	0c5b      	lsrs	r3, r3, #17
 8002154:	f003 0301 	and.w	r3, r3, #1
 8002158:	3328      	adds	r3, #40	; 0x28
 800215a:	443b      	add	r3, r7
 800215c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002160:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	4a0e      	ldr	r2, [pc, #56]	; (80021a0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002166:	fb03 f202 	mul.w	r2, r3, r2
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002170:	627b      	str	r3, [r7, #36]	; 0x24
 8002172:	e004      	b.n	800217e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	4a0b      	ldr	r2, [pc, #44]	; (80021a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002178:	fb02 f303 	mul.w	r3, r2, r3
 800217c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800217e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002180:	623b      	str	r3, [r7, #32]
      break;
 8002182:	e002      	b.n	800218a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002184:	4b06      	ldr	r3, [pc, #24]	; (80021a0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002186:	623b      	str	r3, [r7, #32]
      break;
 8002188:	bf00      	nop
    }
  }
  return sysclockfreq;
 800218a:	6a3b      	ldr	r3, [r7, #32]
}
 800218c:	4618      	mov	r0, r3
 800218e:	3728      	adds	r7, #40	; 0x28
 8002190:	46bd      	mov	sp, r7
 8002192:	bc90      	pop	{r4, r7}
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	080037e8 	.word	0x080037e8
 800219c:	40021000 	.word	0x40021000
 80021a0:	007a1200 	.word	0x007a1200
 80021a4:	003d0900 	.word	0x003d0900

080021a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021ac:	4b02      	ldr	r3, [pc, #8]	; (80021b8 <HAL_RCC_GetHCLKFreq+0x10>)
 80021ae:	681b      	ldr	r3, [r3, #0]
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bc80      	pop	{r7}
 80021b6:	4770      	bx	lr
 80021b8:	20000008 	.word	0x20000008

080021bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80021c0:	f7ff fff2 	bl	80021a8 <HAL_RCC_GetHCLKFreq>
 80021c4:	4602      	mov	r2, r0
 80021c6:	4b05      	ldr	r3, [pc, #20]	; (80021dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	0a1b      	lsrs	r3, r3, #8
 80021cc:	f003 0307 	and.w	r3, r3, #7
 80021d0:	4903      	ldr	r1, [pc, #12]	; (80021e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021d2:	5ccb      	ldrb	r3, [r1, r3]
 80021d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021d8:	4618      	mov	r0, r3
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	40021000 	.word	0x40021000
 80021e0:	08003808 	.word	0x08003808

080021e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80021e8:	f7ff ffde 	bl	80021a8 <HAL_RCC_GetHCLKFreq>
 80021ec:	4602      	mov	r2, r0
 80021ee:	4b05      	ldr	r3, [pc, #20]	; (8002204 <HAL_RCC_GetPCLK2Freq+0x20>)
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	0adb      	lsrs	r3, r3, #11
 80021f4:	f003 0307 	and.w	r3, r3, #7
 80021f8:	4903      	ldr	r1, [pc, #12]	; (8002208 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021fa:	5ccb      	ldrb	r3, [r1, r3]
 80021fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002200:	4618      	mov	r0, r3
 8002202:	bd80      	pop	{r7, pc}
 8002204:	40021000 	.word	0x40021000
 8002208:	08003808 	.word	0x08003808

0800220c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800220c:	b480      	push	{r7}
 800220e:	b085      	sub	sp, #20
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002214:	4b0a      	ldr	r3, [pc, #40]	; (8002240 <RCC_Delay+0x34>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a0a      	ldr	r2, [pc, #40]	; (8002244 <RCC_Delay+0x38>)
 800221a:	fba2 2303 	umull	r2, r3, r2, r3
 800221e:	0a5b      	lsrs	r3, r3, #9
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	fb02 f303 	mul.w	r3, r2, r3
 8002226:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002228:	bf00      	nop
  }
  while (Delay --);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	1e5a      	subs	r2, r3, #1
 800222e:	60fa      	str	r2, [r7, #12]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d1f9      	bne.n	8002228 <RCC_Delay+0x1c>
}
 8002234:	bf00      	nop
 8002236:	bf00      	nop
 8002238:	3714      	adds	r7, #20
 800223a:	46bd      	mov	sp, r7
 800223c:	bc80      	pop	{r7}
 800223e:	4770      	bx	lr
 8002240:	20000008 	.word	0x20000008
 8002244:	10624dd3 	.word	0x10624dd3

08002248 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b086      	sub	sp, #24
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002250:	2300      	movs	r3, #0
 8002252:	613b      	str	r3, [r7, #16]
 8002254:	2300      	movs	r3, #0
 8002256:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0301 	and.w	r3, r3, #1
 8002260:	2b00      	cmp	r3, #0
 8002262:	d07d      	beq.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002264:	2300      	movs	r3, #0
 8002266:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002268:	4b4f      	ldr	r3, [pc, #316]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800226a:	69db      	ldr	r3, [r3, #28]
 800226c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d10d      	bne.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002274:	4b4c      	ldr	r3, [pc, #304]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002276:	69db      	ldr	r3, [r3, #28]
 8002278:	4a4b      	ldr	r2, [pc, #300]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800227a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800227e:	61d3      	str	r3, [r2, #28]
 8002280:	4b49      	ldr	r3, [pc, #292]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002282:	69db      	ldr	r3, [r3, #28]
 8002284:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002288:	60bb      	str	r3, [r7, #8]
 800228a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800228c:	2301      	movs	r3, #1
 800228e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002290:	4b46      	ldr	r3, [pc, #280]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002298:	2b00      	cmp	r3, #0
 800229a:	d118      	bne.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800229c:	4b43      	ldr	r3, [pc, #268]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a42      	ldr	r2, [pc, #264]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022a6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022a8:	f7fe fb4e 	bl	8000948 <HAL_GetTick>
 80022ac:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ae:	e008      	b.n	80022c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022b0:	f7fe fb4a 	bl	8000948 <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	2b64      	cmp	r3, #100	; 0x64
 80022bc:	d901      	bls.n	80022c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e06d      	b.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022c2:	4b3a      	ldr	r3, [pc, #232]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d0f0      	beq.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80022ce:	4b36      	ldr	r3, [pc, #216]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022d0:	6a1b      	ldr	r3, [r3, #32]
 80022d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022d6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d02e      	beq.n	800233c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022e6:	68fa      	ldr	r2, [r7, #12]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d027      	beq.n	800233c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80022ec:	4b2e      	ldr	r3, [pc, #184]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022ee:	6a1b      	ldr	r3, [r3, #32]
 80022f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022f4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80022f6:	4b2e      	ldr	r3, [pc, #184]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80022f8:	2201      	movs	r2, #1
 80022fa:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80022fc:	4b2c      	ldr	r3, [pc, #176]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80022fe:	2200      	movs	r2, #0
 8002300:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002302:	4a29      	ldr	r2, [pc, #164]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	f003 0301 	and.w	r3, r3, #1
 800230e:	2b00      	cmp	r3, #0
 8002310:	d014      	beq.n	800233c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002312:	f7fe fb19 	bl	8000948 <HAL_GetTick>
 8002316:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002318:	e00a      	b.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800231a:	f7fe fb15 	bl	8000948 <HAL_GetTick>
 800231e:	4602      	mov	r2, r0
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	f241 3288 	movw	r2, #5000	; 0x1388
 8002328:	4293      	cmp	r3, r2
 800232a:	d901      	bls.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800232c:	2303      	movs	r3, #3
 800232e:	e036      	b.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002330:	4b1d      	ldr	r3, [pc, #116]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002332:	6a1b      	ldr	r3, [r3, #32]
 8002334:	f003 0302 	and.w	r3, r3, #2
 8002338:	2b00      	cmp	r3, #0
 800233a:	d0ee      	beq.n	800231a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800233c:	4b1a      	ldr	r3, [pc, #104]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800233e:	6a1b      	ldr	r3, [r3, #32]
 8002340:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	4917      	ldr	r1, [pc, #92]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800234a:	4313      	orrs	r3, r2
 800234c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800234e:	7dfb      	ldrb	r3, [r7, #23]
 8002350:	2b01      	cmp	r3, #1
 8002352:	d105      	bne.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002354:	4b14      	ldr	r3, [pc, #80]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002356:	69db      	ldr	r3, [r3, #28]
 8002358:	4a13      	ldr	r2, [pc, #76]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800235a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800235e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0302 	and.w	r3, r3, #2
 8002368:	2b00      	cmp	r3, #0
 800236a:	d008      	beq.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800236c:	4b0e      	ldr	r3, [pc, #56]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	490b      	ldr	r1, [pc, #44]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800237a:	4313      	orrs	r3, r2
 800237c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0310 	and.w	r3, r3, #16
 8002386:	2b00      	cmp	r3, #0
 8002388:	d008      	beq.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800238a:	4b07      	ldr	r3, [pc, #28]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	68db      	ldr	r3, [r3, #12]
 8002396:	4904      	ldr	r1, [pc, #16]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002398:	4313      	orrs	r3, r2
 800239a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800239c:	2300      	movs	r3, #0
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3718      	adds	r7, #24
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	40021000 	.word	0x40021000
 80023ac:	40007000 	.word	0x40007000
 80023b0:	42420440 	.word	0x42420440

080023b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d101      	bne.n	80023c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e03f      	b.n	8002446 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d106      	bne.n	80023e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2200      	movs	r2, #0
 80023d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f7fe f92c 	bl	8000638 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2224      	movs	r2, #36	; 0x24
 80023e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	68da      	ldr	r2, [r3, #12]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80023f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f000 fcab 	bl	8002d54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	691a      	ldr	r2, [r3, #16]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800240c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	695a      	ldr	r2, [r3, #20]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800241c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	68da      	ldr	r2, [r3, #12]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800242c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2200      	movs	r2, #0
 8002432:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2220      	movs	r2, #32
 8002438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2220      	movs	r2, #32
 8002440:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002444:	2300      	movs	r3, #0
}
 8002446:	4618      	mov	r0, r3
 8002448:	3708      	adds	r7, #8
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}

0800244e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800244e:	b580      	push	{r7, lr}
 8002450:	b084      	sub	sp, #16
 8002452:	af00      	add	r7, sp, #0
 8002454:	60f8      	str	r0, [r7, #12]
 8002456:	60b9      	str	r1, [r7, #8]
 8002458:	4613      	mov	r3, r2
 800245a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002462:	b2db      	uxtb	r3, r3
 8002464:	2b20      	cmp	r3, #32
 8002466:	d11d      	bne.n	80024a4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d002      	beq.n	8002474 <HAL_UART_Receive_IT+0x26>
 800246e:	88fb      	ldrh	r3, [r7, #6]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d101      	bne.n	8002478 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e016      	b.n	80024a6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800247e:	2b01      	cmp	r3, #1
 8002480:	d101      	bne.n	8002486 <HAL_UART_Receive_IT+0x38>
 8002482:	2302      	movs	r3, #2
 8002484:	e00f      	b.n	80024a6 <HAL_UART_Receive_IT+0x58>
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2201      	movs	r2, #1
 800248a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2200      	movs	r2, #0
 8002492:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8002494:	88fb      	ldrh	r3, [r7, #6]
 8002496:	461a      	mov	r2, r3
 8002498:	68b9      	ldr	r1, [r7, #8]
 800249a:	68f8      	ldr	r0, [r7, #12]
 800249c:	f000 fabc 	bl	8002a18 <UART_Start_Receive_IT>
 80024a0:	4603      	mov	r3, r0
 80024a2:	e000      	b.n	80024a6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80024a4:	2302      	movs	r3, #2
  }
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3710      	adds	r7, #16
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
	...

080024b0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b086      	sub	sp, #24
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	60f8      	str	r0, [r7, #12]
 80024b8:	60b9      	str	r1, [r7, #8]
 80024ba:	4613      	mov	r3, r2
 80024bc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	2b20      	cmp	r3, #32
 80024c8:	d153      	bne.n	8002572 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d002      	beq.n	80024d6 <HAL_UART_Transmit_DMA+0x26>
 80024d0:	88fb      	ldrh	r3, [r7, #6]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d101      	bne.n	80024da <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e04c      	b.n	8002574 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d101      	bne.n	80024e8 <HAL_UART_Transmit_DMA+0x38>
 80024e4:	2302      	movs	r3, #2
 80024e6:	e045      	b.n	8002574 <HAL_UART_Transmit_DMA+0xc4>
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2201      	movs	r2, #1
 80024ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80024f0:	68ba      	ldr	r2, [r7, #8]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	88fa      	ldrh	r2, [r7, #6]
 80024fa:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	88fa      	ldrh	r2, [r7, #6]
 8002500:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2200      	movs	r2, #0
 8002506:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2221      	movs	r2, #33	; 0x21
 800250c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002514:	4a19      	ldr	r2, [pc, #100]	; (800257c <HAL_UART_Transmit_DMA+0xcc>)
 8002516:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800251c:	4a18      	ldr	r2, [pc, #96]	; (8002580 <HAL_UART_Transmit_DMA+0xd0>)
 800251e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002524:	4a17      	ldr	r2, [pc, #92]	; (8002584 <HAL_UART_Transmit_DMA+0xd4>)
 8002526:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800252c:	2200      	movs	r2, #0
 800252e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 8002530:	f107 0308 	add.w	r3, r7, #8
 8002534:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	6819      	ldr	r1, [r3, #0]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	3304      	adds	r3, #4
 8002544:	461a      	mov	r2, r3
 8002546:	88fb      	ldrh	r3, [r7, #6]
 8002548:	f7fe fe84 	bl	8001254 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002554:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2200      	movs	r2, #0
 800255a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	695a      	ldr	r2, [r3, #20]
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800256c:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800256e:	2300      	movs	r3, #0
 8002570:	e000      	b.n	8002574 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8002572:	2302      	movs	r3, #2
  }
}
 8002574:	4618      	mov	r0, r3
 8002576:	3718      	adds	r7, #24
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}
 800257c:	08002917 	.word	0x08002917
 8002580:	08002969 	.word	0x08002969
 8002584:	08002985 	.word	0x08002985

08002588 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b08a      	sub	sp, #40	; 0x28
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	695b      	ldr	r3, [r3, #20]
 80025a6:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80025a8:	2300      	movs	r3, #0
 80025aa:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80025ac:	2300      	movs	r3, #0
 80025ae:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80025b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b2:	f003 030f 	and.w	r3, r3, #15
 80025b6:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d10d      	bne.n	80025da <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80025be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c0:	f003 0320 	and.w	r3, r3, #32
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d008      	beq.n	80025da <HAL_UART_IRQHandler+0x52>
 80025c8:	6a3b      	ldr	r3, [r7, #32]
 80025ca:	f003 0320 	and.w	r3, r3, #32
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d003      	beq.n	80025da <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f000 fb15 	bl	8002c02 <UART_Receive_IT>
      return;
 80025d8:	e17b      	b.n	80028d2 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80025da:	69bb      	ldr	r3, [r7, #24]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	f000 80b1 	beq.w	8002744 <HAL_UART_IRQHandler+0x1bc>
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	f003 0301 	and.w	r3, r3, #1
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d105      	bne.n	80025f8 <HAL_UART_IRQHandler+0x70>
 80025ec:	6a3b      	ldr	r3, [r7, #32]
 80025ee:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	f000 80a6 	beq.w	8002744 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80025f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fa:	f003 0301 	and.w	r3, r3, #1
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d00a      	beq.n	8002618 <HAL_UART_IRQHandler+0x90>
 8002602:	6a3b      	ldr	r3, [r7, #32]
 8002604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002608:	2b00      	cmp	r3, #0
 800260a:	d005      	beq.n	8002618 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002610:	f043 0201 	orr.w	r2, r3, #1
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261a:	f003 0304 	and.w	r3, r3, #4
 800261e:	2b00      	cmp	r3, #0
 8002620:	d00a      	beq.n	8002638 <HAL_UART_IRQHandler+0xb0>
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	f003 0301 	and.w	r3, r3, #1
 8002628:	2b00      	cmp	r3, #0
 800262a:	d005      	beq.n	8002638 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002630:	f043 0202 	orr.w	r2, r3, #2
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263a:	f003 0302 	and.w	r3, r3, #2
 800263e:	2b00      	cmp	r3, #0
 8002640:	d00a      	beq.n	8002658 <HAL_UART_IRQHandler+0xd0>
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	f003 0301 	and.w	r3, r3, #1
 8002648:	2b00      	cmp	r3, #0
 800264a:	d005      	beq.n	8002658 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002650:	f043 0204 	orr.w	r2, r3, #4
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265a:	f003 0308 	and.w	r3, r3, #8
 800265e:	2b00      	cmp	r3, #0
 8002660:	d00f      	beq.n	8002682 <HAL_UART_IRQHandler+0xfa>
 8002662:	6a3b      	ldr	r3, [r7, #32]
 8002664:	f003 0320 	and.w	r3, r3, #32
 8002668:	2b00      	cmp	r3, #0
 800266a:	d104      	bne.n	8002676 <HAL_UART_IRQHandler+0xee>
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	f003 0301 	and.w	r3, r3, #1
 8002672:	2b00      	cmp	r3, #0
 8002674:	d005      	beq.n	8002682 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267a:	f043 0208 	orr.w	r2, r3, #8
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002686:	2b00      	cmp	r3, #0
 8002688:	f000 811e 	beq.w	80028c8 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800268c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268e:	f003 0320 	and.w	r3, r3, #32
 8002692:	2b00      	cmp	r3, #0
 8002694:	d007      	beq.n	80026a6 <HAL_UART_IRQHandler+0x11e>
 8002696:	6a3b      	ldr	r3, [r7, #32]
 8002698:	f003 0320 	and.w	r3, r3, #32
 800269c:	2b00      	cmp	r3, #0
 800269e:	d002      	beq.n	80026a6 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f000 faae 	bl	8002c02 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	695b      	ldr	r3, [r3, #20]
 80026ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	bf14      	ite	ne
 80026b4:	2301      	movne	r3, #1
 80026b6:	2300      	moveq	r3, #0
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c0:	f003 0308 	and.w	r3, r3, #8
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d102      	bne.n	80026ce <HAL_UART_IRQHandler+0x146>
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d031      	beq.n	8002732 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f000 f9f0 	bl	8002ab4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	695b      	ldr	r3, [r3, #20]
 80026da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d023      	beq.n	800272a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	695a      	ldr	r2, [r3, #20]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026f0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d013      	beq.n	8002722 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026fe:	4a76      	ldr	r2, [pc, #472]	; (80028d8 <HAL_UART_IRQHandler+0x350>)
 8002700:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002706:	4618      	mov	r0, r3
 8002708:	f7fe fe3e 	bl	8001388 <HAL_DMA_Abort_IT>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d016      	beq.n	8002740 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002716:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800271c:	4610      	mov	r0, r2
 800271e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002720:	e00e      	b.n	8002740 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f000 f8e3 	bl	80028ee <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002728:	e00a      	b.n	8002740 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f000 f8df 	bl	80028ee <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002730:	e006      	b.n	8002740 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f000 f8db 	bl	80028ee <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2200      	movs	r2, #0
 800273c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800273e:	e0c3      	b.n	80028c8 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002740:	bf00      	nop
    return;
 8002742:	e0c1      	b.n	80028c8 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002748:	2b01      	cmp	r3, #1
 800274a:	f040 80a1 	bne.w	8002890 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800274e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002750:	f003 0310 	and.w	r3, r3, #16
 8002754:	2b00      	cmp	r3, #0
 8002756:	f000 809b 	beq.w	8002890 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800275a:	6a3b      	ldr	r3, [r7, #32]
 800275c:	f003 0310 	and.w	r3, r3, #16
 8002760:	2b00      	cmp	r3, #0
 8002762:	f000 8095 	beq.w	8002890 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002766:	2300      	movs	r3, #0
 8002768:	60fb      	str	r3, [r7, #12]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	60fb      	str	r3, [r7, #12]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	60fb      	str	r3, [r7, #12]
 800277a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	695b      	ldr	r3, [r3, #20]
 8002782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002786:	2b00      	cmp	r3, #0
 8002788:	d04e      	beq.n	8002828 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002794:	8a3b      	ldrh	r3, [r7, #16]
 8002796:	2b00      	cmp	r3, #0
 8002798:	f000 8098 	beq.w	80028cc <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80027a0:	8a3a      	ldrh	r2, [r7, #16]
 80027a2:	429a      	cmp	r2, r3
 80027a4:	f080 8092 	bcs.w	80028cc <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	8a3a      	ldrh	r2, [r7, #16]
 80027ac:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027b2:	699b      	ldr	r3, [r3, #24]
 80027b4:	2b20      	cmp	r3, #32
 80027b6:	d02b      	beq.n	8002810 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	68da      	ldr	r2, [r3, #12]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80027c6:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	695a      	ldr	r2, [r3, #20]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f022 0201 	bic.w	r2, r2, #1
 80027d6:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	695a      	ldr	r2, [r3, #20]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027e6:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2220      	movs	r2, #32
 80027ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2200      	movs	r2, #0
 80027f4:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	68da      	ldr	r2, [r3, #12]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f022 0210 	bic.w	r2, r2, #16
 8002804:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800280a:	4618      	mov	r0, r3
 800280c:	f7fe fd81 	bl	8001312 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002818:	b29b      	uxth	r3, r3
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	b29b      	uxth	r3, r3
 800281e:	4619      	mov	r1, r3
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	f000 f86d 	bl	8002900 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002826:	e051      	b.n	80028cc <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002830:	b29b      	uxth	r3, r3
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800283a:	b29b      	uxth	r3, r3
 800283c:	2b00      	cmp	r3, #0
 800283e:	d047      	beq.n	80028d0 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8002840:	8a7b      	ldrh	r3, [r7, #18]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d044      	beq.n	80028d0 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	68da      	ldr	r2, [r3, #12]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002854:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	695a      	ldr	r2, [r3, #20]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f022 0201 	bic.w	r2, r2, #1
 8002864:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2220      	movs	r2, #32
 800286a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	68da      	ldr	r2, [r3, #12]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f022 0210 	bic.w	r2, r2, #16
 8002882:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002884:	8a7b      	ldrh	r3, [r7, #18]
 8002886:	4619      	mov	r1, r3
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f000 f839 	bl	8002900 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800288e:	e01f      	b.n	80028d0 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002896:	2b00      	cmp	r3, #0
 8002898:	d008      	beq.n	80028ac <HAL_UART_IRQHandler+0x324>
 800289a:	6a3b      	ldr	r3, [r7, #32]
 800289c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d003      	beq.n	80028ac <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f000 f945 	bl	8002b34 <UART_Transmit_IT>
    return;
 80028aa:	e012      	b.n	80028d2 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80028ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d00d      	beq.n	80028d2 <HAL_UART_IRQHandler+0x34a>
 80028b6:	6a3b      	ldr	r3, [r7, #32]
 80028b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d008      	beq.n	80028d2 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	f000 f986 	bl	8002bd2 <UART_EndTransmit_IT>
    return;
 80028c6:	e004      	b.n	80028d2 <HAL_UART_IRQHandler+0x34a>
    return;
 80028c8:	bf00      	nop
 80028ca:	e002      	b.n	80028d2 <HAL_UART_IRQHandler+0x34a>
      return;
 80028cc:	bf00      	nop
 80028ce:	e000      	b.n	80028d2 <HAL_UART_IRQHandler+0x34a>
      return;
 80028d0:	bf00      	nop
  }
}
 80028d2:	3728      	adds	r7, #40	; 0x28
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	08002b0d 	.word	0x08002b0d

080028dc <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80028e4:	bf00      	nop
 80028e6:	370c      	adds	r7, #12
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bc80      	pop	{r7}
 80028ec:	4770      	bx	lr

080028ee <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80028ee:	b480      	push	{r7}
 80028f0:	b083      	sub	sp, #12
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80028f6:	bf00      	nop
 80028f8:	370c      	adds	r7, #12
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bc80      	pop	{r7}
 80028fe:	4770      	bx	lr

08002900 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	460b      	mov	r3, r1
 800290a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800290c:	bf00      	nop
 800290e:	370c      	adds	r7, #12
 8002910:	46bd      	mov	sp, r7
 8002912:	bc80      	pop	{r7}
 8002914:	4770      	bx	lr

08002916 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002916:	b580      	push	{r7, lr}
 8002918:	b084      	sub	sp, #16
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002922:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 0320 	and.w	r3, r3, #32
 800292e:	2b00      	cmp	r3, #0
 8002930:	d113      	bne.n	800295a <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2200      	movs	r2, #0
 8002936:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	695a      	ldr	r2, [r3, #20]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002946:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	68da      	ldr	r2, [r3, #12]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002956:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002958:	e002      	b.n	8002960 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 800295a:	68f8      	ldr	r0, [r7, #12]
 800295c:	f7fd fbfe 	bl	800015c <HAL_UART_TxCpltCallback>
}
 8002960:	bf00      	nop
 8002962:	3710      	adds	r7, #16
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}

08002968 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b084      	sub	sp, #16
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002974:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8002976:	68f8      	ldr	r0, [r7, #12]
 8002978:	f7ff ffb0 	bl	80028dc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800297c:	bf00      	nop
 800297e:	3710      	adds	r7, #16
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}

08002984 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b084      	sub	sp, #16
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800298c:	2300      	movs	r3, #0
 800298e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002994:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	695b      	ldr	r3, [r3, #20]
 800299c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	bf14      	ite	ne
 80029a4:	2301      	movne	r3, #1
 80029a6:	2300      	moveq	r3, #0
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	2b21      	cmp	r3, #33	; 0x21
 80029b6:	d108      	bne.n	80029ca <UART_DMAError+0x46>
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d005      	beq.n	80029ca <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	2200      	movs	r2, #0
 80029c2:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80029c4:	68b8      	ldr	r0, [r7, #8]
 80029c6:	f000 f860 	bl	8002a8a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	695b      	ldr	r3, [r3, #20]
 80029d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	bf14      	ite	ne
 80029d8:	2301      	movne	r3, #1
 80029da:	2300      	moveq	r3, #0
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	2b22      	cmp	r3, #34	; 0x22
 80029ea:	d108      	bne.n	80029fe <UART_DMAError+0x7a>
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d005      	beq.n	80029fe <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	2200      	movs	r2, #0
 80029f6:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80029f8:	68b8      	ldr	r0, [r7, #8]
 80029fa:	f000 f85b 	bl	8002ab4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a02:	f043 0210 	orr.w	r2, r3, #16
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002a0a:	68b8      	ldr	r0, [r7, #8]
 8002a0c:	f7ff ff6f 	bl	80028ee <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002a10:	bf00      	nop
 8002a12:	3710      	adds	r7, #16
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b085      	sub	sp, #20
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	60f8      	str	r0, [r7, #12]
 8002a20:	60b9      	str	r1, [r7, #8]
 8002a22:	4613      	mov	r3, r2
 8002a24:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	68ba      	ldr	r2, [r7, #8]
 8002a2a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	88fa      	ldrh	r2, [r7, #6]
 8002a30:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	88fa      	ldrh	r2, [r7, #6]
 8002a36:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2222      	movs	r2, #34	; 0x22
 8002a42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	68da      	ldr	r2, [r3, #12]
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a5c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	695a      	ldr	r2, [r3, #20]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f042 0201 	orr.w	r2, r2, #1
 8002a6c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	68da      	ldr	r2, [r3, #12]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f042 0220 	orr.w	r2, r2, #32
 8002a7c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002a7e:	2300      	movs	r3, #0
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3714      	adds	r7, #20
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bc80      	pop	{r7}
 8002a88:	4770      	bx	lr

08002a8a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002a8a:	b480      	push	{r7}
 8002a8c:	b083      	sub	sp, #12
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	68da      	ldr	r2, [r3, #12]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002aa0:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2220      	movs	r2, #32
 8002aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8002aaa:	bf00      	nop
 8002aac:	370c      	adds	r7, #12
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bc80      	pop	{r7}
 8002ab2:	4770      	bx	lr

08002ab4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	68da      	ldr	r2, [r3, #12]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002aca:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	695a      	ldr	r2, [r3, #20]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f022 0201 	bic.w	r2, r2, #1
 8002ada:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d107      	bne.n	8002af4 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	68da      	ldr	r2, [r3, #12]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f022 0210 	bic.w	r2, r2, #16
 8002af2:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2220      	movs	r2, #32
 8002af8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2200      	movs	r2, #0
 8002b00:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002b02:	bf00      	nop
 8002b04:	370c      	adds	r7, #12
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bc80      	pop	{r7}
 8002b0a:	4770      	bx	lr

08002b0c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b18:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2200      	movs	r2, #0
 8002b24:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002b26:	68f8      	ldr	r0, [r7, #12]
 8002b28:	f7ff fee1 	bl	80028ee <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002b2c:	bf00      	nop
 8002b2e:	3710      	adds	r7, #16
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}

08002b34 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b085      	sub	sp, #20
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	2b21      	cmp	r3, #33	; 0x21
 8002b46:	d13e      	bne.n	8002bc6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b50:	d114      	bne.n	8002b7c <UART_Transmit_IT+0x48>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	691b      	ldr	r3, [r3, #16]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d110      	bne.n	8002b7c <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6a1b      	ldr	r3, [r3, #32]
 8002b5e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	881b      	ldrh	r3, [r3, #0]
 8002b64:	461a      	mov	r2, r3
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b6e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6a1b      	ldr	r3, [r3, #32]
 8002b74:	1c9a      	adds	r2, r3, #2
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	621a      	str	r2, [r3, #32]
 8002b7a:	e008      	b.n	8002b8e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6a1b      	ldr	r3, [r3, #32]
 8002b80:	1c59      	adds	r1, r3, #1
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	6211      	str	r1, [r2, #32]
 8002b86:	781a      	ldrb	r2, [r3, #0]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b92:	b29b      	uxth	r3, r3
 8002b94:	3b01      	subs	r3, #1
 8002b96:	b29b      	uxth	r3, r3
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d10f      	bne.n	8002bc2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	68da      	ldr	r2, [r3, #12]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002bb0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	68da      	ldr	r2, [r3, #12]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bc0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	e000      	b.n	8002bc8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002bc6:	2302      	movs	r3, #2
  }
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3714      	adds	r7, #20
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bc80      	pop	{r7}
 8002bd0:	4770      	bx	lr

08002bd2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002bd2:	b580      	push	{r7, lr}
 8002bd4:	b082      	sub	sp, #8
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	68da      	ldr	r2, [r3, #12]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002be8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2220      	movs	r2, #32
 8002bee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f7fd fab2 	bl	800015c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002bf8:	2300      	movs	r3, #0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3708      	adds	r7, #8
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}

08002c02 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002c02:	b580      	push	{r7, lr}
 8002c04:	b086      	sub	sp, #24
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	2b22      	cmp	r3, #34	; 0x22
 8002c14:	f040 8099 	bne.w	8002d4a <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c20:	d117      	bne.n	8002c52 <UART_Receive_IT+0x50>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	691b      	ldr	r3, [r3, #16]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d113      	bne.n	8002c52 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c32:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c40:	b29a      	uxth	r2, r3
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c4a:	1c9a      	adds	r2, r3, #2
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	629a      	str	r2, [r3, #40]	; 0x28
 8002c50:	e026      	b.n	8002ca0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c56:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c64:	d007      	beq.n	8002c76 <UART_Receive_IT+0x74>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d10a      	bne.n	8002c84 <UART_Receive_IT+0x82>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	691b      	ldr	r3, [r3, #16]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d106      	bne.n	8002c84 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	b2da      	uxtb	r2, r3
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	701a      	strb	r2, [r3, #0]
 8002c82:	e008      	b.n	8002c96 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c90:	b2da      	uxtb	r2, r3
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c9a:	1c5a      	adds	r2, r3, #1
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	3b01      	subs	r3, #1
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	4619      	mov	r1, r3
 8002cae:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d148      	bne.n	8002d46 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	68da      	ldr	r2, [r3, #12]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f022 0220 	bic.w	r2, r2, #32
 8002cc2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	68da      	ldr	r2, [r3, #12]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002cd2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	695a      	ldr	r2, [r3, #20]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f022 0201 	bic.w	r2, r2, #1
 8002ce2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2220      	movs	r2, #32
 8002ce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d123      	bne.n	8002d3c <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	68da      	ldr	r2, [r3, #12]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f022 0210 	bic.w	r2, r2, #16
 8002d08:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0310 	and.w	r3, r3, #16
 8002d14:	2b10      	cmp	r3, #16
 8002d16:	d10a      	bne.n	8002d2e <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002d18:	2300      	movs	r3, #0
 8002d1a:	60fb      	str	r3, [r7, #12]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	60fb      	str	r3, [r7, #12]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	60fb      	str	r3, [r7, #12]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002d32:	4619      	mov	r1, r3
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f7ff fde3 	bl	8002900 <HAL_UARTEx_RxEventCallback>
 8002d3a:	e002      	b.n	8002d42 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	f7fd fa17 	bl	8000170 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002d42:	2300      	movs	r3, #0
 8002d44:	e002      	b.n	8002d4c <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8002d46:	2300      	movs	r3, #0
 8002d48:	e000      	b.n	8002d4c <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002d4a:	2302      	movs	r3, #2
  }
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3718      	adds	r7, #24
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b084      	sub	sp, #16
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	691b      	ldr	r3, [r3, #16]
 8002d62:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	68da      	ldr	r2, [r3, #12]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	430a      	orrs	r2, r1
 8002d70:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	689a      	ldr	r2, [r3, #8]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	691b      	ldr	r3, [r3, #16]
 8002d7a:	431a      	orrs	r2, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	695b      	ldr	r3, [r3, #20]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002d8e:	f023 030c 	bic.w	r3, r3, #12
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	6812      	ldr	r2, [r2, #0]
 8002d96:	68b9      	ldr	r1, [r7, #8]
 8002d98:	430b      	orrs	r3, r1
 8002d9a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	695b      	ldr	r3, [r3, #20]
 8002da2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	699a      	ldr	r2, [r3, #24]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	430a      	orrs	r2, r1
 8002db0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a2c      	ldr	r2, [pc, #176]	; (8002e68 <UART_SetConfig+0x114>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d103      	bne.n	8002dc4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002dbc:	f7ff fa12 	bl	80021e4 <HAL_RCC_GetPCLK2Freq>
 8002dc0:	60f8      	str	r0, [r7, #12]
 8002dc2:	e002      	b.n	8002dca <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002dc4:	f7ff f9fa 	bl	80021bc <HAL_RCC_GetPCLK1Freq>
 8002dc8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002dca:	68fa      	ldr	r2, [r7, #12]
 8002dcc:	4613      	mov	r3, r2
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	4413      	add	r3, r2
 8002dd2:	009a      	lsls	r2, r3, #2
 8002dd4:	441a      	add	r2, r3
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002de0:	4a22      	ldr	r2, [pc, #136]	; (8002e6c <UART_SetConfig+0x118>)
 8002de2:	fba2 2303 	umull	r2, r3, r2, r3
 8002de6:	095b      	lsrs	r3, r3, #5
 8002de8:	0119      	lsls	r1, r3, #4
 8002dea:	68fa      	ldr	r2, [r7, #12]
 8002dec:	4613      	mov	r3, r2
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	4413      	add	r3, r2
 8002df2:	009a      	lsls	r2, r3, #2
 8002df4:	441a      	add	r2, r3
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e00:	4b1a      	ldr	r3, [pc, #104]	; (8002e6c <UART_SetConfig+0x118>)
 8002e02:	fba3 0302 	umull	r0, r3, r3, r2
 8002e06:	095b      	lsrs	r3, r3, #5
 8002e08:	2064      	movs	r0, #100	; 0x64
 8002e0a:	fb00 f303 	mul.w	r3, r0, r3
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	011b      	lsls	r3, r3, #4
 8002e12:	3332      	adds	r3, #50	; 0x32
 8002e14:	4a15      	ldr	r2, [pc, #84]	; (8002e6c <UART_SetConfig+0x118>)
 8002e16:	fba2 2303 	umull	r2, r3, r2, r3
 8002e1a:	095b      	lsrs	r3, r3, #5
 8002e1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e20:	4419      	add	r1, r3
 8002e22:	68fa      	ldr	r2, [r7, #12]
 8002e24:	4613      	mov	r3, r2
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	4413      	add	r3, r2
 8002e2a:	009a      	lsls	r2, r3, #2
 8002e2c:	441a      	add	r2, r3
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e38:	4b0c      	ldr	r3, [pc, #48]	; (8002e6c <UART_SetConfig+0x118>)
 8002e3a:	fba3 0302 	umull	r0, r3, r3, r2
 8002e3e:	095b      	lsrs	r3, r3, #5
 8002e40:	2064      	movs	r0, #100	; 0x64
 8002e42:	fb00 f303 	mul.w	r3, r0, r3
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	011b      	lsls	r3, r3, #4
 8002e4a:	3332      	adds	r3, #50	; 0x32
 8002e4c:	4a07      	ldr	r2, [pc, #28]	; (8002e6c <UART_SetConfig+0x118>)
 8002e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e52:	095b      	lsrs	r3, r3, #5
 8002e54:	f003 020f 	and.w	r2, r3, #15
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	440a      	add	r2, r1
 8002e5e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002e60:	bf00      	nop
 8002e62:	3710      	adds	r7, #16
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	40013800 	.word	0x40013800
 8002e6c:	51eb851f 	.word	0x51eb851f

08002e70 <__errno>:
 8002e70:	4b01      	ldr	r3, [pc, #4]	; (8002e78 <__errno+0x8>)
 8002e72:	6818      	ldr	r0, [r3, #0]
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop
 8002e78:	20000014 	.word	0x20000014

08002e7c <__libc_init_array>:
 8002e7c:	b570      	push	{r4, r5, r6, lr}
 8002e7e:	2600      	movs	r6, #0
 8002e80:	4d0c      	ldr	r5, [pc, #48]	; (8002eb4 <__libc_init_array+0x38>)
 8002e82:	4c0d      	ldr	r4, [pc, #52]	; (8002eb8 <__libc_init_array+0x3c>)
 8002e84:	1b64      	subs	r4, r4, r5
 8002e86:	10a4      	asrs	r4, r4, #2
 8002e88:	42a6      	cmp	r6, r4
 8002e8a:	d109      	bne.n	8002ea0 <__libc_init_array+0x24>
 8002e8c:	f000 fc9c 	bl	80037c8 <_init>
 8002e90:	2600      	movs	r6, #0
 8002e92:	4d0a      	ldr	r5, [pc, #40]	; (8002ebc <__libc_init_array+0x40>)
 8002e94:	4c0a      	ldr	r4, [pc, #40]	; (8002ec0 <__libc_init_array+0x44>)
 8002e96:	1b64      	subs	r4, r4, r5
 8002e98:	10a4      	asrs	r4, r4, #2
 8002e9a:	42a6      	cmp	r6, r4
 8002e9c:	d105      	bne.n	8002eaa <__libc_init_array+0x2e>
 8002e9e:	bd70      	pop	{r4, r5, r6, pc}
 8002ea0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ea4:	4798      	blx	r3
 8002ea6:	3601      	adds	r6, #1
 8002ea8:	e7ee      	b.n	8002e88 <__libc_init_array+0xc>
 8002eaa:	f855 3b04 	ldr.w	r3, [r5], #4
 8002eae:	4798      	blx	r3
 8002eb0:	3601      	adds	r6, #1
 8002eb2:	e7f2      	b.n	8002e9a <__libc_init_array+0x1e>
 8002eb4:	08003844 	.word	0x08003844
 8002eb8:	08003844 	.word	0x08003844
 8002ebc:	08003844 	.word	0x08003844
 8002ec0:	08003848 	.word	0x08003848

08002ec4 <memset>:
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	4402      	add	r2, r0
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d100      	bne.n	8002ece <memset+0xa>
 8002ecc:	4770      	bx	lr
 8002ece:	f803 1b01 	strb.w	r1, [r3], #1
 8002ed2:	e7f9      	b.n	8002ec8 <memset+0x4>

08002ed4 <siprintf>:
 8002ed4:	b40e      	push	{r1, r2, r3}
 8002ed6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002eda:	b500      	push	{lr}
 8002edc:	b09c      	sub	sp, #112	; 0x70
 8002ede:	ab1d      	add	r3, sp, #116	; 0x74
 8002ee0:	9002      	str	r0, [sp, #8]
 8002ee2:	9006      	str	r0, [sp, #24]
 8002ee4:	9107      	str	r1, [sp, #28]
 8002ee6:	9104      	str	r1, [sp, #16]
 8002ee8:	4808      	ldr	r0, [pc, #32]	; (8002f0c <siprintf+0x38>)
 8002eea:	4909      	ldr	r1, [pc, #36]	; (8002f10 <siprintf+0x3c>)
 8002eec:	f853 2b04 	ldr.w	r2, [r3], #4
 8002ef0:	9105      	str	r1, [sp, #20]
 8002ef2:	6800      	ldr	r0, [r0, #0]
 8002ef4:	a902      	add	r1, sp, #8
 8002ef6:	9301      	str	r3, [sp, #4]
 8002ef8:	f000 f868 	bl	8002fcc <_svfiprintf_r>
 8002efc:	2200      	movs	r2, #0
 8002efe:	9b02      	ldr	r3, [sp, #8]
 8002f00:	701a      	strb	r2, [r3, #0]
 8002f02:	b01c      	add	sp, #112	; 0x70
 8002f04:	f85d eb04 	ldr.w	lr, [sp], #4
 8002f08:	b003      	add	sp, #12
 8002f0a:	4770      	bx	lr
 8002f0c:	20000014 	.word	0x20000014
 8002f10:	ffff0208 	.word	0xffff0208

08002f14 <__ssputs_r>:
 8002f14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f18:	688e      	ldr	r6, [r1, #8]
 8002f1a:	4682      	mov	sl, r0
 8002f1c:	429e      	cmp	r6, r3
 8002f1e:	460c      	mov	r4, r1
 8002f20:	4690      	mov	r8, r2
 8002f22:	461f      	mov	r7, r3
 8002f24:	d838      	bhi.n	8002f98 <__ssputs_r+0x84>
 8002f26:	898a      	ldrh	r2, [r1, #12]
 8002f28:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002f2c:	d032      	beq.n	8002f94 <__ssputs_r+0x80>
 8002f2e:	6825      	ldr	r5, [r4, #0]
 8002f30:	6909      	ldr	r1, [r1, #16]
 8002f32:	3301      	adds	r3, #1
 8002f34:	eba5 0901 	sub.w	r9, r5, r1
 8002f38:	6965      	ldr	r5, [r4, #20]
 8002f3a:	444b      	add	r3, r9
 8002f3c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002f40:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002f44:	106d      	asrs	r5, r5, #1
 8002f46:	429d      	cmp	r5, r3
 8002f48:	bf38      	it	cc
 8002f4a:	461d      	movcc	r5, r3
 8002f4c:	0553      	lsls	r3, r2, #21
 8002f4e:	d531      	bpl.n	8002fb4 <__ssputs_r+0xa0>
 8002f50:	4629      	mov	r1, r5
 8002f52:	f000 fb6f 	bl	8003634 <_malloc_r>
 8002f56:	4606      	mov	r6, r0
 8002f58:	b950      	cbnz	r0, 8002f70 <__ssputs_r+0x5c>
 8002f5a:	230c      	movs	r3, #12
 8002f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f60:	f8ca 3000 	str.w	r3, [sl]
 8002f64:	89a3      	ldrh	r3, [r4, #12]
 8002f66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f6a:	81a3      	strh	r3, [r4, #12]
 8002f6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f70:	464a      	mov	r2, r9
 8002f72:	6921      	ldr	r1, [r4, #16]
 8002f74:	f000 face 	bl	8003514 <memcpy>
 8002f78:	89a3      	ldrh	r3, [r4, #12]
 8002f7a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002f7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f82:	81a3      	strh	r3, [r4, #12]
 8002f84:	6126      	str	r6, [r4, #16]
 8002f86:	444e      	add	r6, r9
 8002f88:	6026      	str	r6, [r4, #0]
 8002f8a:	463e      	mov	r6, r7
 8002f8c:	6165      	str	r5, [r4, #20]
 8002f8e:	eba5 0509 	sub.w	r5, r5, r9
 8002f92:	60a5      	str	r5, [r4, #8]
 8002f94:	42be      	cmp	r6, r7
 8002f96:	d900      	bls.n	8002f9a <__ssputs_r+0x86>
 8002f98:	463e      	mov	r6, r7
 8002f9a:	4632      	mov	r2, r6
 8002f9c:	4641      	mov	r1, r8
 8002f9e:	6820      	ldr	r0, [r4, #0]
 8002fa0:	f000 fac6 	bl	8003530 <memmove>
 8002fa4:	68a3      	ldr	r3, [r4, #8]
 8002fa6:	2000      	movs	r0, #0
 8002fa8:	1b9b      	subs	r3, r3, r6
 8002faa:	60a3      	str	r3, [r4, #8]
 8002fac:	6823      	ldr	r3, [r4, #0]
 8002fae:	4433      	add	r3, r6
 8002fb0:	6023      	str	r3, [r4, #0]
 8002fb2:	e7db      	b.n	8002f6c <__ssputs_r+0x58>
 8002fb4:	462a      	mov	r2, r5
 8002fb6:	f000 fbb1 	bl	800371c <_realloc_r>
 8002fba:	4606      	mov	r6, r0
 8002fbc:	2800      	cmp	r0, #0
 8002fbe:	d1e1      	bne.n	8002f84 <__ssputs_r+0x70>
 8002fc0:	4650      	mov	r0, sl
 8002fc2:	6921      	ldr	r1, [r4, #16]
 8002fc4:	f000 face 	bl	8003564 <_free_r>
 8002fc8:	e7c7      	b.n	8002f5a <__ssputs_r+0x46>
	...

08002fcc <_svfiprintf_r>:
 8002fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fd0:	4698      	mov	r8, r3
 8002fd2:	898b      	ldrh	r3, [r1, #12]
 8002fd4:	4607      	mov	r7, r0
 8002fd6:	061b      	lsls	r3, r3, #24
 8002fd8:	460d      	mov	r5, r1
 8002fda:	4614      	mov	r4, r2
 8002fdc:	b09d      	sub	sp, #116	; 0x74
 8002fde:	d50e      	bpl.n	8002ffe <_svfiprintf_r+0x32>
 8002fe0:	690b      	ldr	r3, [r1, #16]
 8002fe2:	b963      	cbnz	r3, 8002ffe <_svfiprintf_r+0x32>
 8002fe4:	2140      	movs	r1, #64	; 0x40
 8002fe6:	f000 fb25 	bl	8003634 <_malloc_r>
 8002fea:	6028      	str	r0, [r5, #0]
 8002fec:	6128      	str	r0, [r5, #16]
 8002fee:	b920      	cbnz	r0, 8002ffa <_svfiprintf_r+0x2e>
 8002ff0:	230c      	movs	r3, #12
 8002ff2:	603b      	str	r3, [r7, #0]
 8002ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ff8:	e0d1      	b.n	800319e <_svfiprintf_r+0x1d2>
 8002ffa:	2340      	movs	r3, #64	; 0x40
 8002ffc:	616b      	str	r3, [r5, #20]
 8002ffe:	2300      	movs	r3, #0
 8003000:	9309      	str	r3, [sp, #36]	; 0x24
 8003002:	2320      	movs	r3, #32
 8003004:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003008:	2330      	movs	r3, #48	; 0x30
 800300a:	f04f 0901 	mov.w	r9, #1
 800300e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003012:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80031b8 <_svfiprintf_r+0x1ec>
 8003016:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800301a:	4623      	mov	r3, r4
 800301c:	469a      	mov	sl, r3
 800301e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003022:	b10a      	cbz	r2, 8003028 <_svfiprintf_r+0x5c>
 8003024:	2a25      	cmp	r2, #37	; 0x25
 8003026:	d1f9      	bne.n	800301c <_svfiprintf_r+0x50>
 8003028:	ebba 0b04 	subs.w	fp, sl, r4
 800302c:	d00b      	beq.n	8003046 <_svfiprintf_r+0x7a>
 800302e:	465b      	mov	r3, fp
 8003030:	4622      	mov	r2, r4
 8003032:	4629      	mov	r1, r5
 8003034:	4638      	mov	r0, r7
 8003036:	f7ff ff6d 	bl	8002f14 <__ssputs_r>
 800303a:	3001      	adds	r0, #1
 800303c:	f000 80aa 	beq.w	8003194 <_svfiprintf_r+0x1c8>
 8003040:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003042:	445a      	add	r2, fp
 8003044:	9209      	str	r2, [sp, #36]	; 0x24
 8003046:	f89a 3000 	ldrb.w	r3, [sl]
 800304a:	2b00      	cmp	r3, #0
 800304c:	f000 80a2 	beq.w	8003194 <_svfiprintf_r+0x1c8>
 8003050:	2300      	movs	r3, #0
 8003052:	f04f 32ff 	mov.w	r2, #4294967295
 8003056:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800305a:	f10a 0a01 	add.w	sl, sl, #1
 800305e:	9304      	str	r3, [sp, #16]
 8003060:	9307      	str	r3, [sp, #28]
 8003062:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003066:	931a      	str	r3, [sp, #104]	; 0x68
 8003068:	4654      	mov	r4, sl
 800306a:	2205      	movs	r2, #5
 800306c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003070:	4851      	ldr	r0, [pc, #324]	; (80031b8 <_svfiprintf_r+0x1ec>)
 8003072:	f000 fa41 	bl	80034f8 <memchr>
 8003076:	9a04      	ldr	r2, [sp, #16]
 8003078:	b9d8      	cbnz	r0, 80030b2 <_svfiprintf_r+0xe6>
 800307a:	06d0      	lsls	r0, r2, #27
 800307c:	bf44      	itt	mi
 800307e:	2320      	movmi	r3, #32
 8003080:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003084:	0711      	lsls	r1, r2, #28
 8003086:	bf44      	itt	mi
 8003088:	232b      	movmi	r3, #43	; 0x2b
 800308a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800308e:	f89a 3000 	ldrb.w	r3, [sl]
 8003092:	2b2a      	cmp	r3, #42	; 0x2a
 8003094:	d015      	beq.n	80030c2 <_svfiprintf_r+0xf6>
 8003096:	4654      	mov	r4, sl
 8003098:	2000      	movs	r0, #0
 800309a:	f04f 0c0a 	mov.w	ip, #10
 800309e:	9a07      	ldr	r2, [sp, #28]
 80030a0:	4621      	mov	r1, r4
 80030a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80030a6:	3b30      	subs	r3, #48	; 0x30
 80030a8:	2b09      	cmp	r3, #9
 80030aa:	d94e      	bls.n	800314a <_svfiprintf_r+0x17e>
 80030ac:	b1b0      	cbz	r0, 80030dc <_svfiprintf_r+0x110>
 80030ae:	9207      	str	r2, [sp, #28]
 80030b0:	e014      	b.n	80030dc <_svfiprintf_r+0x110>
 80030b2:	eba0 0308 	sub.w	r3, r0, r8
 80030b6:	fa09 f303 	lsl.w	r3, r9, r3
 80030ba:	4313      	orrs	r3, r2
 80030bc:	46a2      	mov	sl, r4
 80030be:	9304      	str	r3, [sp, #16]
 80030c0:	e7d2      	b.n	8003068 <_svfiprintf_r+0x9c>
 80030c2:	9b03      	ldr	r3, [sp, #12]
 80030c4:	1d19      	adds	r1, r3, #4
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	9103      	str	r1, [sp, #12]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	bfbb      	ittet	lt
 80030ce:	425b      	neglt	r3, r3
 80030d0:	f042 0202 	orrlt.w	r2, r2, #2
 80030d4:	9307      	strge	r3, [sp, #28]
 80030d6:	9307      	strlt	r3, [sp, #28]
 80030d8:	bfb8      	it	lt
 80030da:	9204      	strlt	r2, [sp, #16]
 80030dc:	7823      	ldrb	r3, [r4, #0]
 80030de:	2b2e      	cmp	r3, #46	; 0x2e
 80030e0:	d10c      	bne.n	80030fc <_svfiprintf_r+0x130>
 80030e2:	7863      	ldrb	r3, [r4, #1]
 80030e4:	2b2a      	cmp	r3, #42	; 0x2a
 80030e6:	d135      	bne.n	8003154 <_svfiprintf_r+0x188>
 80030e8:	9b03      	ldr	r3, [sp, #12]
 80030ea:	3402      	adds	r4, #2
 80030ec:	1d1a      	adds	r2, r3, #4
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	9203      	str	r2, [sp, #12]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	bfb8      	it	lt
 80030f6:	f04f 33ff 	movlt.w	r3, #4294967295
 80030fa:	9305      	str	r3, [sp, #20]
 80030fc:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80031bc <_svfiprintf_r+0x1f0>
 8003100:	2203      	movs	r2, #3
 8003102:	4650      	mov	r0, sl
 8003104:	7821      	ldrb	r1, [r4, #0]
 8003106:	f000 f9f7 	bl	80034f8 <memchr>
 800310a:	b140      	cbz	r0, 800311e <_svfiprintf_r+0x152>
 800310c:	2340      	movs	r3, #64	; 0x40
 800310e:	eba0 000a 	sub.w	r0, r0, sl
 8003112:	fa03 f000 	lsl.w	r0, r3, r0
 8003116:	9b04      	ldr	r3, [sp, #16]
 8003118:	3401      	adds	r4, #1
 800311a:	4303      	orrs	r3, r0
 800311c:	9304      	str	r3, [sp, #16]
 800311e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003122:	2206      	movs	r2, #6
 8003124:	4826      	ldr	r0, [pc, #152]	; (80031c0 <_svfiprintf_r+0x1f4>)
 8003126:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800312a:	f000 f9e5 	bl	80034f8 <memchr>
 800312e:	2800      	cmp	r0, #0
 8003130:	d038      	beq.n	80031a4 <_svfiprintf_r+0x1d8>
 8003132:	4b24      	ldr	r3, [pc, #144]	; (80031c4 <_svfiprintf_r+0x1f8>)
 8003134:	bb1b      	cbnz	r3, 800317e <_svfiprintf_r+0x1b2>
 8003136:	9b03      	ldr	r3, [sp, #12]
 8003138:	3307      	adds	r3, #7
 800313a:	f023 0307 	bic.w	r3, r3, #7
 800313e:	3308      	adds	r3, #8
 8003140:	9303      	str	r3, [sp, #12]
 8003142:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003144:	4433      	add	r3, r6
 8003146:	9309      	str	r3, [sp, #36]	; 0x24
 8003148:	e767      	b.n	800301a <_svfiprintf_r+0x4e>
 800314a:	460c      	mov	r4, r1
 800314c:	2001      	movs	r0, #1
 800314e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003152:	e7a5      	b.n	80030a0 <_svfiprintf_r+0xd4>
 8003154:	2300      	movs	r3, #0
 8003156:	f04f 0c0a 	mov.w	ip, #10
 800315a:	4619      	mov	r1, r3
 800315c:	3401      	adds	r4, #1
 800315e:	9305      	str	r3, [sp, #20]
 8003160:	4620      	mov	r0, r4
 8003162:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003166:	3a30      	subs	r2, #48	; 0x30
 8003168:	2a09      	cmp	r2, #9
 800316a:	d903      	bls.n	8003174 <_svfiprintf_r+0x1a8>
 800316c:	2b00      	cmp	r3, #0
 800316e:	d0c5      	beq.n	80030fc <_svfiprintf_r+0x130>
 8003170:	9105      	str	r1, [sp, #20]
 8003172:	e7c3      	b.n	80030fc <_svfiprintf_r+0x130>
 8003174:	4604      	mov	r4, r0
 8003176:	2301      	movs	r3, #1
 8003178:	fb0c 2101 	mla	r1, ip, r1, r2
 800317c:	e7f0      	b.n	8003160 <_svfiprintf_r+0x194>
 800317e:	ab03      	add	r3, sp, #12
 8003180:	9300      	str	r3, [sp, #0]
 8003182:	462a      	mov	r2, r5
 8003184:	4638      	mov	r0, r7
 8003186:	4b10      	ldr	r3, [pc, #64]	; (80031c8 <_svfiprintf_r+0x1fc>)
 8003188:	a904      	add	r1, sp, #16
 800318a:	f3af 8000 	nop.w
 800318e:	1c42      	adds	r2, r0, #1
 8003190:	4606      	mov	r6, r0
 8003192:	d1d6      	bne.n	8003142 <_svfiprintf_r+0x176>
 8003194:	89ab      	ldrh	r3, [r5, #12]
 8003196:	065b      	lsls	r3, r3, #25
 8003198:	f53f af2c 	bmi.w	8002ff4 <_svfiprintf_r+0x28>
 800319c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800319e:	b01d      	add	sp, #116	; 0x74
 80031a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031a4:	ab03      	add	r3, sp, #12
 80031a6:	9300      	str	r3, [sp, #0]
 80031a8:	462a      	mov	r2, r5
 80031aa:	4638      	mov	r0, r7
 80031ac:	4b06      	ldr	r3, [pc, #24]	; (80031c8 <_svfiprintf_r+0x1fc>)
 80031ae:	a904      	add	r1, sp, #16
 80031b0:	f000 f87c 	bl	80032ac <_printf_i>
 80031b4:	e7eb      	b.n	800318e <_svfiprintf_r+0x1c2>
 80031b6:	bf00      	nop
 80031b8:	08003810 	.word	0x08003810
 80031bc:	08003816 	.word	0x08003816
 80031c0:	0800381a 	.word	0x0800381a
 80031c4:	00000000 	.word	0x00000000
 80031c8:	08002f15 	.word	0x08002f15

080031cc <_printf_common>:
 80031cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80031d0:	4616      	mov	r6, r2
 80031d2:	4699      	mov	r9, r3
 80031d4:	688a      	ldr	r2, [r1, #8]
 80031d6:	690b      	ldr	r3, [r1, #16]
 80031d8:	4607      	mov	r7, r0
 80031da:	4293      	cmp	r3, r2
 80031dc:	bfb8      	it	lt
 80031de:	4613      	movlt	r3, r2
 80031e0:	6033      	str	r3, [r6, #0]
 80031e2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80031e6:	460c      	mov	r4, r1
 80031e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80031ec:	b10a      	cbz	r2, 80031f2 <_printf_common+0x26>
 80031ee:	3301      	adds	r3, #1
 80031f0:	6033      	str	r3, [r6, #0]
 80031f2:	6823      	ldr	r3, [r4, #0]
 80031f4:	0699      	lsls	r1, r3, #26
 80031f6:	bf42      	ittt	mi
 80031f8:	6833      	ldrmi	r3, [r6, #0]
 80031fa:	3302      	addmi	r3, #2
 80031fc:	6033      	strmi	r3, [r6, #0]
 80031fe:	6825      	ldr	r5, [r4, #0]
 8003200:	f015 0506 	ands.w	r5, r5, #6
 8003204:	d106      	bne.n	8003214 <_printf_common+0x48>
 8003206:	f104 0a19 	add.w	sl, r4, #25
 800320a:	68e3      	ldr	r3, [r4, #12]
 800320c:	6832      	ldr	r2, [r6, #0]
 800320e:	1a9b      	subs	r3, r3, r2
 8003210:	42ab      	cmp	r3, r5
 8003212:	dc28      	bgt.n	8003266 <_printf_common+0x9a>
 8003214:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003218:	1e13      	subs	r3, r2, #0
 800321a:	6822      	ldr	r2, [r4, #0]
 800321c:	bf18      	it	ne
 800321e:	2301      	movne	r3, #1
 8003220:	0692      	lsls	r2, r2, #26
 8003222:	d42d      	bmi.n	8003280 <_printf_common+0xb4>
 8003224:	4649      	mov	r1, r9
 8003226:	4638      	mov	r0, r7
 8003228:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800322c:	47c0      	blx	r8
 800322e:	3001      	adds	r0, #1
 8003230:	d020      	beq.n	8003274 <_printf_common+0xa8>
 8003232:	6823      	ldr	r3, [r4, #0]
 8003234:	68e5      	ldr	r5, [r4, #12]
 8003236:	f003 0306 	and.w	r3, r3, #6
 800323a:	2b04      	cmp	r3, #4
 800323c:	bf18      	it	ne
 800323e:	2500      	movne	r5, #0
 8003240:	6832      	ldr	r2, [r6, #0]
 8003242:	f04f 0600 	mov.w	r6, #0
 8003246:	68a3      	ldr	r3, [r4, #8]
 8003248:	bf08      	it	eq
 800324a:	1aad      	subeq	r5, r5, r2
 800324c:	6922      	ldr	r2, [r4, #16]
 800324e:	bf08      	it	eq
 8003250:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003254:	4293      	cmp	r3, r2
 8003256:	bfc4      	itt	gt
 8003258:	1a9b      	subgt	r3, r3, r2
 800325a:	18ed      	addgt	r5, r5, r3
 800325c:	341a      	adds	r4, #26
 800325e:	42b5      	cmp	r5, r6
 8003260:	d11a      	bne.n	8003298 <_printf_common+0xcc>
 8003262:	2000      	movs	r0, #0
 8003264:	e008      	b.n	8003278 <_printf_common+0xac>
 8003266:	2301      	movs	r3, #1
 8003268:	4652      	mov	r2, sl
 800326a:	4649      	mov	r1, r9
 800326c:	4638      	mov	r0, r7
 800326e:	47c0      	blx	r8
 8003270:	3001      	adds	r0, #1
 8003272:	d103      	bne.n	800327c <_printf_common+0xb0>
 8003274:	f04f 30ff 	mov.w	r0, #4294967295
 8003278:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800327c:	3501      	adds	r5, #1
 800327e:	e7c4      	b.n	800320a <_printf_common+0x3e>
 8003280:	2030      	movs	r0, #48	; 0x30
 8003282:	18e1      	adds	r1, r4, r3
 8003284:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003288:	1c5a      	adds	r2, r3, #1
 800328a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800328e:	4422      	add	r2, r4
 8003290:	3302      	adds	r3, #2
 8003292:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003296:	e7c5      	b.n	8003224 <_printf_common+0x58>
 8003298:	2301      	movs	r3, #1
 800329a:	4622      	mov	r2, r4
 800329c:	4649      	mov	r1, r9
 800329e:	4638      	mov	r0, r7
 80032a0:	47c0      	blx	r8
 80032a2:	3001      	adds	r0, #1
 80032a4:	d0e6      	beq.n	8003274 <_printf_common+0xa8>
 80032a6:	3601      	adds	r6, #1
 80032a8:	e7d9      	b.n	800325e <_printf_common+0x92>
	...

080032ac <_printf_i>:
 80032ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80032b0:	7e0f      	ldrb	r7, [r1, #24]
 80032b2:	4691      	mov	r9, r2
 80032b4:	2f78      	cmp	r7, #120	; 0x78
 80032b6:	4680      	mov	r8, r0
 80032b8:	460c      	mov	r4, r1
 80032ba:	469a      	mov	sl, r3
 80032bc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80032be:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80032c2:	d807      	bhi.n	80032d4 <_printf_i+0x28>
 80032c4:	2f62      	cmp	r7, #98	; 0x62
 80032c6:	d80a      	bhi.n	80032de <_printf_i+0x32>
 80032c8:	2f00      	cmp	r7, #0
 80032ca:	f000 80d9 	beq.w	8003480 <_printf_i+0x1d4>
 80032ce:	2f58      	cmp	r7, #88	; 0x58
 80032d0:	f000 80a4 	beq.w	800341c <_printf_i+0x170>
 80032d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80032d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80032dc:	e03a      	b.n	8003354 <_printf_i+0xa8>
 80032de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80032e2:	2b15      	cmp	r3, #21
 80032e4:	d8f6      	bhi.n	80032d4 <_printf_i+0x28>
 80032e6:	a101      	add	r1, pc, #4	; (adr r1, 80032ec <_printf_i+0x40>)
 80032e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80032ec:	08003345 	.word	0x08003345
 80032f0:	08003359 	.word	0x08003359
 80032f4:	080032d5 	.word	0x080032d5
 80032f8:	080032d5 	.word	0x080032d5
 80032fc:	080032d5 	.word	0x080032d5
 8003300:	080032d5 	.word	0x080032d5
 8003304:	08003359 	.word	0x08003359
 8003308:	080032d5 	.word	0x080032d5
 800330c:	080032d5 	.word	0x080032d5
 8003310:	080032d5 	.word	0x080032d5
 8003314:	080032d5 	.word	0x080032d5
 8003318:	08003467 	.word	0x08003467
 800331c:	08003389 	.word	0x08003389
 8003320:	08003449 	.word	0x08003449
 8003324:	080032d5 	.word	0x080032d5
 8003328:	080032d5 	.word	0x080032d5
 800332c:	08003489 	.word	0x08003489
 8003330:	080032d5 	.word	0x080032d5
 8003334:	08003389 	.word	0x08003389
 8003338:	080032d5 	.word	0x080032d5
 800333c:	080032d5 	.word	0x080032d5
 8003340:	08003451 	.word	0x08003451
 8003344:	682b      	ldr	r3, [r5, #0]
 8003346:	1d1a      	adds	r2, r3, #4
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	602a      	str	r2, [r5, #0]
 800334c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003350:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003354:	2301      	movs	r3, #1
 8003356:	e0a4      	b.n	80034a2 <_printf_i+0x1f6>
 8003358:	6820      	ldr	r0, [r4, #0]
 800335a:	6829      	ldr	r1, [r5, #0]
 800335c:	0606      	lsls	r6, r0, #24
 800335e:	f101 0304 	add.w	r3, r1, #4
 8003362:	d50a      	bpl.n	800337a <_printf_i+0xce>
 8003364:	680e      	ldr	r6, [r1, #0]
 8003366:	602b      	str	r3, [r5, #0]
 8003368:	2e00      	cmp	r6, #0
 800336a:	da03      	bge.n	8003374 <_printf_i+0xc8>
 800336c:	232d      	movs	r3, #45	; 0x2d
 800336e:	4276      	negs	r6, r6
 8003370:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003374:	230a      	movs	r3, #10
 8003376:	485e      	ldr	r0, [pc, #376]	; (80034f0 <_printf_i+0x244>)
 8003378:	e019      	b.n	80033ae <_printf_i+0x102>
 800337a:	680e      	ldr	r6, [r1, #0]
 800337c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003380:	602b      	str	r3, [r5, #0]
 8003382:	bf18      	it	ne
 8003384:	b236      	sxthne	r6, r6
 8003386:	e7ef      	b.n	8003368 <_printf_i+0xbc>
 8003388:	682b      	ldr	r3, [r5, #0]
 800338a:	6820      	ldr	r0, [r4, #0]
 800338c:	1d19      	adds	r1, r3, #4
 800338e:	6029      	str	r1, [r5, #0]
 8003390:	0601      	lsls	r1, r0, #24
 8003392:	d501      	bpl.n	8003398 <_printf_i+0xec>
 8003394:	681e      	ldr	r6, [r3, #0]
 8003396:	e002      	b.n	800339e <_printf_i+0xf2>
 8003398:	0646      	lsls	r6, r0, #25
 800339a:	d5fb      	bpl.n	8003394 <_printf_i+0xe8>
 800339c:	881e      	ldrh	r6, [r3, #0]
 800339e:	2f6f      	cmp	r7, #111	; 0x6f
 80033a0:	bf0c      	ite	eq
 80033a2:	2308      	moveq	r3, #8
 80033a4:	230a      	movne	r3, #10
 80033a6:	4852      	ldr	r0, [pc, #328]	; (80034f0 <_printf_i+0x244>)
 80033a8:	2100      	movs	r1, #0
 80033aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80033ae:	6865      	ldr	r5, [r4, #4]
 80033b0:	2d00      	cmp	r5, #0
 80033b2:	bfa8      	it	ge
 80033b4:	6821      	ldrge	r1, [r4, #0]
 80033b6:	60a5      	str	r5, [r4, #8]
 80033b8:	bfa4      	itt	ge
 80033ba:	f021 0104 	bicge.w	r1, r1, #4
 80033be:	6021      	strge	r1, [r4, #0]
 80033c0:	b90e      	cbnz	r6, 80033c6 <_printf_i+0x11a>
 80033c2:	2d00      	cmp	r5, #0
 80033c4:	d04d      	beq.n	8003462 <_printf_i+0x1b6>
 80033c6:	4615      	mov	r5, r2
 80033c8:	fbb6 f1f3 	udiv	r1, r6, r3
 80033cc:	fb03 6711 	mls	r7, r3, r1, r6
 80033d0:	5dc7      	ldrb	r7, [r0, r7]
 80033d2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80033d6:	4637      	mov	r7, r6
 80033d8:	42bb      	cmp	r3, r7
 80033da:	460e      	mov	r6, r1
 80033dc:	d9f4      	bls.n	80033c8 <_printf_i+0x11c>
 80033de:	2b08      	cmp	r3, #8
 80033e0:	d10b      	bne.n	80033fa <_printf_i+0x14e>
 80033e2:	6823      	ldr	r3, [r4, #0]
 80033e4:	07de      	lsls	r6, r3, #31
 80033e6:	d508      	bpl.n	80033fa <_printf_i+0x14e>
 80033e8:	6923      	ldr	r3, [r4, #16]
 80033ea:	6861      	ldr	r1, [r4, #4]
 80033ec:	4299      	cmp	r1, r3
 80033ee:	bfde      	ittt	le
 80033f0:	2330      	movle	r3, #48	; 0x30
 80033f2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80033f6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80033fa:	1b52      	subs	r2, r2, r5
 80033fc:	6122      	str	r2, [r4, #16]
 80033fe:	464b      	mov	r3, r9
 8003400:	4621      	mov	r1, r4
 8003402:	4640      	mov	r0, r8
 8003404:	f8cd a000 	str.w	sl, [sp]
 8003408:	aa03      	add	r2, sp, #12
 800340a:	f7ff fedf 	bl	80031cc <_printf_common>
 800340e:	3001      	adds	r0, #1
 8003410:	d14c      	bne.n	80034ac <_printf_i+0x200>
 8003412:	f04f 30ff 	mov.w	r0, #4294967295
 8003416:	b004      	add	sp, #16
 8003418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800341c:	4834      	ldr	r0, [pc, #208]	; (80034f0 <_printf_i+0x244>)
 800341e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003422:	6829      	ldr	r1, [r5, #0]
 8003424:	6823      	ldr	r3, [r4, #0]
 8003426:	f851 6b04 	ldr.w	r6, [r1], #4
 800342a:	6029      	str	r1, [r5, #0]
 800342c:	061d      	lsls	r5, r3, #24
 800342e:	d514      	bpl.n	800345a <_printf_i+0x1ae>
 8003430:	07df      	lsls	r7, r3, #31
 8003432:	bf44      	itt	mi
 8003434:	f043 0320 	orrmi.w	r3, r3, #32
 8003438:	6023      	strmi	r3, [r4, #0]
 800343a:	b91e      	cbnz	r6, 8003444 <_printf_i+0x198>
 800343c:	6823      	ldr	r3, [r4, #0]
 800343e:	f023 0320 	bic.w	r3, r3, #32
 8003442:	6023      	str	r3, [r4, #0]
 8003444:	2310      	movs	r3, #16
 8003446:	e7af      	b.n	80033a8 <_printf_i+0xfc>
 8003448:	6823      	ldr	r3, [r4, #0]
 800344a:	f043 0320 	orr.w	r3, r3, #32
 800344e:	6023      	str	r3, [r4, #0]
 8003450:	2378      	movs	r3, #120	; 0x78
 8003452:	4828      	ldr	r0, [pc, #160]	; (80034f4 <_printf_i+0x248>)
 8003454:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003458:	e7e3      	b.n	8003422 <_printf_i+0x176>
 800345a:	0659      	lsls	r1, r3, #25
 800345c:	bf48      	it	mi
 800345e:	b2b6      	uxthmi	r6, r6
 8003460:	e7e6      	b.n	8003430 <_printf_i+0x184>
 8003462:	4615      	mov	r5, r2
 8003464:	e7bb      	b.n	80033de <_printf_i+0x132>
 8003466:	682b      	ldr	r3, [r5, #0]
 8003468:	6826      	ldr	r6, [r4, #0]
 800346a:	1d18      	adds	r0, r3, #4
 800346c:	6961      	ldr	r1, [r4, #20]
 800346e:	6028      	str	r0, [r5, #0]
 8003470:	0635      	lsls	r5, r6, #24
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	d501      	bpl.n	800347a <_printf_i+0x1ce>
 8003476:	6019      	str	r1, [r3, #0]
 8003478:	e002      	b.n	8003480 <_printf_i+0x1d4>
 800347a:	0670      	lsls	r0, r6, #25
 800347c:	d5fb      	bpl.n	8003476 <_printf_i+0x1ca>
 800347e:	8019      	strh	r1, [r3, #0]
 8003480:	2300      	movs	r3, #0
 8003482:	4615      	mov	r5, r2
 8003484:	6123      	str	r3, [r4, #16]
 8003486:	e7ba      	b.n	80033fe <_printf_i+0x152>
 8003488:	682b      	ldr	r3, [r5, #0]
 800348a:	2100      	movs	r1, #0
 800348c:	1d1a      	adds	r2, r3, #4
 800348e:	602a      	str	r2, [r5, #0]
 8003490:	681d      	ldr	r5, [r3, #0]
 8003492:	6862      	ldr	r2, [r4, #4]
 8003494:	4628      	mov	r0, r5
 8003496:	f000 f82f 	bl	80034f8 <memchr>
 800349a:	b108      	cbz	r0, 80034a0 <_printf_i+0x1f4>
 800349c:	1b40      	subs	r0, r0, r5
 800349e:	6060      	str	r0, [r4, #4]
 80034a0:	6863      	ldr	r3, [r4, #4]
 80034a2:	6123      	str	r3, [r4, #16]
 80034a4:	2300      	movs	r3, #0
 80034a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80034aa:	e7a8      	b.n	80033fe <_printf_i+0x152>
 80034ac:	462a      	mov	r2, r5
 80034ae:	4649      	mov	r1, r9
 80034b0:	4640      	mov	r0, r8
 80034b2:	6923      	ldr	r3, [r4, #16]
 80034b4:	47d0      	blx	sl
 80034b6:	3001      	adds	r0, #1
 80034b8:	d0ab      	beq.n	8003412 <_printf_i+0x166>
 80034ba:	6823      	ldr	r3, [r4, #0]
 80034bc:	079b      	lsls	r3, r3, #30
 80034be:	d413      	bmi.n	80034e8 <_printf_i+0x23c>
 80034c0:	68e0      	ldr	r0, [r4, #12]
 80034c2:	9b03      	ldr	r3, [sp, #12]
 80034c4:	4298      	cmp	r0, r3
 80034c6:	bfb8      	it	lt
 80034c8:	4618      	movlt	r0, r3
 80034ca:	e7a4      	b.n	8003416 <_printf_i+0x16a>
 80034cc:	2301      	movs	r3, #1
 80034ce:	4632      	mov	r2, r6
 80034d0:	4649      	mov	r1, r9
 80034d2:	4640      	mov	r0, r8
 80034d4:	47d0      	blx	sl
 80034d6:	3001      	adds	r0, #1
 80034d8:	d09b      	beq.n	8003412 <_printf_i+0x166>
 80034da:	3501      	adds	r5, #1
 80034dc:	68e3      	ldr	r3, [r4, #12]
 80034de:	9903      	ldr	r1, [sp, #12]
 80034e0:	1a5b      	subs	r3, r3, r1
 80034e2:	42ab      	cmp	r3, r5
 80034e4:	dcf2      	bgt.n	80034cc <_printf_i+0x220>
 80034e6:	e7eb      	b.n	80034c0 <_printf_i+0x214>
 80034e8:	2500      	movs	r5, #0
 80034ea:	f104 0619 	add.w	r6, r4, #25
 80034ee:	e7f5      	b.n	80034dc <_printf_i+0x230>
 80034f0:	08003821 	.word	0x08003821
 80034f4:	08003832 	.word	0x08003832

080034f8 <memchr>:
 80034f8:	4603      	mov	r3, r0
 80034fa:	b510      	push	{r4, lr}
 80034fc:	b2c9      	uxtb	r1, r1
 80034fe:	4402      	add	r2, r0
 8003500:	4293      	cmp	r3, r2
 8003502:	4618      	mov	r0, r3
 8003504:	d101      	bne.n	800350a <memchr+0x12>
 8003506:	2000      	movs	r0, #0
 8003508:	e003      	b.n	8003512 <memchr+0x1a>
 800350a:	7804      	ldrb	r4, [r0, #0]
 800350c:	3301      	adds	r3, #1
 800350e:	428c      	cmp	r4, r1
 8003510:	d1f6      	bne.n	8003500 <memchr+0x8>
 8003512:	bd10      	pop	{r4, pc}

08003514 <memcpy>:
 8003514:	440a      	add	r2, r1
 8003516:	4291      	cmp	r1, r2
 8003518:	f100 33ff 	add.w	r3, r0, #4294967295
 800351c:	d100      	bne.n	8003520 <memcpy+0xc>
 800351e:	4770      	bx	lr
 8003520:	b510      	push	{r4, lr}
 8003522:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003526:	4291      	cmp	r1, r2
 8003528:	f803 4f01 	strb.w	r4, [r3, #1]!
 800352c:	d1f9      	bne.n	8003522 <memcpy+0xe>
 800352e:	bd10      	pop	{r4, pc}

08003530 <memmove>:
 8003530:	4288      	cmp	r0, r1
 8003532:	b510      	push	{r4, lr}
 8003534:	eb01 0402 	add.w	r4, r1, r2
 8003538:	d902      	bls.n	8003540 <memmove+0x10>
 800353a:	4284      	cmp	r4, r0
 800353c:	4623      	mov	r3, r4
 800353e:	d807      	bhi.n	8003550 <memmove+0x20>
 8003540:	1e43      	subs	r3, r0, #1
 8003542:	42a1      	cmp	r1, r4
 8003544:	d008      	beq.n	8003558 <memmove+0x28>
 8003546:	f811 2b01 	ldrb.w	r2, [r1], #1
 800354a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800354e:	e7f8      	b.n	8003542 <memmove+0x12>
 8003550:	4601      	mov	r1, r0
 8003552:	4402      	add	r2, r0
 8003554:	428a      	cmp	r2, r1
 8003556:	d100      	bne.n	800355a <memmove+0x2a>
 8003558:	bd10      	pop	{r4, pc}
 800355a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800355e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003562:	e7f7      	b.n	8003554 <memmove+0x24>

08003564 <_free_r>:
 8003564:	b538      	push	{r3, r4, r5, lr}
 8003566:	4605      	mov	r5, r0
 8003568:	2900      	cmp	r1, #0
 800356a:	d040      	beq.n	80035ee <_free_r+0x8a>
 800356c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003570:	1f0c      	subs	r4, r1, #4
 8003572:	2b00      	cmp	r3, #0
 8003574:	bfb8      	it	lt
 8003576:	18e4      	addlt	r4, r4, r3
 8003578:	f000 f910 	bl	800379c <__malloc_lock>
 800357c:	4a1c      	ldr	r2, [pc, #112]	; (80035f0 <_free_r+0x8c>)
 800357e:	6813      	ldr	r3, [r2, #0]
 8003580:	b933      	cbnz	r3, 8003590 <_free_r+0x2c>
 8003582:	6063      	str	r3, [r4, #4]
 8003584:	6014      	str	r4, [r2, #0]
 8003586:	4628      	mov	r0, r5
 8003588:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800358c:	f000 b90c 	b.w	80037a8 <__malloc_unlock>
 8003590:	42a3      	cmp	r3, r4
 8003592:	d908      	bls.n	80035a6 <_free_r+0x42>
 8003594:	6820      	ldr	r0, [r4, #0]
 8003596:	1821      	adds	r1, r4, r0
 8003598:	428b      	cmp	r3, r1
 800359a:	bf01      	itttt	eq
 800359c:	6819      	ldreq	r1, [r3, #0]
 800359e:	685b      	ldreq	r3, [r3, #4]
 80035a0:	1809      	addeq	r1, r1, r0
 80035a2:	6021      	streq	r1, [r4, #0]
 80035a4:	e7ed      	b.n	8003582 <_free_r+0x1e>
 80035a6:	461a      	mov	r2, r3
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	b10b      	cbz	r3, 80035b0 <_free_r+0x4c>
 80035ac:	42a3      	cmp	r3, r4
 80035ae:	d9fa      	bls.n	80035a6 <_free_r+0x42>
 80035b0:	6811      	ldr	r1, [r2, #0]
 80035b2:	1850      	adds	r0, r2, r1
 80035b4:	42a0      	cmp	r0, r4
 80035b6:	d10b      	bne.n	80035d0 <_free_r+0x6c>
 80035b8:	6820      	ldr	r0, [r4, #0]
 80035ba:	4401      	add	r1, r0
 80035bc:	1850      	adds	r0, r2, r1
 80035be:	4283      	cmp	r3, r0
 80035c0:	6011      	str	r1, [r2, #0]
 80035c2:	d1e0      	bne.n	8003586 <_free_r+0x22>
 80035c4:	6818      	ldr	r0, [r3, #0]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	4401      	add	r1, r0
 80035ca:	6011      	str	r1, [r2, #0]
 80035cc:	6053      	str	r3, [r2, #4]
 80035ce:	e7da      	b.n	8003586 <_free_r+0x22>
 80035d0:	d902      	bls.n	80035d8 <_free_r+0x74>
 80035d2:	230c      	movs	r3, #12
 80035d4:	602b      	str	r3, [r5, #0]
 80035d6:	e7d6      	b.n	8003586 <_free_r+0x22>
 80035d8:	6820      	ldr	r0, [r4, #0]
 80035da:	1821      	adds	r1, r4, r0
 80035dc:	428b      	cmp	r3, r1
 80035de:	bf01      	itttt	eq
 80035e0:	6819      	ldreq	r1, [r3, #0]
 80035e2:	685b      	ldreq	r3, [r3, #4]
 80035e4:	1809      	addeq	r1, r1, r0
 80035e6:	6021      	streq	r1, [r4, #0]
 80035e8:	6063      	str	r3, [r4, #4]
 80035ea:	6054      	str	r4, [r2, #4]
 80035ec:	e7cb      	b.n	8003586 <_free_r+0x22>
 80035ee:	bd38      	pop	{r3, r4, r5, pc}
 80035f0:	20000270 	.word	0x20000270

080035f4 <sbrk_aligned>:
 80035f4:	b570      	push	{r4, r5, r6, lr}
 80035f6:	4e0e      	ldr	r6, [pc, #56]	; (8003630 <sbrk_aligned+0x3c>)
 80035f8:	460c      	mov	r4, r1
 80035fa:	6831      	ldr	r1, [r6, #0]
 80035fc:	4605      	mov	r5, r0
 80035fe:	b911      	cbnz	r1, 8003606 <sbrk_aligned+0x12>
 8003600:	f000 f8bc 	bl	800377c <_sbrk_r>
 8003604:	6030      	str	r0, [r6, #0]
 8003606:	4621      	mov	r1, r4
 8003608:	4628      	mov	r0, r5
 800360a:	f000 f8b7 	bl	800377c <_sbrk_r>
 800360e:	1c43      	adds	r3, r0, #1
 8003610:	d00a      	beq.n	8003628 <sbrk_aligned+0x34>
 8003612:	1cc4      	adds	r4, r0, #3
 8003614:	f024 0403 	bic.w	r4, r4, #3
 8003618:	42a0      	cmp	r0, r4
 800361a:	d007      	beq.n	800362c <sbrk_aligned+0x38>
 800361c:	1a21      	subs	r1, r4, r0
 800361e:	4628      	mov	r0, r5
 8003620:	f000 f8ac 	bl	800377c <_sbrk_r>
 8003624:	3001      	adds	r0, #1
 8003626:	d101      	bne.n	800362c <sbrk_aligned+0x38>
 8003628:	f04f 34ff 	mov.w	r4, #4294967295
 800362c:	4620      	mov	r0, r4
 800362e:	bd70      	pop	{r4, r5, r6, pc}
 8003630:	20000274 	.word	0x20000274

08003634 <_malloc_r>:
 8003634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003638:	1ccd      	adds	r5, r1, #3
 800363a:	f025 0503 	bic.w	r5, r5, #3
 800363e:	3508      	adds	r5, #8
 8003640:	2d0c      	cmp	r5, #12
 8003642:	bf38      	it	cc
 8003644:	250c      	movcc	r5, #12
 8003646:	2d00      	cmp	r5, #0
 8003648:	4607      	mov	r7, r0
 800364a:	db01      	blt.n	8003650 <_malloc_r+0x1c>
 800364c:	42a9      	cmp	r1, r5
 800364e:	d905      	bls.n	800365c <_malloc_r+0x28>
 8003650:	230c      	movs	r3, #12
 8003652:	2600      	movs	r6, #0
 8003654:	603b      	str	r3, [r7, #0]
 8003656:	4630      	mov	r0, r6
 8003658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800365c:	4e2e      	ldr	r6, [pc, #184]	; (8003718 <_malloc_r+0xe4>)
 800365e:	f000 f89d 	bl	800379c <__malloc_lock>
 8003662:	6833      	ldr	r3, [r6, #0]
 8003664:	461c      	mov	r4, r3
 8003666:	bb34      	cbnz	r4, 80036b6 <_malloc_r+0x82>
 8003668:	4629      	mov	r1, r5
 800366a:	4638      	mov	r0, r7
 800366c:	f7ff ffc2 	bl	80035f4 <sbrk_aligned>
 8003670:	1c43      	adds	r3, r0, #1
 8003672:	4604      	mov	r4, r0
 8003674:	d14d      	bne.n	8003712 <_malloc_r+0xde>
 8003676:	6834      	ldr	r4, [r6, #0]
 8003678:	4626      	mov	r6, r4
 800367a:	2e00      	cmp	r6, #0
 800367c:	d140      	bne.n	8003700 <_malloc_r+0xcc>
 800367e:	6823      	ldr	r3, [r4, #0]
 8003680:	4631      	mov	r1, r6
 8003682:	4638      	mov	r0, r7
 8003684:	eb04 0803 	add.w	r8, r4, r3
 8003688:	f000 f878 	bl	800377c <_sbrk_r>
 800368c:	4580      	cmp	r8, r0
 800368e:	d13a      	bne.n	8003706 <_malloc_r+0xd2>
 8003690:	6821      	ldr	r1, [r4, #0]
 8003692:	3503      	adds	r5, #3
 8003694:	1a6d      	subs	r5, r5, r1
 8003696:	f025 0503 	bic.w	r5, r5, #3
 800369a:	3508      	adds	r5, #8
 800369c:	2d0c      	cmp	r5, #12
 800369e:	bf38      	it	cc
 80036a0:	250c      	movcc	r5, #12
 80036a2:	4638      	mov	r0, r7
 80036a4:	4629      	mov	r1, r5
 80036a6:	f7ff ffa5 	bl	80035f4 <sbrk_aligned>
 80036aa:	3001      	adds	r0, #1
 80036ac:	d02b      	beq.n	8003706 <_malloc_r+0xd2>
 80036ae:	6823      	ldr	r3, [r4, #0]
 80036b0:	442b      	add	r3, r5
 80036b2:	6023      	str	r3, [r4, #0]
 80036b4:	e00e      	b.n	80036d4 <_malloc_r+0xa0>
 80036b6:	6822      	ldr	r2, [r4, #0]
 80036b8:	1b52      	subs	r2, r2, r5
 80036ba:	d41e      	bmi.n	80036fa <_malloc_r+0xc6>
 80036bc:	2a0b      	cmp	r2, #11
 80036be:	d916      	bls.n	80036ee <_malloc_r+0xba>
 80036c0:	1961      	adds	r1, r4, r5
 80036c2:	42a3      	cmp	r3, r4
 80036c4:	6025      	str	r5, [r4, #0]
 80036c6:	bf18      	it	ne
 80036c8:	6059      	strne	r1, [r3, #4]
 80036ca:	6863      	ldr	r3, [r4, #4]
 80036cc:	bf08      	it	eq
 80036ce:	6031      	streq	r1, [r6, #0]
 80036d0:	5162      	str	r2, [r4, r5]
 80036d2:	604b      	str	r3, [r1, #4]
 80036d4:	4638      	mov	r0, r7
 80036d6:	f104 060b 	add.w	r6, r4, #11
 80036da:	f000 f865 	bl	80037a8 <__malloc_unlock>
 80036de:	f026 0607 	bic.w	r6, r6, #7
 80036e2:	1d23      	adds	r3, r4, #4
 80036e4:	1af2      	subs	r2, r6, r3
 80036e6:	d0b6      	beq.n	8003656 <_malloc_r+0x22>
 80036e8:	1b9b      	subs	r3, r3, r6
 80036ea:	50a3      	str	r3, [r4, r2]
 80036ec:	e7b3      	b.n	8003656 <_malloc_r+0x22>
 80036ee:	6862      	ldr	r2, [r4, #4]
 80036f0:	42a3      	cmp	r3, r4
 80036f2:	bf0c      	ite	eq
 80036f4:	6032      	streq	r2, [r6, #0]
 80036f6:	605a      	strne	r2, [r3, #4]
 80036f8:	e7ec      	b.n	80036d4 <_malloc_r+0xa0>
 80036fa:	4623      	mov	r3, r4
 80036fc:	6864      	ldr	r4, [r4, #4]
 80036fe:	e7b2      	b.n	8003666 <_malloc_r+0x32>
 8003700:	4634      	mov	r4, r6
 8003702:	6876      	ldr	r6, [r6, #4]
 8003704:	e7b9      	b.n	800367a <_malloc_r+0x46>
 8003706:	230c      	movs	r3, #12
 8003708:	4638      	mov	r0, r7
 800370a:	603b      	str	r3, [r7, #0]
 800370c:	f000 f84c 	bl	80037a8 <__malloc_unlock>
 8003710:	e7a1      	b.n	8003656 <_malloc_r+0x22>
 8003712:	6025      	str	r5, [r4, #0]
 8003714:	e7de      	b.n	80036d4 <_malloc_r+0xa0>
 8003716:	bf00      	nop
 8003718:	20000270 	.word	0x20000270

0800371c <_realloc_r>:
 800371c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003720:	4680      	mov	r8, r0
 8003722:	4614      	mov	r4, r2
 8003724:	460e      	mov	r6, r1
 8003726:	b921      	cbnz	r1, 8003732 <_realloc_r+0x16>
 8003728:	4611      	mov	r1, r2
 800372a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800372e:	f7ff bf81 	b.w	8003634 <_malloc_r>
 8003732:	b92a      	cbnz	r2, 8003740 <_realloc_r+0x24>
 8003734:	f7ff ff16 	bl	8003564 <_free_r>
 8003738:	4625      	mov	r5, r4
 800373a:	4628      	mov	r0, r5
 800373c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003740:	f000 f838 	bl	80037b4 <_malloc_usable_size_r>
 8003744:	4284      	cmp	r4, r0
 8003746:	4607      	mov	r7, r0
 8003748:	d802      	bhi.n	8003750 <_realloc_r+0x34>
 800374a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800374e:	d812      	bhi.n	8003776 <_realloc_r+0x5a>
 8003750:	4621      	mov	r1, r4
 8003752:	4640      	mov	r0, r8
 8003754:	f7ff ff6e 	bl	8003634 <_malloc_r>
 8003758:	4605      	mov	r5, r0
 800375a:	2800      	cmp	r0, #0
 800375c:	d0ed      	beq.n	800373a <_realloc_r+0x1e>
 800375e:	42bc      	cmp	r4, r7
 8003760:	4622      	mov	r2, r4
 8003762:	4631      	mov	r1, r6
 8003764:	bf28      	it	cs
 8003766:	463a      	movcs	r2, r7
 8003768:	f7ff fed4 	bl	8003514 <memcpy>
 800376c:	4631      	mov	r1, r6
 800376e:	4640      	mov	r0, r8
 8003770:	f7ff fef8 	bl	8003564 <_free_r>
 8003774:	e7e1      	b.n	800373a <_realloc_r+0x1e>
 8003776:	4635      	mov	r5, r6
 8003778:	e7df      	b.n	800373a <_realloc_r+0x1e>
	...

0800377c <_sbrk_r>:
 800377c:	b538      	push	{r3, r4, r5, lr}
 800377e:	2300      	movs	r3, #0
 8003780:	4d05      	ldr	r5, [pc, #20]	; (8003798 <_sbrk_r+0x1c>)
 8003782:	4604      	mov	r4, r0
 8003784:	4608      	mov	r0, r1
 8003786:	602b      	str	r3, [r5, #0]
 8003788:	f7fd f824 	bl	80007d4 <_sbrk>
 800378c:	1c43      	adds	r3, r0, #1
 800378e:	d102      	bne.n	8003796 <_sbrk_r+0x1a>
 8003790:	682b      	ldr	r3, [r5, #0]
 8003792:	b103      	cbz	r3, 8003796 <_sbrk_r+0x1a>
 8003794:	6023      	str	r3, [r4, #0]
 8003796:	bd38      	pop	{r3, r4, r5, pc}
 8003798:	20000278 	.word	0x20000278

0800379c <__malloc_lock>:
 800379c:	4801      	ldr	r0, [pc, #4]	; (80037a4 <__malloc_lock+0x8>)
 800379e:	f000 b811 	b.w	80037c4 <__retarget_lock_acquire_recursive>
 80037a2:	bf00      	nop
 80037a4:	2000027c 	.word	0x2000027c

080037a8 <__malloc_unlock>:
 80037a8:	4801      	ldr	r0, [pc, #4]	; (80037b0 <__malloc_unlock+0x8>)
 80037aa:	f000 b80c 	b.w	80037c6 <__retarget_lock_release_recursive>
 80037ae:	bf00      	nop
 80037b0:	2000027c 	.word	0x2000027c

080037b4 <_malloc_usable_size_r>:
 80037b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80037b8:	1f18      	subs	r0, r3, #4
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	bfbc      	itt	lt
 80037be:	580b      	ldrlt	r3, [r1, r0]
 80037c0:	18c0      	addlt	r0, r0, r3
 80037c2:	4770      	bx	lr

080037c4 <__retarget_lock_acquire_recursive>:
 80037c4:	4770      	bx	lr

080037c6 <__retarget_lock_release_recursive>:
 80037c6:	4770      	bx	lr

080037c8 <_init>:
 80037c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ca:	bf00      	nop
 80037cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037ce:	bc08      	pop	{r3}
 80037d0:	469e      	mov	lr, r3
 80037d2:	4770      	bx	lr

080037d4 <_fini>:
 80037d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037d6:	bf00      	nop
 80037d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037da:	bc08      	pop	{r3}
 80037dc:	469e      	mov	lr, r3
 80037de:	4770      	bx	lr
