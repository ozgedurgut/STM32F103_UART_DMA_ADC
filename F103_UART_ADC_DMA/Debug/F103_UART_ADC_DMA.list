
F103_UART_ADC_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035c0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  080036cc  080036cc  000136cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003730  08003730  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08003730  08003730  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003730  08003730  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003730  08003730  00013730  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003734  08003734  00013734  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08003738  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000188  20000078  080037b0  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000200  080037b0  00020200  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008177  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bd0  00000000  00000000  00028218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000880  00000000  00000000  00029de8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007c8  00000000  00000000  0002a668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017a72  00000000  00000000  0002ae30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ac00  00000000  00000000  000428a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087955  00000000  00000000  0004d4a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d4df7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002524  00000000  00000000  000d4e48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	080036b4 	.word	0x080036b4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	080036b4 	.word	0x080036b4

0800014c <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if(huart == &huart1){
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	4a05      	ldr	r2, [pc, #20]	; (800016c <HAL_UART_RxCpltCallback+0x20>)
 8000158:	4293      	cmp	r3, r2
 800015a:	d102      	bne.n	8000162 <HAL_UART_RxCpltCallback+0x16>
		rxCpltFlag =1;
 800015c:	4b04      	ldr	r3, [pc, #16]	; (8000170 <HAL_UART_RxCpltCallback+0x24>)
 800015e:	2201      	movs	r2, #1
 8000160:	701a      	strb	r2, [r3, #0]
	}
}
 8000162:	bf00      	nop
 8000164:	370c      	adds	r7, #12
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr
 800016c:	20000108 	.word	0x20000108
 8000170:	200001dc 	.word	0x200001dc

08000174 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000174:	b580      	push	{r7, lr}
 8000176:	b082      	sub	sp, #8
 8000178:	af00      	add	r7, sp, #0
 800017a:	6078      	str	r0, [r7, #4]
	i++;
 800017c:	4b08      	ldr	r3, [pc, #32]	; (80001a0 <HAL_UART_TxCpltCallback+0x2c>)
 800017e:	681b      	ldr	r3, [r3, #0]
 8000180:	3301      	adds	r3, #1
 8000182:	4a07      	ldr	r2, [pc, #28]	; (80001a0 <HAL_UART_TxCpltCallback+0x2c>)
 8000184:	6013      	str	r3, [r2, #0]
	if(i=2) i=0;
 8000186:	4b06      	ldr	r3, [pc, #24]	; (80001a0 <HAL_UART_TxCpltCallback+0x2c>)
 8000188:	2202      	movs	r2, #2
 800018a:	601a      	str	r2, [r3, #0]
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <HAL_UART_TxCpltCallback+0x2c>)
 800018e:	2200      	movs	r2, #0
 8000190:	601a      	str	r2, [r3, #0]
	HAL_UART_DMA_Tx_Stop(&huart1);
 8000192:	4804      	ldr	r0, [pc, #16]	; (80001a4 <HAL_UART_TxCpltCallback+0x30>)
 8000194:	f002 fb50 	bl	8002838 <HAL_UART_DMA_Tx_Stop>
}
 8000198:	bf00      	nop
 800019a:	3708      	adds	r7, #8
 800019c:	46bd      	mov	sp, r7
 800019e:	bd80      	pop	{r7, pc}
 80001a0:	200001e0 	.word	0x200001e0
 80001a4:	20000108 	.word	0x20000108

080001a8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80001a8:	b580      	push	{r7, lr}
 80001aa:	b082      	sub	sp, #8
 80001ac:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80001ae:	f000 fb91 	bl	80008d4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80001b2:	f000 f853 	bl	800025c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80001b6:	f000 f947 	bl	8000448 <MX_GPIO_Init>
	MX_DMA_Init();
 80001ba:	f000 f917 	bl	80003ec <MX_DMA_Init>
	MX_ADC1_Init();
 80001be:	f000 f89d 	bl	80002fc <MX_ADC1_Init>
	MX_USART1_UART_Init();
 80001c2:	f000 f8e9 	bl	8000398 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	//HAL_UART_Receive_DMA(&huart1,RxBuffer, 5);



	while(HAL_UART_GetState(&huart1)!= HAL_UART_STATE_READY);
 80001c6:	bf00      	nop
 80001c8:	481d      	ldr	r0, [pc, #116]	; (8000240 <main+0x98>)
 80001ca:	f002 fb8e 	bl	80028ea <HAL_UART_GetState>
 80001ce:	4603      	mov	r3, r0
 80001d0:	2b20      	cmp	r3, #32
 80001d2:	d1f9      	bne.n	80001c8 <main+0x20>
	if (HAL_UART_Receive_DMA(&huart1, (uint8_t *)RxBuffer,4)!=HAL_OK){
 80001d4:	2204      	movs	r2, #4
 80001d6:	491b      	ldr	r1, [pc, #108]	; (8000244 <main+0x9c>)
 80001d8:	4819      	ldr	r0, [pc, #100]	; (8000240 <main+0x98>)
 80001da:	f002 fafd 	bl	80027d8 <HAL_UART_Receive_DMA>
 80001de:	4603      	mov	r3, r0
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d001      	beq.n	80001e8 <main+0x40>
		Error_Handler();
 80001e4:	f000 f97c 	bl	80004e0 <Error_Handler>
	}


	HAL_ADC_Start_DMA(&hadc1,(uint32_t *)ADCValue,2);
 80001e8:	2202      	movs	r2, #2
 80001ea:	4917      	ldr	r1, [pc, #92]	; (8000248 <main+0xa0>)
 80001ec:	4817      	ldr	r0, [pc, #92]	; (800024c <main+0xa4>)
 80001ee:	f000 fccf 	bl	8000b90 <HAL_ADC_Start_DMA>
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		uint16_t value[2];
		value[0]=ADCValue[0];
 80001f2:	4b15      	ldr	r3, [pc, #84]	; (8000248 <main+0xa0>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	b29b      	uxth	r3, r3
 80001f8:	80bb      	strh	r3, [r7, #4]
		value[1]=ADCValue[1];
 80001fa:	4b13      	ldr	r3, [pc, #76]	; (8000248 <main+0xa0>)
 80001fc:	685b      	ldr	r3, [r3, #4]
 80001fe:	b29b      	uxth	r3, r3
 8000200:	80fb      	strh	r3, [r7, #6]

		HAL_UART_Transmit_DMA(&huart1, (uint8_t *)buffer,sprintf(buffer,"%4d\r\n",i+1, value[i]));
 8000202:	4b13      	ldr	r3, [pc, #76]	; (8000250 <main+0xa8>)
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	1c5a      	adds	r2, r3, #1
 8000208:	4b11      	ldr	r3, [pc, #68]	; (8000250 <main+0xa8>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	005b      	lsls	r3, r3, #1
 800020e:	3308      	adds	r3, #8
 8000210:	443b      	add	r3, r7
 8000212:	f833 3c04 	ldrh.w	r3, [r3, #-4]
 8000216:	490f      	ldr	r1, [pc, #60]	; (8000254 <main+0xac>)
 8000218:	480f      	ldr	r0, [pc, #60]	; (8000258 <main+0xb0>)
 800021a:	f002 fdd1 	bl	8002dc0 <siprintf>
 800021e:	4603      	mov	r3, r0
 8000220:	b29b      	uxth	r3, r3
 8000222:	461a      	mov	r2, r3
 8000224:	490c      	ldr	r1, [pc, #48]	; (8000258 <main+0xb0>)
 8000226:	4806      	ldr	r0, [pc, #24]	; (8000240 <main+0x98>)
 8000228:	f002 fa6a 	bl	8002700 <HAL_UART_Transmit_DMA>

		HAL_UART_Receive_DMA(&huart1, (uint8_t *)RxBuffer, 4);
 800022c:	2204      	movs	r2, #4
 800022e:	4905      	ldr	r1, [pc, #20]	; (8000244 <main+0x9c>)
 8000230:	4803      	ldr	r0, [pc, #12]	; (8000240 <main+0x98>)
 8000232:	f002 fad1 	bl	80027d8 <HAL_UART_Receive_DMA>
		HAL_Delay(10);
 8000236:	200a      	movs	r0, #10
 8000238:	f000 fbae 	bl	8000998 <HAL_Delay>
	{
 800023c:	e7d9      	b.n	80001f2 <main+0x4a>
 800023e:	bf00      	nop
 8000240:	20000108 	.word	0x20000108
 8000244:	200001e4 	.word	0x200001e4
 8000248:	200001d4 	.word	0x200001d4
 800024c:	20000094 	.word	0x20000094
 8000250:	200001e0 	.word	0x200001e0
 8000254:	080036cc 	.word	0x080036cc
 8000258:	20000000 	.word	0x20000000

0800025c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	b094      	sub	sp, #80	; 0x50
 8000260:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000262:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000266:	2228      	movs	r2, #40	; 0x28
 8000268:	2100      	movs	r1, #0
 800026a:	4618      	mov	r0, r3
 800026c:	f002 fda0 	bl	8002db0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000270:	f107 0314 	add.w	r3, r7, #20
 8000274:	2200      	movs	r2, #0
 8000276:	601a      	str	r2, [r3, #0]
 8000278:	605a      	str	r2, [r3, #4]
 800027a:	609a      	str	r2, [r3, #8]
 800027c:	60da      	str	r2, [r3, #12]
 800027e:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000280:	1d3b      	adds	r3, r7, #4
 8000282:	2200      	movs	r2, #0
 8000284:	601a      	str	r2, [r3, #0]
 8000286:	605a      	str	r2, [r3, #4]
 8000288:	609a      	str	r2, [r3, #8]
 800028a:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800028c:	2302      	movs	r3, #2
 800028e:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000290:	2301      	movs	r3, #1
 8000292:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000294:	2310      	movs	r3, #16
 8000296:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000298:	2300      	movs	r3, #0
 800029a:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800029c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002a0:	4618      	mov	r0, r3
 80002a2:	f001 fd0f 	bl	8001cc4 <HAL_RCC_OscConfig>
 80002a6:	4603      	mov	r3, r0
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d001      	beq.n	80002b0 <SystemClock_Config+0x54>
	{
		Error_Handler();
 80002ac:	f000 f918 	bl	80004e0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002b0:	230f      	movs	r3, #15
 80002b2:	617b      	str	r3, [r7, #20]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002b4:	2300      	movs	r3, #0
 80002b6:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002b8:	2300      	movs	r3, #0
 80002ba:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002bc:	2300      	movs	r3, #0
 80002be:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002c0:	2300      	movs	r3, #0
 80002c2:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002c4:	f107 0314 	add.w	r3, r7, #20
 80002c8:	2100      	movs	r1, #0
 80002ca:	4618      	mov	r0, r3
 80002cc:	f001 ff7c 	bl	80021c8 <HAL_RCC_ClockConfig>
 80002d0:	4603      	mov	r3, r0
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d001      	beq.n	80002da <SystemClock_Config+0x7e>
	{
		Error_Handler();
 80002d6:	f000 f903 	bl	80004e0 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80002da:	2302      	movs	r3, #2
 80002dc:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80002de:	2300      	movs	r3, #0
 80002e0:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002e2:	1d3b      	adds	r3, r7, #4
 80002e4:	4618      	mov	r0, r3
 80002e6:	f002 f907 	bl	80024f8 <HAL_RCCEx_PeriphCLKConfig>
 80002ea:	4603      	mov	r3, r0
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d001      	beq.n	80002f4 <SystemClock_Config+0x98>
	{
		Error_Handler();
 80002f0:	f000 f8f6 	bl	80004e0 <Error_Handler>
	}
}
 80002f4:	bf00      	nop
 80002f6:	3750      	adds	r7, #80	; 0x50
 80002f8:	46bd      	mov	sp, r7
 80002fa:	bd80      	pop	{r7, pc}

080002fc <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b084      	sub	sp, #16
 8000300:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 8000302:	1d3b      	adds	r3, r7, #4
 8000304:	2200      	movs	r2, #0
 8000306:	601a      	str	r2, [r3, #0]
 8000308:	605a      	str	r2, [r3, #4]
 800030a:	609a      	str	r2, [r3, #8]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 800030c:	4b20      	ldr	r3, [pc, #128]	; (8000390 <MX_ADC1_Init+0x94>)
 800030e:	4a21      	ldr	r2, [pc, #132]	; (8000394 <MX_ADC1_Init+0x98>)
 8000310:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000312:	4b1f      	ldr	r3, [pc, #124]	; (8000390 <MX_ADC1_Init+0x94>)
 8000314:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000318:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = ENABLE;
 800031a:	4b1d      	ldr	r3, [pc, #116]	; (8000390 <MX_ADC1_Init+0x94>)
 800031c:	2201      	movs	r2, #1
 800031e:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000320:	4b1b      	ldr	r3, [pc, #108]	; (8000390 <MX_ADC1_Init+0x94>)
 8000322:	2200      	movs	r2, #0
 8000324:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000326:	4b1a      	ldr	r3, [pc, #104]	; (8000390 <MX_ADC1_Init+0x94>)
 8000328:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800032c:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800032e:	4b18      	ldr	r3, [pc, #96]	; (8000390 <MX_ADC1_Init+0x94>)
 8000330:	2200      	movs	r2, #0
 8000332:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 2;
 8000334:	4b16      	ldr	r3, [pc, #88]	; (8000390 <MX_ADC1_Init+0x94>)
 8000336:	2202      	movs	r2, #2
 8000338:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800033a:	4815      	ldr	r0, [pc, #84]	; (8000390 <MX_ADC1_Init+0x94>)
 800033c:	f000 fb50 	bl	80009e0 <HAL_ADC_Init>
 8000340:	4603      	mov	r3, r0
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <MX_ADC1_Init+0x4e>
	{
		Error_Handler();
 8000346:	f000 f8cb 	bl	80004e0 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 800034a:	2300      	movs	r3, #0
 800034c:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800034e:	2301      	movs	r3, #1
 8000350:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000352:	2300      	movs	r3, #0
 8000354:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000356:	1d3b      	adds	r3, r7, #4
 8000358:	4619      	mov	r1, r3
 800035a:	480d      	ldr	r0, [pc, #52]	; (8000390 <MX_ADC1_Init+0x94>)
 800035c:	f000 fdde 	bl	8000f1c <HAL_ADC_ConfigChannel>
 8000360:	4603      	mov	r3, r0
 8000362:	2b00      	cmp	r3, #0
 8000364:	d001      	beq.n	800036a <MX_ADC1_Init+0x6e>
	{
		Error_Handler();
 8000366:	f000 f8bb 	bl	80004e0 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 800036a:	2301      	movs	r3, #1
 800036c:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 800036e:	2302      	movs	r3, #2
 8000370:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000372:	1d3b      	adds	r3, r7, #4
 8000374:	4619      	mov	r1, r3
 8000376:	4806      	ldr	r0, [pc, #24]	; (8000390 <MX_ADC1_Init+0x94>)
 8000378:	f000 fdd0 	bl	8000f1c <HAL_ADC_ConfigChannel>
 800037c:	4603      	mov	r3, r0
 800037e:	2b00      	cmp	r3, #0
 8000380:	d001      	beq.n	8000386 <MX_ADC1_Init+0x8a>
	{
		Error_Handler();
 8000382:	f000 f8ad 	bl	80004e0 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8000386:	bf00      	nop
 8000388:	3710      	adds	r7, #16
 800038a:	46bd      	mov	sp, r7
 800038c:	bd80      	pop	{r7, pc}
 800038e:	bf00      	nop
 8000390:	20000094 	.word	0x20000094
 8000394:	40012400 	.word	0x40012400

08000398 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 800039c:	4b11      	ldr	r3, [pc, #68]	; (80003e4 <MX_USART1_UART_Init+0x4c>)
 800039e:	4a12      	ldr	r2, [pc, #72]	; (80003e8 <MX_USART1_UART_Init+0x50>)
 80003a0:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 80003a2:	4b10      	ldr	r3, [pc, #64]	; (80003e4 <MX_USART1_UART_Init+0x4c>)
 80003a4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80003a8:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003aa:	4b0e      	ldr	r3, [pc, #56]	; (80003e4 <MX_USART1_UART_Init+0x4c>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80003b0:	4b0c      	ldr	r3, [pc, #48]	; (80003e4 <MX_USART1_UART_Init+0x4c>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80003b6:	4b0b      	ldr	r3, [pc, #44]	; (80003e4 <MX_USART1_UART_Init+0x4c>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80003bc:	4b09      	ldr	r3, [pc, #36]	; (80003e4 <MX_USART1_UART_Init+0x4c>)
 80003be:	220c      	movs	r2, #12
 80003c0:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003c2:	4b08      	ldr	r3, [pc, #32]	; (80003e4 <MX_USART1_UART_Init+0x4c>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003c8:	4b06      	ldr	r3, [pc, #24]	; (80003e4 <MX_USART1_UART_Init+0x4c>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 80003ce:	4805      	ldr	r0, [pc, #20]	; (80003e4 <MX_USART1_UART_Init+0x4c>)
 80003d0:	f002 f948 	bl	8002664 <HAL_UART_Init>
 80003d4:	4603      	mov	r3, r0
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d001      	beq.n	80003de <MX_USART1_UART_Init+0x46>
	{
		Error_Handler();
 80003da:	f000 f881 	bl	80004e0 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80003de:	bf00      	nop
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	bf00      	nop
 80003e4:	20000108 	.word	0x20000108
 80003e8:	40013800 	.word	0x40013800

080003ec <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b082      	sub	sp, #8
 80003f0:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 80003f2:	4b14      	ldr	r3, [pc, #80]	; (8000444 <MX_DMA_Init+0x58>)
 80003f4:	695b      	ldr	r3, [r3, #20]
 80003f6:	4a13      	ldr	r2, [pc, #76]	; (8000444 <MX_DMA_Init+0x58>)
 80003f8:	f043 0301 	orr.w	r3, r3, #1
 80003fc:	6153      	str	r3, [r2, #20]
 80003fe:	4b11      	ldr	r3, [pc, #68]	; (8000444 <MX_DMA_Init+0x58>)
 8000400:	695b      	ldr	r3, [r3, #20]
 8000402:	f003 0301 	and.w	r3, r3, #1
 8000406:	607b      	str	r3, [r7, #4]
 8000408:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800040a:	2200      	movs	r2, #0
 800040c:	2100      	movs	r1, #0
 800040e:	200b      	movs	r0, #11
 8000410:	f001 f85d 	bl	80014ce <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000414:	200b      	movs	r0, #11
 8000416:	f001 f876 	bl	8001506 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800041a:	2200      	movs	r2, #0
 800041c:	2100      	movs	r1, #0
 800041e:	200e      	movs	r0, #14
 8000420:	f001 f855 	bl	80014ce <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000424:	200e      	movs	r0, #14
 8000426:	f001 f86e 	bl	8001506 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800042a:	2200      	movs	r2, #0
 800042c:	2100      	movs	r1, #0
 800042e:	200f      	movs	r0, #15
 8000430:	f001 f84d 	bl	80014ce <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000434:	200f      	movs	r0, #15
 8000436:	f001 f866 	bl	8001506 <HAL_NVIC_EnableIRQ>

}
 800043a:	bf00      	nop
 800043c:	3708      	adds	r7, #8
 800043e:	46bd      	mov	sp, r7
 8000440:	bd80      	pop	{r7, pc}
 8000442:	bf00      	nop
 8000444:	40021000 	.word	0x40021000

08000448 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b088      	sub	sp, #32
 800044c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800044e:	f107 0310 	add.w	r3, r7, #16
 8000452:	2200      	movs	r2, #0
 8000454:	601a      	str	r2, [r3, #0]
 8000456:	605a      	str	r2, [r3, #4]
 8000458:	609a      	str	r2, [r3, #8]
 800045a:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800045c:	4b1e      	ldr	r3, [pc, #120]	; (80004d8 <MX_GPIO_Init+0x90>)
 800045e:	699b      	ldr	r3, [r3, #24]
 8000460:	4a1d      	ldr	r2, [pc, #116]	; (80004d8 <MX_GPIO_Init+0x90>)
 8000462:	f043 0320 	orr.w	r3, r3, #32
 8000466:	6193      	str	r3, [r2, #24]
 8000468:	4b1b      	ldr	r3, [pc, #108]	; (80004d8 <MX_GPIO_Init+0x90>)
 800046a:	699b      	ldr	r3, [r3, #24]
 800046c:	f003 0320 	and.w	r3, r3, #32
 8000470:	60fb      	str	r3, [r7, #12]
 8000472:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000474:	4b18      	ldr	r3, [pc, #96]	; (80004d8 <MX_GPIO_Init+0x90>)
 8000476:	699b      	ldr	r3, [r3, #24]
 8000478:	4a17      	ldr	r2, [pc, #92]	; (80004d8 <MX_GPIO_Init+0x90>)
 800047a:	f043 0304 	orr.w	r3, r3, #4
 800047e:	6193      	str	r3, [r2, #24]
 8000480:	4b15      	ldr	r3, [pc, #84]	; (80004d8 <MX_GPIO_Init+0x90>)
 8000482:	699b      	ldr	r3, [r3, #24]
 8000484:	f003 0304 	and.w	r3, r3, #4
 8000488:	60bb      	str	r3, [r7, #8]
 800048a:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800048c:	4b12      	ldr	r3, [pc, #72]	; (80004d8 <MX_GPIO_Init+0x90>)
 800048e:	699b      	ldr	r3, [r3, #24]
 8000490:	4a11      	ldr	r2, [pc, #68]	; (80004d8 <MX_GPIO_Init+0x90>)
 8000492:	f043 0308 	orr.w	r3, r3, #8
 8000496:	6193      	str	r3, [r2, #24]
 8000498:	4b0f      	ldr	r3, [pc, #60]	; (80004d8 <MX_GPIO_Init+0x90>)
 800049a:	699b      	ldr	r3, [r3, #24]
 800049c:	f003 0308 	and.w	r3, r3, #8
 80004a0:	607b      	str	r3, [r7, #4]
 80004a2:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_10, GPIO_PIN_RESET);
 80004a4:	2200      	movs	r2, #0
 80004a6:	f240 4104 	movw	r1, #1028	; 0x404
 80004aa:	480c      	ldr	r0, [pc, #48]	; (80004dc <MX_GPIO_Init+0x94>)
 80004ac:	f001 fbf2 	bl	8001c94 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PB2 PB10 */
	GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10;
 80004b0:	f240 4304 	movw	r3, #1028	; 0x404
 80004b4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004b6:	2301      	movs	r3, #1
 80004b8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ba:	2300      	movs	r3, #0
 80004bc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004be:	2302      	movs	r3, #2
 80004c0:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004c2:	f107 0310 	add.w	r3, r7, #16
 80004c6:	4619      	mov	r1, r3
 80004c8:	4804      	ldr	r0, [pc, #16]	; (80004dc <MX_GPIO_Init+0x94>)
 80004ca:	f001 fa5f 	bl	800198c <HAL_GPIO_Init>

}
 80004ce:	bf00      	nop
 80004d0:	3720      	adds	r7, #32
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	bf00      	nop
 80004d8:	40021000 	.word	0x40021000
 80004dc:	40010c00 	.word	0x40010c00

080004e0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004e4:	b672      	cpsid	i
}
 80004e6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80004e8:	e7fe      	b.n	80004e8 <Error_Handler+0x8>
	...

080004ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	b085      	sub	sp, #20
 80004f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004f2:	4b15      	ldr	r3, [pc, #84]	; (8000548 <HAL_MspInit+0x5c>)
 80004f4:	699b      	ldr	r3, [r3, #24]
 80004f6:	4a14      	ldr	r2, [pc, #80]	; (8000548 <HAL_MspInit+0x5c>)
 80004f8:	f043 0301 	orr.w	r3, r3, #1
 80004fc:	6193      	str	r3, [r2, #24]
 80004fe:	4b12      	ldr	r3, [pc, #72]	; (8000548 <HAL_MspInit+0x5c>)
 8000500:	699b      	ldr	r3, [r3, #24]
 8000502:	f003 0301 	and.w	r3, r3, #1
 8000506:	60bb      	str	r3, [r7, #8]
 8000508:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800050a:	4b0f      	ldr	r3, [pc, #60]	; (8000548 <HAL_MspInit+0x5c>)
 800050c:	69db      	ldr	r3, [r3, #28]
 800050e:	4a0e      	ldr	r2, [pc, #56]	; (8000548 <HAL_MspInit+0x5c>)
 8000510:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000514:	61d3      	str	r3, [r2, #28]
 8000516:	4b0c      	ldr	r3, [pc, #48]	; (8000548 <HAL_MspInit+0x5c>)
 8000518:	69db      	ldr	r3, [r3, #28]
 800051a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800051e:	607b      	str	r3, [r7, #4]
 8000520:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000522:	4b0a      	ldr	r3, [pc, #40]	; (800054c <HAL_MspInit+0x60>)
 8000524:	685b      	ldr	r3, [r3, #4]
 8000526:	60fb      	str	r3, [r7, #12]
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800052e:	60fb      	str	r3, [r7, #12]
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000536:	60fb      	str	r3, [r7, #12]
 8000538:	4a04      	ldr	r2, [pc, #16]	; (800054c <HAL_MspInit+0x60>)
 800053a:	68fb      	ldr	r3, [r7, #12]
 800053c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800053e:	bf00      	nop
 8000540:	3714      	adds	r7, #20
 8000542:	46bd      	mov	sp, r7
 8000544:	bc80      	pop	{r7}
 8000546:	4770      	bx	lr
 8000548:	40021000 	.word	0x40021000
 800054c:	40010000 	.word	0x40010000

08000550 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b088      	sub	sp, #32
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000558:	f107 0310 	add.w	r3, r7, #16
 800055c:	2200      	movs	r2, #0
 800055e:	601a      	str	r2, [r3, #0]
 8000560:	605a      	str	r2, [r3, #4]
 8000562:	609a      	str	r2, [r3, #8]
 8000564:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	4a2c      	ldr	r2, [pc, #176]	; (800061c <HAL_ADC_MspInit+0xcc>)
 800056c:	4293      	cmp	r3, r2
 800056e:	d151      	bne.n	8000614 <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000570:	4b2b      	ldr	r3, [pc, #172]	; (8000620 <HAL_ADC_MspInit+0xd0>)
 8000572:	699b      	ldr	r3, [r3, #24]
 8000574:	4a2a      	ldr	r2, [pc, #168]	; (8000620 <HAL_ADC_MspInit+0xd0>)
 8000576:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800057a:	6193      	str	r3, [r2, #24]
 800057c:	4b28      	ldr	r3, [pc, #160]	; (8000620 <HAL_ADC_MspInit+0xd0>)
 800057e:	699b      	ldr	r3, [r3, #24]
 8000580:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000584:	60fb      	str	r3, [r7, #12]
 8000586:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000588:	4b25      	ldr	r3, [pc, #148]	; (8000620 <HAL_ADC_MspInit+0xd0>)
 800058a:	699b      	ldr	r3, [r3, #24]
 800058c:	4a24      	ldr	r2, [pc, #144]	; (8000620 <HAL_ADC_MspInit+0xd0>)
 800058e:	f043 0304 	orr.w	r3, r3, #4
 8000592:	6193      	str	r3, [r2, #24]
 8000594:	4b22      	ldr	r3, [pc, #136]	; (8000620 <HAL_ADC_MspInit+0xd0>)
 8000596:	699b      	ldr	r3, [r3, #24]
 8000598:	f003 0304 	and.w	r3, r3, #4
 800059c:	60bb      	str	r3, [r7, #8]
 800059e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80005a0:	2303      	movs	r3, #3
 80005a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005a4:	2303      	movs	r3, #3
 80005a6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005a8:	f107 0310 	add.w	r3, r7, #16
 80005ac:	4619      	mov	r1, r3
 80005ae:	481d      	ldr	r0, [pc, #116]	; (8000624 <HAL_ADC_MspInit+0xd4>)
 80005b0:	f001 f9ec 	bl	800198c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80005b4:	4b1c      	ldr	r3, [pc, #112]	; (8000628 <HAL_ADC_MspInit+0xd8>)
 80005b6:	4a1d      	ldr	r2, [pc, #116]	; (800062c <HAL_ADC_MspInit+0xdc>)
 80005b8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80005ba:	4b1b      	ldr	r3, [pc, #108]	; (8000628 <HAL_ADC_MspInit+0xd8>)
 80005bc:	2200      	movs	r2, #0
 80005be:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80005c0:	4b19      	ldr	r3, [pc, #100]	; (8000628 <HAL_ADC_MspInit+0xd8>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80005c6:	4b18      	ldr	r3, [pc, #96]	; (8000628 <HAL_ADC_MspInit+0xd8>)
 80005c8:	2280      	movs	r2, #128	; 0x80
 80005ca:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80005cc:	4b16      	ldr	r3, [pc, #88]	; (8000628 <HAL_ADC_MspInit+0xd8>)
 80005ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005d2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80005d4:	4b14      	ldr	r3, [pc, #80]	; (8000628 <HAL_ADC_MspInit+0xd8>)
 80005d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80005da:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80005dc:	4b12      	ldr	r3, [pc, #72]	; (8000628 <HAL_ADC_MspInit+0xd8>)
 80005de:	2220      	movs	r2, #32
 80005e0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80005e2:	4b11      	ldr	r3, [pc, #68]	; (8000628 <HAL_ADC_MspInit+0xd8>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80005e8:	480f      	ldr	r0, [pc, #60]	; (8000628 <HAL_ADC_MspInit+0xd8>)
 80005ea:	f000 ffa7 	bl	800153c <HAL_DMA_Init>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80005f4:	f7ff ff74 	bl	80004e0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	4a0b      	ldr	r2, [pc, #44]	; (8000628 <HAL_ADC_MspInit+0xd8>)
 80005fc:	621a      	str	r2, [r3, #32]
 80005fe:	4a0a      	ldr	r2, [pc, #40]	; (8000628 <HAL_ADC_MspInit+0xd8>)
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000604:	2200      	movs	r2, #0
 8000606:	2100      	movs	r1, #0
 8000608:	2012      	movs	r0, #18
 800060a:	f000 ff60 	bl	80014ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800060e:	2012      	movs	r0, #18
 8000610:	f000 ff79 	bl	8001506 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000614:	bf00      	nop
 8000616:	3720      	adds	r7, #32
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	40012400 	.word	0x40012400
 8000620:	40021000 	.word	0x40021000
 8000624:	40010800 	.word	0x40010800
 8000628:	200000c4 	.word	0x200000c4
 800062c:	40020008 	.word	0x40020008

08000630 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b088      	sub	sp, #32
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000638:	f107 0310 	add.w	r3, r7, #16
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
 8000642:	609a      	str	r2, [r3, #8]
 8000644:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	4a42      	ldr	r2, [pc, #264]	; (8000754 <HAL_UART_MspInit+0x124>)
 800064c:	4293      	cmp	r3, r2
 800064e:	d17d      	bne.n	800074c <HAL_UART_MspInit+0x11c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000650:	4b41      	ldr	r3, [pc, #260]	; (8000758 <HAL_UART_MspInit+0x128>)
 8000652:	699b      	ldr	r3, [r3, #24]
 8000654:	4a40      	ldr	r2, [pc, #256]	; (8000758 <HAL_UART_MspInit+0x128>)
 8000656:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800065a:	6193      	str	r3, [r2, #24]
 800065c:	4b3e      	ldr	r3, [pc, #248]	; (8000758 <HAL_UART_MspInit+0x128>)
 800065e:	699b      	ldr	r3, [r3, #24]
 8000660:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000664:	60fb      	str	r3, [r7, #12]
 8000666:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000668:	4b3b      	ldr	r3, [pc, #236]	; (8000758 <HAL_UART_MspInit+0x128>)
 800066a:	699b      	ldr	r3, [r3, #24]
 800066c:	4a3a      	ldr	r2, [pc, #232]	; (8000758 <HAL_UART_MspInit+0x128>)
 800066e:	f043 0304 	orr.w	r3, r3, #4
 8000672:	6193      	str	r3, [r2, #24]
 8000674:	4b38      	ldr	r3, [pc, #224]	; (8000758 <HAL_UART_MspInit+0x128>)
 8000676:	699b      	ldr	r3, [r3, #24]
 8000678:	f003 0304 	and.w	r3, r3, #4
 800067c:	60bb      	str	r3, [r7, #8]
 800067e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000680:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000684:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000686:	2302      	movs	r3, #2
 8000688:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800068a:	2303      	movs	r3, #3
 800068c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800068e:	f107 0310 	add.w	r3, r7, #16
 8000692:	4619      	mov	r1, r3
 8000694:	4831      	ldr	r0, [pc, #196]	; (800075c <HAL_UART_MspInit+0x12c>)
 8000696:	f001 f979 	bl	800198c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800069a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800069e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006a0:	2300      	movs	r3, #0
 80006a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a4:	2300      	movs	r3, #0
 80006a6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a8:	f107 0310 	add.w	r3, r7, #16
 80006ac:	4619      	mov	r1, r3
 80006ae:	482b      	ldr	r0, [pc, #172]	; (800075c <HAL_UART_MspInit+0x12c>)
 80006b0:	f001 f96c 	bl	800198c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80006b4:	4b2a      	ldr	r3, [pc, #168]	; (8000760 <HAL_UART_MspInit+0x130>)
 80006b6:	4a2b      	ldr	r2, [pc, #172]	; (8000764 <HAL_UART_MspInit+0x134>)
 80006b8:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80006ba:	4b29      	ldr	r3, [pc, #164]	; (8000760 <HAL_UART_MspInit+0x130>)
 80006bc:	2210      	movs	r2, #16
 80006be:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80006c0:	4b27      	ldr	r3, [pc, #156]	; (8000760 <HAL_UART_MspInit+0x130>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80006c6:	4b26      	ldr	r3, [pc, #152]	; (8000760 <HAL_UART_MspInit+0x130>)
 80006c8:	2280      	movs	r2, #128	; 0x80
 80006ca:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80006cc:	4b24      	ldr	r3, [pc, #144]	; (8000760 <HAL_UART_MspInit+0x130>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80006d2:	4b23      	ldr	r3, [pc, #140]	; (8000760 <HAL_UART_MspInit+0x130>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 80006d8:	4b21      	ldr	r3, [pc, #132]	; (8000760 <HAL_UART_MspInit+0x130>)
 80006da:	2220      	movs	r2, #32
 80006dc:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80006de:	4b20      	ldr	r3, [pc, #128]	; (8000760 <HAL_UART_MspInit+0x130>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80006e4:	481e      	ldr	r0, [pc, #120]	; (8000760 <HAL_UART_MspInit+0x130>)
 80006e6:	f000 ff29 	bl	800153c <HAL_DMA_Init>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 80006f0:	f7ff fef6 	bl	80004e0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	4a1a      	ldr	r2, [pc, #104]	; (8000760 <HAL_UART_MspInit+0x130>)
 80006f8:	635a      	str	r2, [r3, #52]	; 0x34
 80006fa:	4a19      	ldr	r2, [pc, #100]	; (8000760 <HAL_UART_MspInit+0x130>)
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000700:	4b19      	ldr	r3, [pc, #100]	; (8000768 <HAL_UART_MspInit+0x138>)
 8000702:	4a1a      	ldr	r2, [pc, #104]	; (800076c <HAL_UART_MspInit+0x13c>)
 8000704:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000706:	4b18      	ldr	r3, [pc, #96]	; (8000768 <HAL_UART_MspInit+0x138>)
 8000708:	2200      	movs	r2, #0
 800070a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800070c:	4b16      	ldr	r3, [pc, #88]	; (8000768 <HAL_UART_MspInit+0x138>)
 800070e:	2200      	movs	r2, #0
 8000710:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000712:	4b15      	ldr	r3, [pc, #84]	; (8000768 <HAL_UART_MspInit+0x138>)
 8000714:	2280      	movs	r2, #128	; 0x80
 8000716:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000718:	4b13      	ldr	r3, [pc, #76]	; (8000768 <HAL_UART_MspInit+0x138>)
 800071a:	2200      	movs	r2, #0
 800071c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800071e:	4b12      	ldr	r3, [pc, #72]	; (8000768 <HAL_UART_MspInit+0x138>)
 8000720:	2200      	movs	r2, #0
 8000722:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000724:	4b10      	ldr	r3, [pc, #64]	; (8000768 <HAL_UART_MspInit+0x138>)
 8000726:	2220      	movs	r2, #32
 8000728:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800072a:	4b0f      	ldr	r3, [pc, #60]	; (8000768 <HAL_UART_MspInit+0x138>)
 800072c:	2200      	movs	r2, #0
 800072e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000730:	480d      	ldr	r0, [pc, #52]	; (8000768 <HAL_UART_MspInit+0x138>)
 8000732:	f000 ff03 	bl	800153c <HAL_DMA_Init>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <HAL_UART_MspInit+0x110>
    {
      Error_Handler();
 800073c:	f7ff fed0 	bl	80004e0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	4a09      	ldr	r2, [pc, #36]	; (8000768 <HAL_UART_MspInit+0x138>)
 8000744:	639a      	str	r2, [r3, #56]	; 0x38
 8000746:	4a08      	ldr	r2, [pc, #32]	; (8000768 <HAL_UART_MspInit+0x138>)
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800074c:	bf00      	nop
 800074e:	3720      	adds	r7, #32
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	40013800 	.word	0x40013800
 8000758:	40021000 	.word	0x40021000
 800075c:	40010800 	.word	0x40010800
 8000760:	2000014c 	.word	0x2000014c
 8000764:	40020044 	.word	0x40020044
 8000768:	20000190 	.word	0x20000190
 800076c:	40020058 	.word	0x40020058

08000770 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000774:	e7fe      	b.n	8000774 <NMI_Handler+0x4>

08000776 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000776:	b480      	push	{r7}
 8000778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800077a:	e7fe      	b.n	800077a <HardFault_Handler+0x4>

0800077c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000780:	e7fe      	b.n	8000780 <MemManage_Handler+0x4>

08000782 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000782:	b480      	push	{r7}
 8000784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000786:	e7fe      	b.n	8000786 <BusFault_Handler+0x4>

08000788 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800078c:	e7fe      	b.n	800078c <UsageFault_Handler+0x4>

0800078e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800078e:	b480      	push	{r7}
 8000790:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000792:	bf00      	nop
 8000794:	46bd      	mov	sp, r7
 8000796:	bc80      	pop	{r7}
 8000798:	4770      	bx	lr

0800079a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800079a:	b480      	push	{r7}
 800079c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800079e:	bf00      	nop
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bc80      	pop	{r7}
 80007a4:	4770      	bx	lr

080007a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007a6:	b480      	push	{r7}
 80007a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007aa:	bf00      	nop
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bc80      	pop	{r7}
 80007b0:	4770      	bx	lr

080007b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007b2:	b580      	push	{r7, lr}
 80007b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007b6:	f000 f8d3 	bl	8000960 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007ba:	bf00      	nop
 80007bc:	bd80      	pop	{r7, pc}
	...

080007c0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80007c4:	4802      	ldr	r0, [pc, #8]	; (80007d0 <DMA1_Channel1_IRQHandler+0x10>)
 80007c6:	f000 ffad 	bl	8001724 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80007ca:	bf00      	nop
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	200000c4 	.word	0x200000c4

080007d4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80007d8:	4802      	ldr	r0, [pc, #8]	; (80007e4 <DMA1_Channel4_IRQHandler+0x10>)
 80007da:	f000 ffa3 	bl	8001724 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80007de:	bf00      	nop
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	2000014c 	.word	0x2000014c

080007e8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80007ec:	4802      	ldr	r0, [pc, #8]	; (80007f8 <DMA1_Channel5_IRQHandler+0x10>)
 80007ee:	f000 ff99 	bl	8001724 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	20000190 	.word	0x20000190

080007fc <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000800:	4802      	ldr	r0, [pc, #8]	; (800080c <ADC1_2_IRQHandler+0x10>)
 8000802:	f000 faa3 	bl	8000d4c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	20000094 	.word	0x20000094

08000810 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b086      	sub	sp, #24
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000818:	4a14      	ldr	r2, [pc, #80]	; (800086c <_sbrk+0x5c>)
 800081a:	4b15      	ldr	r3, [pc, #84]	; (8000870 <_sbrk+0x60>)
 800081c:	1ad3      	subs	r3, r2, r3
 800081e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000820:	697b      	ldr	r3, [r7, #20]
 8000822:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000824:	4b13      	ldr	r3, [pc, #76]	; (8000874 <_sbrk+0x64>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	2b00      	cmp	r3, #0
 800082a:	d102      	bne.n	8000832 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800082c:	4b11      	ldr	r3, [pc, #68]	; (8000874 <_sbrk+0x64>)
 800082e:	4a12      	ldr	r2, [pc, #72]	; (8000878 <_sbrk+0x68>)
 8000830:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000832:	4b10      	ldr	r3, [pc, #64]	; (8000874 <_sbrk+0x64>)
 8000834:	681a      	ldr	r2, [r3, #0]
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	4413      	add	r3, r2
 800083a:	693a      	ldr	r2, [r7, #16]
 800083c:	429a      	cmp	r2, r3
 800083e:	d207      	bcs.n	8000850 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000840:	f002 fa8c 	bl	8002d5c <__errno>
 8000844:	4603      	mov	r3, r0
 8000846:	220c      	movs	r2, #12
 8000848:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800084a:	f04f 33ff 	mov.w	r3, #4294967295
 800084e:	e009      	b.n	8000864 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000850:	4b08      	ldr	r3, [pc, #32]	; (8000874 <_sbrk+0x64>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000856:	4b07      	ldr	r3, [pc, #28]	; (8000874 <_sbrk+0x64>)
 8000858:	681a      	ldr	r2, [r3, #0]
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	4413      	add	r3, r2
 800085e:	4a05      	ldr	r2, [pc, #20]	; (8000874 <_sbrk+0x64>)
 8000860:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000862:	68fb      	ldr	r3, [r7, #12]
}
 8000864:	4618      	mov	r0, r3
 8000866:	3718      	adds	r7, #24
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	20005000 	.word	0x20005000
 8000870:	00000400 	.word	0x00000400
 8000874:	200001e8 	.word	0x200001e8
 8000878:	20000200 	.word	0x20000200

0800087c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000880:	bf00      	nop
 8000882:	46bd      	mov	sp, r7
 8000884:	bc80      	pop	{r7}
 8000886:	4770      	bx	lr

08000888 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000888:	480c      	ldr	r0, [pc, #48]	; (80008bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800088a:	490d      	ldr	r1, [pc, #52]	; (80008c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800088c:	4a0d      	ldr	r2, [pc, #52]	; (80008c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800088e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000890:	e002      	b.n	8000898 <LoopCopyDataInit>

08000892 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000892:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000894:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000896:	3304      	adds	r3, #4

08000898 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000898:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800089a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800089c:	d3f9      	bcc.n	8000892 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800089e:	4a0a      	ldr	r2, [pc, #40]	; (80008c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80008a0:	4c0a      	ldr	r4, [pc, #40]	; (80008cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80008a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008a4:	e001      	b.n	80008aa <LoopFillZerobss>

080008a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008a8:	3204      	adds	r2, #4

080008aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008ac:	d3fb      	bcc.n	80008a6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80008ae:	f7ff ffe5 	bl	800087c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008b2:	f002 fa59 	bl	8002d68 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008b6:	f7ff fc77 	bl	80001a8 <main>
  bx lr
 80008ba:	4770      	bx	lr
  ldr r0, =_sdata
 80008bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008c0:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80008c4:	08003738 	.word	0x08003738
  ldr r2, =_sbss
 80008c8:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80008cc:	20000200 	.word	0x20000200

080008d0 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008d0:	e7fe      	b.n	80008d0 <CAN1_RX1_IRQHandler>
	...

080008d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008d8:	4b08      	ldr	r3, [pc, #32]	; (80008fc <HAL_Init+0x28>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a07      	ldr	r2, [pc, #28]	; (80008fc <HAL_Init+0x28>)
 80008de:	f043 0310 	orr.w	r3, r3, #16
 80008e2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008e4:	2003      	movs	r0, #3
 80008e6:	f000 fde7 	bl	80014b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008ea:	200f      	movs	r0, #15
 80008ec:	f000 f808 	bl	8000900 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008f0:	f7ff fdfc 	bl	80004ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008f4:	2300      	movs	r3, #0
}
 80008f6:	4618      	mov	r0, r3
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	40022000 	.word	0x40022000

08000900 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000908:	4b12      	ldr	r3, [pc, #72]	; (8000954 <HAL_InitTick+0x54>)
 800090a:	681a      	ldr	r2, [r3, #0]
 800090c:	4b12      	ldr	r3, [pc, #72]	; (8000958 <HAL_InitTick+0x58>)
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	4619      	mov	r1, r3
 8000912:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000916:	fbb3 f3f1 	udiv	r3, r3, r1
 800091a:	fbb2 f3f3 	udiv	r3, r2, r3
 800091e:	4618      	mov	r0, r3
 8000920:	f000 fdff 	bl	8001522 <HAL_SYSTICK_Config>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800092a:	2301      	movs	r3, #1
 800092c:	e00e      	b.n	800094c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	2b0f      	cmp	r3, #15
 8000932:	d80a      	bhi.n	800094a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000934:	2200      	movs	r2, #0
 8000936:	6879      	ldr	r1, [r7, #4]
 8000938:	f04f 30ff 	mov.w	r0, #4294967295
 800093c:	f000 fdc7 	bl	80014ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000940:	4a06      	ldr	r2, [pc, #24]	; (800095c <HAL_InitTick+0x5c>)
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000946:	2300      	movs	r3, #0
 8000948:	e000      	b.n	800094c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800094a:	2301      	movs	r3, #1
}
 800094c:	4618      	mov	r0, r3
 800094e:	3708      	adds	r7, #8
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	20000008 	.word	0x20000008
 8000958:	20000010 	.word	0x20000010
 800095c:	2000000c 	.word	0x2000000c

08000960 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000964:	4b05      	ldr	r3, [pc, #20]	; (800097c <HAL_IncTick+0x1c>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	461a      	mov	r2, r3
 800096a:	4b05      	ldr	r3, [pc, #20]	; (8000980 <HAL_IncTick+0x20>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	4413      	add	r3, r2
 8000970:	4a03      	ldr	r2, [pc, #12]	; (8000980 <HAL_IncTick+0x20>)
 8000972:	6013      	str	r3, [r2, #0]
}
 8000974:	bf00      	nop
 8000976:	46bd      	mov	sp, r7
 8000978:	bc80      	pop	{r7}
 800097a:	4770      	bx	lr
 800097c:	20000010 	.word	0x20000010
 8000980:	200001ec 	.word	0x200001ec

08000984 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  return uwTick;
 8000988:	4b02      	ldr	r3, [pc, #8]	; (8000994 <HAL_GetTick+0x10>)
 800098a:	681b      	ldr	r3, [r3, #0]
}
 800098c:	4618      	mov	r0, r3
 800098e:	46bd      	mov	sp, r7
 8000990:	bc80      	pop	{r7}
 8000992:	4770      	bx	lr
 8000994:	200001ec 	.word	0x200001ec

08000998 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b084      	sub	sp, #16
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009a0:	f7ff fff0 	bl	8000984 <HAL_GetTick>
 80009a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009b0:	d005      	beq.n	80009be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009b2:	4b0a      	ldr	r3, [pc, #40]	; (80009dc <HAL_Delay+0x44>)
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	461a      	mov	r2, r3
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	4413      	add	r3, r2
 80009bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009be:	bf00      	nop
 80009c0:	f7ff ffe0 	bl	8000984 <HAL_GetTick>
 80009c4:	4602      	mov	r2, r0
 80009c6:	68bb      	ldr	r3, [r7, #8]
 80009c8:	1ad3      	subs	r3, r2, r3
 80009ca:	68fa      	ldr	r2, [r7, #12]
 80009cc:	429a      	cmp	r2, r3
 80009ce:	d8f7      	bhi.n	80009c0 <HAL_Delay+0x28>
  {
  }
}
 80009d0:	bf00      	nop
 80009d2:	bf00      	nop
 80009d4:	3710      	adds	r7, #16
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	20000010 	.word	0x20000010

080009e0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b086      	sub	sp, #24
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80009e8:	2300      	movs	r3, #0
 80009ea:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80009ec:	2300      	movs	r3, #0
 80009ee:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80009f0:	2300      	movs	r3, #0
 80009f2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80009f4:	2300      	movs	r3, #0
 80009f6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d101      	bne.n	8000a02 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80009fe:	2301      	movs	r3, #1
 8000a00:	e0be      	b.n	8000b80 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	689b      	ldr	r3, [r3, #8]
 8000a06:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d109      	bne.n	8000a24 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	2200      	movs	r2, #0
 8000a14:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	2200      	movs	r2, #0
 8000a1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000a1e:	6878      	ldr	r0, [r7, #4]
 8000a20:	f7ff fd96 	bl	8000550 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000a24:	6878      	ldr	r0, [r7, #4]
 8000a26:	f000 fbcb 	bl	80011c0 <ADC_ConversionStop_Disable>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a32:	f003 0310 	and.w	r3, r3, #16
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	f040 8099 	bne.w	8000b6e <HAL_ADC_Init+0x18e>
 8000a3c:	7dfb      	ldrb	r3, [r7, #23]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	f040 8095 	bne.w	8000b6e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a48:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000a4c:	f023 0302 	bic.w	r3, r3, #2
 8000a50:	f043 0202 	orr.w	r2, r3, #2
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a60:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	7b1b      	ldrb	r3, [r3, #12]
 8000a66:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000a68:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a6a:	68ba      	ldr	r2, [r7, #8]
 8000a6c:	4313      	orrs	r3, r2
 8000a6e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	689b      	ldr	r3, [r3, #8]
 8000a74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a78:	d003      	beq.n	8000a82 <HAL_ADC_Init+0xa2>
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	689b      	ldr	r3, [r3, #8]
 8000a7e:	2b01      	cmp	r3, #1
 8000a80:	d102      	bne.n	8000a88 <HAL_ADC_Init+0xa8>
 8000a82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a86:	e000      	b.n	8000a8a <HAL_ADC_Init+0xaa>
 8000a88:	2300      	movs	r3, #0
 8000a8a:	693a      	ldr	r2, [r7, #16]
 8000a8c:	4313      	orrs	r3, r2
 8000a8e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	7d1b      	ldrb	r3, [r3, #20]
 8000a94:	2b01      	cmp	r3, #1
 8000a96:	d119      	bne.n	8000acc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	7b1b      	ldrb	r3, [r3, #12]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d109      	bne.n	8000ab4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	699b      	ldr	r3, [r3, #24]
 8000aa4:	3b01      	subs	r3, #1
 8000aa6:	035a      	lsls	r2, r3, #13
 8000aa8:	693b      	ldr	r3, [r7, #16]
 8000aaa:	4313      	orrs	r3, r2
 8000aac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ab0:	613b      	str	r3, [r7, #16]
 8000ab2:	e00b      	b.n	8000acc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ab8:	f043 0220 	orr.w	r2, r3, #32
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ac4:	f043 0201 	orr.w	r2, r3, #1
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	693a      	ldr	r2, [r7, #16]
 8000adc:	430a      	orrs	r2, r1
 8000ade:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	689a      	ldr	r2, [r3, #8]
 8000ae6:	4b28      	ldr	r3, [pc, #160]	; (8000b88 <HAL_ADC_Init+0x1a8>)
 8000ae8:	4013      	ands	r3, r2
 8000aea:	687a      	ldr	r2, [r7, #4]
 8000aec:	6812      	ldr	r2, [r2, #0]
 8000aee:	68b9      	ldr	r1, [r7, #8]
 8000af0:	430b      	orrs	r3, r1
 8000af2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	689b      	ldr	r3, [r3, #8]
 8000af8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000afc:	d003      	beq.n	8000b06 <HAL_ADC_Init+0x126>
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	689b      	ldr	r3, [r3, #8]
 8000b02:	2b01      	cmp	r3, #1
 8000b04:	d104      	bne.n	8000b10 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	691b      	ldr	r3, [r3, #16]
 8000b0a:	3b01      	subs	r3, #1
 8000b0c:	051b      	lsls	r3, r3, #20
 8000b0e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b16:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	68fa      	ldr	r2, [r7, #12]
 8000b20:	430a      	orrs	r2, r1
 8000b22:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	689a      	ldr	r2, [r3, #8]
 8000b2a:	4b18      	ldr	r3, [pc, #96]	; (8000b8c <HAL_ADC_Init+0x1ac>)
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	68ba      	ldr	r2, [r7, #8]
 8000b30:	429a      	cmp	r2, r3
 8000b32:	d10b      	bne.n	8000b4c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	2200      	movs	r2, #0
 8000b38:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b3e:	f023 0303 	bic.w	r3, r3, #3
 8000b42:	f043 0201 	orr.w	r2, r3, #1
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000b4a:	e018      	b.n	8000b7e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b50:	f023 0312 	bic.w	r3, r3, #18
 8000b54:	f043 0210 	orr.w	r2, r3, #16
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b60:	f043 0201 	orr.w	r2, r3, #1
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000b68:	2301      	movs	r3, #1
 8000b6a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000b6c:	e007      	b.n	8000b7e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b72:	f043 0210 	orr.w	r2, r3, #16
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000b7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	3718      	adds	r7, #24
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	ffe1f7fd 	.word	0xffe1f7fd
 8000b8c:	ff1f0efe 	.word	0xff1f0efe

08000b90 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b086      	sub	sp, #24
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	60f8      	str	r0, [r7, #12]
 8000b98:	60b9      	str	r1, [r7, #8]
 8000b9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a64      	ldr	r2, [pc, #400]	; (8000d38 <HAL_ADC_Start_DMA+0x1a8>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d004      	beq.n	8000bb4 <HAL_ADC_Start_DMA+0x24>
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4a63      	ldr	r2, [pc, #396]	; (8000d3c <HAL_ADC_Start_DMA+0x1ac>)
 8000bb0:	4293      	cmp	r3, r2
 8000bb2:	d106      	bne.n	8000bc2 <HAL_ADC_Start_DMA+0x32>
 8000bb4:	4b60      	ldr	r3, [pc, #384]	; (8000d38 <HAL_ADC_Start_DMA+0x1a8>)
 8000bb6:	685b      	ldr	r3, [r3, #4]
 8000bb8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	f040 80b3 	bne.w	8000d28 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000bc8:	2b01      	cmp	r3, #1
 8000bca:	d101      	bne.n	8000bd0 <HAL_ADC_Start_DMA+0x40>
 8000bcc:	2302      	movs	r3, #2
 8000bce:	e0ae      	b.n	8000d2e <HAL_ADC_Start_DMA+0x19e>
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000bd8:	68f8      	ldr	r0, [r7, #12]
 8000bda:	f000 fa97 	bl	800110c <ADC_Enable>
 8000bde:	4603      	mov	r3, r0
 8000be0:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000be2:	7dfb      	ldrb	r3, [r7, #23]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	f040 809a 	bne.w	8000d1e <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bee:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000bf2:	f023 0301 	bic.w	r3, r3, #1
 8000bf6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	4a4e      	ldr	r2, [pc, #312]	; (8000d3c <HAL_ADC_Start_DMA+0x1ac>)
 8000c04:	4293      	cmp	r3, r2
 8000c06:	d105      	bne.n	8000c14 <HAL_ADC_Start_DMA+0x84>
 8000c08:	4b4b      	ldr	r3, [pc, #300]	; (8000d38 <HAL_ADC_Start_DMA+0x1a8>)
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d115      	bne.n	8000c40 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c18:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d026      	beq.n	8000c7c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c32:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000c36:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000c3e:	e01d      	b.n	8000c7c <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c44:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a39      	ldr	r2, [pc, #228]	; (8000d38 <HAL_ADC_Start_DMA+0x1a8>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d004      	beq.n	8000c60 <HAL_ADC_Start_DMA+0xd0>
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4a38      	ldr	r2, [pc, #224]	; (8000d3c <HAL_ADC_Start_DMA+0x1ac>)
 8000c5c:	4293      	cmp	r3, r2
 8000c5e:	d10d      	bne.n	8000c7c <HAL_ADC_Start_DMA+0xec>
 8000c60:	4b35      	ldr	r3, [pc, #212]	; (8000d38 <HAL_ADC_Start_DMA+0x1a8>)
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d007      	beq.n	8000c7c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c70:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000c74:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d006      	beq.n	8000c96 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c8c:	f023 0206 	bic.w	r2, r3, #6
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c94:	e002      	b.n	8000c9c <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	2200      	movs	r2, #0
 8000c9a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	6a1b      	ldr	r3, [r3, #32]
 8000ca8:	4a25      	ldr	r2, [pc, #148]	; (8000d40 <HAL_ADC_Start_DMA+0x1b0>)
 8000caa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	6a1b      	ldr	r3, [r3, #32]
 8000cb0:	4a24      	ldr	r2, [pc, #144]	; (8000d44 <HAL_ADC_Start_DMA+0x1b4>)
 8000cb2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	6a1b      	ldr	r3, [r3, #32]
 8000cb8:	4a23      	ldr	r2, [pc, #140]	; (8000d48 <HAL_ADC_Start_DMA+0x1b8>)
 8000cba:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f06f 0202 	mvn.w	r2, #2
 8000cc4:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	689a      	ldr	r2, [r3, #8]
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000cd4:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	6a18      	ldr	r0, [r3, #32]
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	334c      	adds	r3, #76	; 0x4c
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	68ba      	ldr	r2, [r7, #8]
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	f000 fc83 	bl	80015f0 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	689b      	ldr	r3, [r3, #8]
 8000cf0:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000cf4:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000cf8:	d108      	bne.n	8000d0c <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	689a      	ldr	r2, [r3, #8]
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000d08:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000d0a:	e00f      	b.n	8000d2c <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	689a      	ldr	r2, [r3, #8]
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000d1a:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000d1c:	e006      	b.n	8000d2c <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	2200      	movs	r2, #0
 8000d22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8000d26:	e001      	b.n	8000d2c <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000d2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3718      	adds	r7, #24
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	40012400 	.word	0x40012400
 8000d3c:	40012800 	.word	0x40012800
 8000d40:	08001243 	.word	0x08001243
 8000d44:	080012bf 	.word	0x080012bf
 8000d48:	080012db 	.word	0x080012db

08000d4c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	f003 0320 	and.w	r3, r3, #32
 8000d5e:	2b20      	cmp	r3, #32
 8000d60:	d140      	bne.n	8000de4 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f003 0302 	and.w	r3, r3, #2
 8000d6c:	2b02      	cmp	r3, #2
 8000d6e:	d139      	bne.n	8000de4 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d74:	f003 0310 	and.w	r3, r3, #16
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d105      	bne.n	8000d88 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d80:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	689b      	ldr	r3, [r3, #8]
 8000d8e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000d92:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000d96:	d11d      	bne.n	8000dd4 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d119      	bne.n	8000dd4 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	685a      	ldr	r2, [r3, #4]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f022 0220 	bic.w	r2, r2, #32
 8000dae:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000db4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dc0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d105      	bne.n	8000dd4 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dcc:	f043 0201 	orr.w	r2, r3, #1
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8000dd4:	6878      	ldr	r0, [r7, #4]
 8000dd6:	f000 f87c 	bl	8000ed2 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f06f 0212 	mvn.w	r2, #18
 8000de2:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dee:	2b80      	cmp	r3, #128	; 0x80
 8000df0:	d14f      	bne.n	8000e92 <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f003 0304 	and.w	r3, r3, #4
 8000dfc:	2b04      	cmp	r3, #4
 8000dfe:	d148      	bne.n	8000e92 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e04:	f003 0310 	and.w	r3, r3, #16
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d105      	bne.n	8000e18 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e10:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	689b      	ldr	r3, [r3, #8]
 8000e1e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8000e22:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8000e26:	d012      	beq.n	8000e4e <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d125      	bne.n	8000e82 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	689b      	ldr	r3, [r3, #8]
 8000e3c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000e40:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000e44:	d11d      	bne.n	8000e82 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d119      	bne.n	8000e82 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	685a      	ldr	r2, [r3, #4]
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e5c:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e62:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d105      	bne.n	8000e82 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e7a:	f043 0201 	orr.w	r2, r3, #1
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000e82:	6878      	ldr	r0, [r7, #4]
 8000e84:	f000 fa43 	bl	800130e <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f06f 020c 	mvn.w	r2, #12
 8000e90:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e9c:	2b40      	cmp	r3, #64	; 0x40
 8000e9e:	d114      	bne.n	8000eca <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f003 0301 	and.w	r3, r3, #1
 8000eaa:	2b01      	cmp	r3, #1
 8000eac:	d10d      	bne.n	8000eca <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eb2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000eba:	6878      	ldr	r0, [r7, #4]
 8000ebc:	f000 f81b 	bl	8000ef6 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f06f 0201 	mvn.w	r2, #1
 8000ec8:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8000eca:	bf00      	nop
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}

08000ed2 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	b083      	sub	sp, #12
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000eda:	bf00      	nop
 8000edc:	370c      	adds	r7, #12
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bc80      	pop	{r7}
 8000ee2:	4770      	bx	lr

08000ee4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000eec:	bf00      	nop
 8000eee:	370c      	adds	r7, #12
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bc80      	pop	{r7}
 8000ef4:	4770      	bx	lr

08000ef6 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	b083      	sub	sp, #12
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8000efe:	bf00      	nop
 8000f00:	370c      	adds	r7, #12
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bc80      	pop	{r7}
 8000f06:	4770      	bx	lr

08000f08 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000f10:	bf00      	nop
 8000f12:	370c      	adds	r7, #12
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bc80      	pop	{r7}
 8000f18:	4770      	bx	lr
	...

08000f1c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000f1c:	b480      	push	{r7}
 8000f1e:	b085      	sub	sp, #20
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
 8000f24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f26:	2300      	movs	r3, #0
 8000f28:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000f34:	2b01      	cmp	r3, #1
 8000f36:	d101      	bne.n	8000f3c <HAL_ADC_ConfigChannel+0x20>
 8000f38:	2302      	movs	r3, #2
 8000f3a:	e0dc      	b.n	80010f6 <HAL_ADC_ConfigChannel+0x1da>
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2201      	movs	r2, #1
 8000f40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	2b06      	cmp	r3, #6
 8000f4a:	d81c      	bhi.n	8000f86 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	685a      	ldr	r2, [r3, #4]
 8000f56:	4613      	mov	r3, r2
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	4413      	add	r3, r2
 8000f5c:	3b05      	subs	r3, #5
 8000f5e:	221f      	movs	r2, #31
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	43db      	mvns	r3, r3
 8000f66:	4019      	ands	r1, r3
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	6818      	ldr	r0, [r3, #0]
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685a      	ldr	r2, [r3, #4]
 8000f70:	4613      	mov	r3, r2
 8000f72:	009b      	lsls	r3, r3, #2
 8000f74:	4413      	add	r3, r2
 8000f76:	3b05      	subs	r3, #5
 8000f78:	fa00 f203 	lsl.w	r2, r0, r3
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	430a      	orrs	r2, r1
 8000f82:	635a      	str	r2, [r3, #52]	; 0x34
 8000f84:	e03c      	b.n	8001000 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	2b0c      	cmp	r3, #12
 8000f8c:	d81c      	bhi.n	8000fc8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	685a      	ldr	r2, [r3, #4]
 8000f98:	4613      	mov	r3, r2
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	4413      	add	r3, r2
 8000f9e:	3b23      	subs	r3, #35	; 0x23
 8000fa0:	221f      	movs	r2, #31
 8000fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa6:	43db      	mvns	r3, r3
 8000fa8:	4019      	ands	r1, r3
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	6818      	ldr	r0, [r3, #0]
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	685a      	ldr	r2, [r3, #4]
 8000fb2:	4613      	mov	r3, r2
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	4413      	add	r3, r2
 8000fb8:	3b23      	subs	r3, #35	; 0x23
 8000fba:	fa00 f203 	lsl.w	r2, r0, r3
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	430a      	orrs	r2, r1
 8000fc4:	631a      	str	r2, [r3, #48]	; 0x30
 8000fc6:	e01b      	b.n	8001000 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	685a      	ldr	r2, [r3, #4]
 8000fd2:	4613      	mov	r3, r2
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	4413      	add	r3, r2
 8000fd8:	3b41      	subs	r3, #65	; 0x41
 8000fda:	221f      	movs	r2, #31
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	43db      	mvns	r3, r3
 8000fe2:	4019      	ands	r1, r3
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	6818      	ldr	r0, [r3, #0]
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685a      	ldr	r2, [r3, #4]
 8000fec:	4613      	mov	r3, r2
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	4413      	add	r3, r2
 8000ff2:	3b41      	subs	r3, #65	; 0x41
 8000ff4:	fa00 f203 	lsl.w	r2, r0, r3
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	430a      	orrs	r2, r1
 8000ffe:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	2b09      	cmp	r3, #9
 8001006:	d91c      	bls.n	8001042 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	68d9      	ldr	r1, [r3, #12]
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	4613      	mov	r3, r2
 8001014:	005b      	lsls	r3, r3, #1
 8001016:	4413      	add	r3, r2
 8001018:	3b1e      	subs	r3, #30
 800101a:	2207      	movs	r2, #7
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	43db      	mvns	r3, r3
 8001022:	4019      	ands	r1, r3
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	6898      	ldr	r0, [r3, #8]
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	4613      	mov	r3, r2
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	4413      	add	r3, r2
 8001032:	3b1e      	subs	r3, #30
 8001034:	fa00 f203 	lsl.w	r2, r0, r3
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	430a      	orrs	r2, r1
 800103e:	60da      	str	r2, [r3, #12]
 8001040:	e019      	b.n	8001076 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	6919      	ldr	r1, [r3, #16]
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	4613      	mov	r3, r2
 800104e:	005b      	lsls	r3, r3, #1
 8001050:	4413      	add	r3, r2
 8001052:	2207      	movs	r2, #7
 8001054:	fa02 f303 	lsl.w	r3, r2, r3
 8001058:	43db      	mvns	r3, r3
 800105a:	4019      	ands	r1, r3
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	6898      	ldr	r0, [r3, #8]
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	4613      	mov	r3, r2
 8001066:	005b      	lsls	r3, r3, #1
 8001068:	4413      	add	r3, r2
 800106a:	fa00 f203 	lsl.w	r2, r0, r3
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	430a      	orrs	r2, r1
 8001074:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	2b10      	cmp	r3, #16
 800107c:	d003      	beq.n	8001086 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001082:	2b11      	cmp	r3, #17
 8001084:	d132      	bne.n	80010ec <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a1d      	ldr	r2, [pc, #116]	; (8001100 <HAL_ADC_ConfigChannel+0x1e4>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d125      	bne.n	80010dc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	689b      	ldr	r3, [r3, #8]
 8001096:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800109a:	2b00      	cmp	r3, #0
 800109c:	d126      	bne.n	80010ec <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	689a      	ldr	r2, [r3, #8]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80010ac:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	2b10      	cmp	r3, #16
 80010b4:	d11a      	bne.n	80010ec <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80010b6:	4b13      	ldr	r3, [pc, #76]	; (8001104 <HAL_ADC_ConfigChannel+0x1e8>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4a13      	ldr	r2, [pc, #76]	; (8001108 <HAL_ADC_ConfigChannel+0x1ec>)
 80010bc:	fba2 2303 	umull	r2, r3, r2, r3
 80010c0:	0c9a      	lsrs	r2, r3, #18
 80010c2:	4613      	mov	r3, r2
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	4413      	add	r3, r2
 80010c8:	005b      	lsls	r3, r3, #1
 80010ca:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80010cc:	e002      	b.n	80010d4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80010ce:	68bb      	ldr	r3, [r7, #8]
 80010d0:	3b01      	subs	r3, #1
 80010d2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d1f9      	bne.n	80010ce <HAL_ADC_ConfigChannel+0x1b2>
 80010da:	e007      	b.n	80010ec <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010e0:	f043 0220 	orr.w	r2, r3, #32
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80010e8:	2301      	movs	r3, #1
 80010ea:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2200      	movs	r2, #0
 80010f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80010f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3714      	adds	r7, #20
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bc80      	pop	{r7}
 80010fe:	4770      	bx	lr
 8001100:	40012400 	.word	0x40012400
 8001104:	20000008 	.word	0x20000008
 8001108:	431bde83 	.word	0x431bde83

0800110c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001114:	2300      	movs	r3, #0
 8001116:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001118:	2300      	movs	r3, #0
 800111a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	689b      	ldr	r3, [r3, #8]
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	2b01      	cmp	r3, #1
 8001128:	d040      	beq.n	80011ac <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	689a      	ldr	r2, [r3, #8]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f042 0201 	orr.w	r2, r2, #1
 8001138:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800113a:	4b1f      	ldr	r3, [pc, #124]	; (80011b8 <ADC_Enable+0xac>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a1f      	ldr	r2, [pc, #124]	; (80011bc <ADC_Enable+0xb0>)
 8001140:	fba2 2303 	umull	r2, r3, r2, r3
 8001144:	0c9b      	lsrs	r3, r3, #18
 8001146:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001148:	e002      	b.n	8001150 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800114a:	68bb      	ldr	r3, [r7, #8]
 800114c:	3b01      	subs	r3, #1
 800114e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d1f9      	bne.n	800114a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001156:	f7ff fc15 	bl	8000984 <HAL_GetTick>
 800115a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800115c:	e01f      	b.n	800119e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800115e:	f7ff fc11 	bl	8000984 <HAL_GetTick>
 8001162:	4602      	mov	r2, r0
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	1ad3      	subs	r3, r2, r3
 8001168:	2b02      	cmp	r3, #2
 800116a:	d918      	bls.n	800119e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	689b      	ldr	r3, [r3, #8]
 8001172:	f003 0301 	and.w	r3, r3, #1
 8001176:	2b01      	cmp	r3, #1
 8001178:	d011      	beq.n	800119e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800117e:	f043 0210 	orr.w	r2, r3, #16
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800118a:	f043 0201 	orr.w	r2, r3, #1
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2200      	movs	r2, #0
 8001196:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800119a:	2301      	movs	r3, #1
 800119c:	e007      	b.n	80011ae <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	689b      	ldr	r3, [r3, #8]
 80011a4:	f003 0301 	and.w	r3, r3, #1
 80011a8:	2b01      	cmp	r3, #1
 80011aa:	d1d8      	bne.n	800115e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80011ac:	2300      	movs	r3, #0
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3710      	adds	r7, #16
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	20000008 	.word	0x20000008
 80011bc:	431bde83 	.word	0x431bde83

080011c0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80011c8:	2300      	movs	r3, #0
 80011ca:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	f003 0301 	and.w	r3, r3, #1
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d12e      	bne.n	8001238 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	689a      	ldr	r2, [r3, #8]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f022 0201 	bic.w	r2, r2, #1
 80011e8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80011ea:	f7ff fbcb 	bl	8000984 <HAL_GetTick>
 80011ee:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80011f0:	e01b      	b.n	800122a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80011f2:	f7ff fbc7 	bl	8000984 <HAL_GetTick>
 80011f6:	4602      	mov	r2, r0
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	1ad3      	subs	r3, r2, r3
 80011fc:	2b02      	cmp	r3, #2
 80011fe:	d914      	bls.n	800122a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	689b      	ldr	r3, [r3, #8]
 8001206:	f003 0301 	and.w	r3, r3, #1
 800120a:	2b01      	cmp	r3, #1
 800120c:	d10d      	bne.n	800122a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001212:	f043 0210 	orr.w	r2, r3, #16
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800121e:	f043 0201 	orr.w	r2, r3, #1
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001226:	2301      	movs	r3, #1
 8001228:	e007      	b.n	800123a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	f003 0301 	and.w	r3, r3, #1
 8001234:	2b01      	cmp	r3, #1
 8001236:	d0dc      	beq.n	80011f2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001238:	2300      	movs	r3, #0
}
 800123a:	4618      	mov	r0, r3
 800123c:	3710      	adds	r7, #16
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}

08001242 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001242:	b580      	push	{r7, lr}
 8001244:	b084      	sub	sp, #16
 8001246:	af00      	add	r7, sp, #0
 8001248:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800124e:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001254:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001258:	2b00      	cmp	r3, #0
 800125a:	d127      	bne.n	80012ac <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001260:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001272:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001276:	d115      	bne.n	80012a4 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800127c:	2b00      	cmp	r3, #0
 800127e:	d111      	bne.n	80012a4 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001284:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001290:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001294:	2b00      	cmp	r3, #0
 8001296:	d105      	bne.n	80012a4 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800129c:	f043 0201 	orr.w	r2, r3, #1
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80012a4:	68f8      	ldr	r0, [r7, #12]
 80012a6:	f7ff fe14 	bl	8000ed2 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80012aa:	e004      	b.n	80012b6 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	6a1b      	ldr	r3, [r3, #32]
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	6878      	ldr	r0, [r7, #4]
 80012b4:	4798      	blx	r3
}
 80012b6:	bf00      	nop
 80012b8:	3710      	adds	r7, #16
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}

080012be <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80012be:	b580      	push	{r7, lr}
 80012c0:	b084      	sub	sp, #16
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ca:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80012cc:	68f8      	ldr	r0, [r7, #12]
 80012ce:	f7ff fe09 	bl	8000ee4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80012d2:	bf00      	nop
 80012d4:	3710      	adds	r7, #16
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}

080012da <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80012da:	b580      	push	{r7, lr}
 80012dc:	b084      	sub	sp, #16
 80012de:	af00      	add	r7, sp, #0
 80012e0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e6:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ec:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012f8:	f043 0204 	orr.w	r2, r3, #4
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001300:	68f8      	ldr	r0, [r7, #12]
 8001302:	f7ff fe01 	bl	8000f08 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001306:	bf00      	nop
 8001308:	3710      	adds	r7, #16
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}

0800130e <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800130e:	b480      	push	{r7}
 8001310:	b083      	sub	sp, #12
 8001312:	af00      	add	r7, sp, #0
 8001314:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001316:	bf00      	nop
 8001318:	370c      	adds	r7, #12
 800131a:	46bd      	mov	sp, r7
 800131c:	bc80      	pop	{r7}
 800131e:	4770      	bx	lr

08001320 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001320:	b480      	push	{r7}
 8001322:	b085      	sub	sp, #20
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	f003 0307 	and.w	r3, r3, #7
 800132e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001330:	4b0c      	ldr	r3, [pc, #48]	; (8001364 <__NVIC_SetPriorityGrouping+0x44>)
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001336:	68ba      	ldr	r2, [r7, #8]
 8001338:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800133c:	4013      	ands	r3, r2
 800133e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001348:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800134c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001350:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001352:	4a04      	ldr	r2, [pc, #16]	; (8001364 <__NVIC_SetPriorityGrouping+0x44>)
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	60d3      	str	r3, [r2, #12]
}
 8001358:	bf00      	nop
 800135a:	3714      	adds	r7, #20
 800135c:	46bd      	mov	sp, r7
 800135e:	bc80      	pop	{r7}
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	e000ed00 	.word	0xe000ed00

08001368 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800136c:	4b04      	ldr	r3, [pc, #16]	; (8001380 <__NVIC_GetPriorityGrouping+0x18>)
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	0a1b      	lsrs	r3, r3, #8
 8001372:	f003 0307 	and.w	r3, r3, #7
}
 8001376:	4618      	mov	r0, r3
 8001378:	46bd      	mov	sp, r7
 800137a:	bc80      	pop	{r7}
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	e000ed00 	.word	0xe000ed00

08001384 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	4603      	mov	r3, r0
 800138c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800138e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001392:	2b00      	cmp	r3, #0
 8001394:	db0b      	blt.n	80013ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001396:	79fb      	ldrb	r3, [r7, #7]
 8001398:	f003 021f 	and.w	r2, r3, #31
 800139c:	4906      	ldr	r1, [pc, #24]	; (80013b8 <__NVIC_EnableIRQ+0x34>)
 800139e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a2:	095b      	lsrs	r3, r3, #5
 80013a4:	2001      	movs	r0, #1
 80013a6:	fa00 f202 	lsl.w	r2, r0, r2
 80013aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013ae:	bf00      	nop
 80013b0:	370c      	adds	r7, #12
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bc80      	pop	{r7}
 80013b6:	4770      	bx	lr
 80013b8:	e000e100 	.word	0xe000e100

080013bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	4603      	mov	r3, r0
 80013c4:	6039      	str	r1, [r7, #0]
 80013c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	db0a      	blt.n	80013e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	b2da      	uxtb	r2, r3
 80013d4:	490c      	ldr	r1, [pc, #48]	; (8001408 <__NVIC_SetPriority+0x4c>)
 80013d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013da:	0112      	lsls	r2, r2, #4
 80013dc:	b2d2      	uxtb	r2, r2
 80013de:	440b      	add	r3, r1
 80013e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013e4:	e00a      	b.n	80013fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	b2da      	uxtb	r2, r3
 80013ea:	4908      	ldr	r1, [pc, #32]	; (800140c <__NVIC_SetPriority+0x50>)
 80013ec:	79fb      	ldrb	r3, [r7, #7]
 80013ee:	f003 030f 	and.w	r3, r3, #15
 80013f2:	3b04      	subs	r3, #4
 80013f4:	0112      	lsls	r2, r2, #4
 80013f6:	b2d2      	uxtb	r2, r2
 80013f8:	440b      	add	r3, r1
 80013fa:	761a      	strb	r2, [r3, #24]
}
 80013fc:	bf00      	nop
 80013fe:	370c      	adds	r7, #12
 8001400:	46bd      	mov	sp, r7
 8001402:	bc80      	pop	{r7}
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	e000e100 	.word	0xe000e100
 800140c:	e000ed00 	.word	0xe000ed00

08001410 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001410:	b480      	push	{r7}
 8001412:	b089      	sub	sp, #36	; 0x24
 8001414:	af00      	add	r7, sp, #0
 8001416:	60f8      	str	r0, [r7, #12]
 8001418:	60b9      	str	r1, [r7, #8]
 800141a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	f003 0307 	and.w	r3, r3, #7
 8001422:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	f1c3 0307 	rsb	r3, r3, #7
 800142a:	2b04      	cmp	r3, #4
 800142c:	bf28      	it	cs
 800142e:	2304      	movcs	r3, #4
 8001430:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	3304      	adds	r3, #4
 8001436:	2b06      	cmp	r3, #6
 8001438:	d902      	bls.n	8001440 <NVIC_EncodePriority+0x30>
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	3b03      	subs	r3, #3
 800143e:	e000      	b.n	8001442 <NVIC_EncodePriority+0x32>
 8001440:	2300      	movs	r3, #0
 8001442:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001444:	f04f 32ff 	mov.w	r2, #4294967295
 8001448:	69bb      	ldr	r3, [r7, #24]
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	43da      	mvns	r2, r3
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	401a      	ands	r2, r3
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001458:	f04f 31ff 	mov.w	r1, #4294967295
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	fa01 f303 	lsl.w	r3, r1, r3
 8001462:	43d9      	mvns	r1, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001468:	4313      	orrs	r3, r2
         );
}
 800146a:	4618      	mov	r0, r3
 800146c:	3724      	adds	r7, #36	; 0x24
 800146e:	46bd      	mov	sp, r7
 8001470:	bc80      	pop	{r7}
 8001472:	4770      	bx	lr

08001474 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	3b01      	subs	r3, #1
 8001480:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001484:	d301      	bcc.n	800148a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001486:	2301      	movs	r3, #1
 8001488:	e00f      	b.n	80014aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800148a:	4a0a      	ldr	r2, [pc, #40]	; (80014b4 <SysTick_Config+0x40>)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	3b01      	subs	r3, #1
 8001490:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001492:	210f      	movs	r1, #15
 8001494:	f04f 30ff 	mov.w	r0, #4294967295
 8001498:	f7ff ff90 	bl	80013bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800149c:	4b05      	ldr	r3, [pc, #20]	; (80014b4 <SysTick_Config+0x40>)
 800149e:	2200      	movs	r2, #0
 80014a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014a2:	4b04      	ldr	r3, [pc, #16]	; (80014b4 <SysTick_Config+0x40>)
 80014a4:	2207      	movs	r2, #7
 80014a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014a8:	2300      	movs	r3, #0
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	e000e010 	.word	0xe000e010

080014b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014c0:	6878      	ldr	r0, [r7, #4]
 80014c2:	f7ff ff2d 	bl	8001320 <__NVIC_SetPriorityGrouping>
}
 80014c6:	bf00      	nop
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}

080014ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b086      	sub	sp, #24
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	4603      	mov	r3, r0
 80014d6:	60b9      	str	r1, [r7, #8]
 80014d8:	607a      	str	r2, [r7, #4]
 80014da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014dc:	2300      	movs	r3, #0
 80014de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014e0:	f7ff ff42 	bl	8001368 <__NVIC_GetPriorityGrouping>
 80014e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014e6:	687a      	ldr	r2, [r7, #4]
 80014e8:	68b9      	ldr	r1, [r7, #8]
 80014ea:	6978      	ldr	r0, [r7, #20]
 80014ec:	f7ff ff90 	bl	8001410 <NVIC_EncodePriority>
 80014f0:	4602      	mov	r2, r0
 80014f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014f6:	4611      	mov	r1, r2
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff ff5f 	bl	80013bc <__NVIC_SetPriority>
}
 80014fe:	bf00      	nop
 8001500:	3718      	adds	r7, #24
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}

08001506 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001506:	b580      	push	{r7, lr}
 8001508:	b082      	sub	sp, #8
 800150a:	af00      	add	r7, sp, #0
 800150c:	4603      	mov	r3, r0
 800150e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001510:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff ff35 	bl	8001384 <__NVIC_EnableIRQ>
}
 800151a:	bf00      	nop
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}

08001522 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001522:	b580      	push	{r7, lr}
 8001524:	b082      	sub	sp, #8
 8001526:	af00      	add	r7, sp, #0
 8001528:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f7ff ffa2 	bl	8001474 <SysTick_Config>
 8001530:	4603      	mov	r3, r0
}
 8001532:	4618      	mov	r0, r3
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
	...

0800153c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800153c:	b480      	push	{r7}
 800153e:	b085      	sub	sp, #20
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001544:	2300      	movs	r3, #0
 8001546:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d101      	bne.n	8001552 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e043      	b.n	80015da <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	461a      	mov	r2, r3
 8001558:	4b22      	ldr	r3, [pc, #136]	; (80015e4 <HAL_DMA_Init+0xa8>)
 800155a:	4413      	add	r3, r2
 800155c:	4a22      	ldr	r2, [pc, #136]	; (80015e8 <HAL_DMA_Init+0xac>)
 800155e:	fba2 2303 	umull	r2, r3, r2, r3
 8001562:	091b      	lsrs	r3, r3, #4
 8001564:	009a      	lsls	r2, r3, #2
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4a1f      	ldr	r2, [pc, #124]	; (80015ec <HAL_DMA_Init+0xb0>)
 800156e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2202      	movs	r2, #2
 8001574:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001586:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800158a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001594:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	68db      	ldr	r3, [r3, #12]
 800159a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	695b      	ldr	r3, [r3, #20]
 80015a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	69db      	ldr	r3, [r3, #28]
 80015b2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80015b4:	68fa      	ldr	r2, [r7, #12]
 80015b6:	4313      	orrs	r3, r2
 80015b8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	68fa      	ldr	r2, [r7, #12]
 80015c0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2200      	movs	r2, #0
 80015c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2201      	movs	r2, #1
 80015cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2200      	movs	r2, #0
 80015d4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80015d8:	2300      	movs	r3, #0
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3714      	adds	r7, #20
 80015de:	46bd      	mov	sp, r7
 80015e0:	bc80      	pop	{r7}
 80015e2:	4770      	bx	lr
 80015e4:	bffdfff8 	.word	0xbffdfff8
 80015e8:	cccccccd 	.word	0xcccccccd
 80015ec:	40020000 	.word	0x40020000

080015f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b086      	sub	sp, #24
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	60f8      	str	r0, [r7, #12]
 80015f8:	60b9      	str	r1, [r7, #8]
 80015fa:	607a      	str	r2, [r7, #4]
 80015fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80015fe:	2300      	movs	r3, #0
 8001600:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001608:	2b01      	cmp	r3, #1
 800160a:	d101      	bne.n	8001610 <HAL_DMA_Start_IT+0x20>
 800160c:	2302      	movs	r3, #2
 800160e:	e04a      	b.n	80016a6 <HAL_DMA_Start_IT+0xb6>
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	2201      	movs	r2, #1
 8001614:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800161e:	2b01      	cmp	r3, #1
 8001620:	d13a      	bne.n	8001698 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	2202      	movs	r2, #2
 8001626:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	2200      	movs	r2, #0
 800162e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f022 0201 	bic.w	r2, r2, #1
 800163e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	687a      	ldr	r2, [r7, #4]
 8001644:	68b9      	ldr	r1, [r7, #8]
 8001646:	68f8      	ldr	r0, [r7, #12]
 8001648:	f000 f972 	bl	8001930 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001650:	2b00      	cmp	r3, #0
 8001652:	d008      	beq.n	8001666 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f042 020e 	orr.w	r2, r2, #14
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	e00f      	b.n	8001686 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f022 0204 	bic.w	r2, r2, #4
 8001674:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f042 020a 	orr.w	r2, r2, #10
 8001684:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f042 0201 	orr.w	r2, r2, #1
 8001694:	601a      	str	r2, [r3, #0]
 8001696:	e005      	b.n	80016a4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	2200      	movs	r2, #0
 800169c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80016a0:	2302      	movs	r3, #2
 80016a2:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80016a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3718      	adds	r7, #24
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80016ae:	b480      	push	{r7}
 80016b0:	b085      	sub	sp, #20
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016b6:	2300      	movs	r3, #0
 80016b8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	d008      	beq.n	80016d6 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2204      	movs	r2, #4
 80016c8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2200      	movs	r2, #0
 80016ce:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e020      	b.n	8001718 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f022 020e 	bic.w	r2, r2, #14
 80016e4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f022 0201 	bic.w	r2, r2, #1
 80016f4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016fe:	2101      	movs	r1, #1
 8001700:	fa01 f202 	lsl.w	r2, r1, r2
 8001704:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2201      	movs	r2, #1
 800170a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2200      	movs	r2, #0
 8001712:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001716:	7bfb      	ldrb	r3, [r7, #15]
}
 8001718:	4618      	mov	r0, r3
 800171a:	3714      	adds	r7, #20
 800171c:	46bd      	mov	sp, r7
 800171e:	bc80      	pop	{r7}
 8001720:	4770      	bx	lr
	...

08001724 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001740:	2204      	movs	r2, #4
 8001742:	409a      	lsls	r2, r3
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	4013      	ands	r3, r2
 8001748:	2b00      	cmp	r3, #0
 800174a:	d04f      	beq.n	80017ec <HAL_DMA_IRQHandler+0xc8>
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	f003 0304 	and.w	r3, r3, #4
 8001752:	2b00      	cmp	r3, #0
 8001754:	d04a      	beq.n	80017ec <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 0320 	and.w	r3, r3, #32
 8001760:	2b00      	cmp	r3, #0
 8001762:	d107      	bne.n	8001774 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f022 0204 	bic.w	r2, r2, #4
 8001772:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a66      	ldr	r2, [pc, #408]	; (8001914 <HAL_DMA_IRQHandler+0x1f0>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d029      	beq.n	80017d2 <HAL_DMA_IRQHandler+0xae>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a65      	ldr	r2, [pc, #404]	; (8001918 <HAL_DMA_IRQHandler+0x1f4>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d022      	beq.n	80017ce <HAL_DMA_IRQHandler+0xaa>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a63      	ldr	r2, [pc, #396]	; (800191c <HAL_DMA_IRQHandler+0x1f8>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d01a      	beq.n	80017c8 <HAL_DMA_IRQHandler+0xa4>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a62      	ldr	r2, [pc, #392]	; (8001920 <HAL_DMA_IRQHandler+0x1fc>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d012      	beq.n	80017c2 <HAL_DMA_IRQHandler+0x9e>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a60      	ldr	r2, [pc, #384]	; (8001924 <HAL_DMA_IRQHandler+0x200>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d00a      	beq.n	80017bc <HAL_DMA_IRQHandler+0x98>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a5f      	ldr	r2, [pc, #380]	; (8001928 <HAL_DMA_IRQHandler+0x204>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d102      	bne.n	80017b6 <HAL_DMA_IRQHandler+0x92>
 80017b0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017b4:	e00e      	b.n	80017d4 <HAL_DMA_IRQHandler+0xb0>
 80017b6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80017ba:	e00b      	b.n	80017d4 <HAL_DMA_IRQHandler+0xb0>
 80017bc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80017c0:	e008      	b.n	80017d4 <HAL_DMA_IRQHandler+0xb0>
 80017c2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80017c6:	e005      	b.n	80017d4 <HAL_DMA_IRQHandler+0xb0>
 80017c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017cc:	e002      	b.n	80017d4 <HAL_DMA_IRQHandler+0xb0>
 80017ce:	2340      	movs	r3, #64	; 0x40
 80017d0:	e000      	b.n	80017d4 <HAL_DMA_IRQHandler+0xb0>
 80017d2:	2304      	movs	r3, #4
 80017d4:	4a55      	ldr	r2, [pc, #340]	; (800192c <HAL_DMA_IRQHandler+0x208>)
 80017d6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017dc:	2b00      	cmp	r3, #0
 80017de:	f000 8094 	beq.w	800190a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80017ea:	e08e      	b.n	800190a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f0:	2202      	movs	r2, #2
 80017f2:	409a      	lsls	r2, r3
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	4013      	ands	r3, r2
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d056      	beq.n	80018aa <HAL_DMA_IRQHandler+0x186>
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	f003 0302 	and.w	r3, r3, #2
 8001802:	2b00      	cmp	r3, #0
 8001804:	d051      	beq.n	80018aa <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 0320 	and.w	r3, r3, #32
 8001810:	2b00      	cmp	r3, #0
 8001812:	d10b      	bne.n	800182c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f022 020a 	bic.w	r2, r2, #10
 8001822:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2201      	movs	r2, #1
 8001828:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a38      	ldr	r2, [pc, #224]	; (8001914 <HAL_DMA_IRQHandler+0x1f0>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d029      	beq.n	800188a <HAL_DMA_IRQHandler+0x166>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a37      	ldr	r2, [pc, #220]	; (8001918 <HAL_DMA_IRQHandler+0x1f4>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d022      	beq.n	8001886 <HAL_DMA_IRQHandler+0x162>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a35      	ldr	r2, [pc, #212]	; (800191c <HAL_DMA_IRQHandler+0x1f8>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d01a      	beq.n	8001880 <HAL_DMA_IRQHandler+0x15c>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a34      	ldr	r2, [pc, #208]	; (8001920 <HAL_DMA_IRQHandler+0x1fc>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d012      	beq.n	800187a <HAL_DMA_IRQHandler+0x156>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a32      	ldr	r2, [pc, #200]	; (8001924 <HAL_DMA_IRQHandler+0x200>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d00a      	beq.n	8001874 <HAL_DMA_IRQHandler+0x150>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a31      	ldr	r2, [pc, #196]	; (8001928 <HAL_DMA_IRQHandler+0x204>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d102      	bne.n	800186e <HAL_DMA_IRQHandler+0x14a>
 8001868:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800186c:	e00e      	b.n	800188c <HAL_DMA_IRQHandler+0x168>
 800186e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001872:	e00b      	b.n	800188c <HAL_DMA_IRQHandler+0x168>
 8001874:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001878:	e008      	b.n	800188c <HAL_DMA_IRQHandler+0x168>
 800187a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800187e:	e005      	b.n	800188c <HAL_DMA_IRQHandler+0x168>
 8001880:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001884:	e002      	b.n	800188c <HAL_DMA_IRQHandler+0x168>
 8001886:	2320      	movs	r3, #32
 8001888:	e000      	b.n	800188c <HAL_DMA_IRQHandler+0x168>
 800188a:	2302      	movs	r3, #2
 800188c:	4a27      	ldr	r2, [pc, #156]	; (800192c <HAL_DMA_IRQHandler+0x208>)
 800188e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2200      	movs	r2, #0
 8001894:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800189c:	2b00      	cmp	r3, #0
 800189e:	d034      	beq.n	800190a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80018a8:	e02f      	b.n	800190a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ae:	2208      	movs	r2, #8
 80018b0:	409a      	lsls	r2, r3
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	4013      	ands	r3, r2
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d028      	beq.n	800190c <HAL_DMA_IRQHandler+0x1e8>
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	f003 0308 	and.w	r3, r3, #8
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d023      	beq.n	800190c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f022 020e 	bic.w	r2, r2, #14
 80018d2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018dc:	2101      	movs	r1, #1
 80018de:	fa01 f202 	lsl.w	r2, r1, r2
 80018e2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2201      	movs	r2, #1
 80018e8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2201      	movs	r2, #1
 80018ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2200      	movs	r2, #0
 80018f6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d004      	beq.n	800190c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	4798      	blx	r3
    }
  }
  return;
 800190a:	bf00      	nop
 800190c:	bf00      	nop
}
 800190e:	3710      	adds	r7, #16
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	40020008 	.word	0x40020008
 8001918:	4002001c 	.word	0x4002001c
 800191c:	40020030 	.word	0x40020030
 8001920:	40020044 	.word	0x40020044
 8001924:	40020058 	.word	0x40020058
 8001928:	4002006c 	.word	0x4002006c
 800192c:	40020000 	.word	0x40020000

08001930 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001930:	b480      	push	{r7}
 8001932:	b085      	sub	sp, #20
 8001934:	af00      	add	r7, sp, #0
 8001936:	60f8      	str	r0, [r7, #12]
 8001938:	60b9      	str	r1, [r7, #8]
 800193a:	607a      	str	r2, [r7, #4]
 800193c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001946:	2101      	movs	r1, #1
 8001948:	fa01 f202 	lsl.w	r2, r1, r2
 800194c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	683a      	ldr	r2, [r7, #0]
 8001954:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	2b10      	cmp	r3, #16
 800195c:	d108      	bne.n	8001970 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	68ba      	ldr	r2, [r7, #8]
 800196c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800196e:	e007      	b.n	8001980 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	68ba      	ldr	r2, [r7, #8]
 8001976:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	687a      	ldr	r2, [r7, #4]
 800197e:	60da      	str	r2, [r3, #12]
}
 8001980:	bf00      	nop
 8001982:	3714      	adds	r7, #20
 8001984:	46bd      	mov	sp, r7
 8001986:	bc80      	pop	{r7}
 8001988:	4770      	bx	lr
	...

0800198c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800198c:	b480      	push	{r7}
 800198e:	b08b      	sub	sp, #44	; 0x2c
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001996:	2300      	movs	r3, #0
 8001998:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800199a:	2300      	movs	r3, #0
 800199c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800199e:	e169      	b.n	8001c74 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80019a0:	2201      	movs	r2, #1
 80019a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a4:	fa02 f303 	lsl.w	r3, r2, r3
 80019a8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	69fa      	ldr	r2, [r7, #28]
 80019b0:	4013      	ands	r3, r2
 80019b2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80019b4:	69ba      	ldr	r2, [r7, #24]
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	f040 8158 	bne.w	8001c6e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	4a9a      	ldr	r2, [pc, #616]	; (8001c2c <HAL_GPIO_Init+0x2a0>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d05e      	beq.n	8001a86 <HAL_GPIO_Init+0xfa>
 80019c8:	4a98      	ldr	r2, [pc, #608]	; (8001c2c <HAL_GPIO_Init+0x2a0>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d875      	bhi.n	8001aba <HAL_GPIO_Init+0x12e>
 80019ce:	4a98      	ldr	r2, [pc, #608]	; (8001c30 <HAL_GPIO_Init+0x2a4>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d058      	beq.n	8001a86 <HAL_GPIO_Init+0xfa>
 80019d4:	4a96      	ldr	r2, [pc, #600]	; (8001c30 <HAL_GPIO_Init+0x2a4>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d86f      	bhi.n	8001aba <HAL_GPIO_Init+0x12e>
 80019da:	4a96      	ldr	r2, [pc, #600]	; (8001c34 <HAL_GPIO_Init+0x2a8>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d052      	beq.n	8001a86 <HAL_GPIO_Init+0xfa>
 80019e0:	4a94      	ldr	r2, [pc, #592]	; (8001c34 <HAL_GPIO_Init+0x2a8>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d869      	bhi.n	8001aba <HAL_GPIO_Init+0x12e>
 80019e6:	4a94      	ldr	r2, [pc, #592]	; (8001c38 <HAL_GPIO_Init+0x2ac>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d04c      	beq.n	8001a86 <HAL_GPIO_Init+0xfa>
 80019ec:	4a92      	ldr	r2, [pc, #584]	; (8001c38 <HAL_GPIO_Init+0x2ac>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d863      	bhi.n	8001aba <HAL_GPIO_Init+0x12e>
 80019f2:	4a92      	ldr	r2, [pc, #584]	; (8001c3c <HAL_GPIO_Init+0x2b0>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d046      	beq.n	8001a86 <HAL_GPIO_Init+0xfa>
 80019f8:	4a90      	ldr	r2, [pc, #576]	; (8001c3c <HAL_GPIO_Init+0x2b0>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d85d      	bhi.n	8001aba <HAL_GPIO_Init+0x12e>
 80019fe:	2b12      	cmp	r3, #18
 8001a00:	d82a      	bhi.n	8001a58 <HAL_GPIO_Init+0xcc>
 8001a02:	2b12      	cmp	r3, #18
 8001a04:	d859      	bhi.n	8001aba <HAL_GPIO_Init+0x12e>
 8001a06:	a201      	add	r2, pc, #4	; (adr r2, 8001a0c <HAL_GPIO_Init+0x80>)
 8001a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a0c:	08001a87 	.word	0x08001a87
 8001a10:	08001a61 	.word	0x08001a61
 8001a14:	08001a73 	.word	0x08001a73
 8001a18:	08001ab5 	.word	0x08001ab5
 8001a1c:	08001abb 	.word	0x08001abb
 8001a20:	08001abb 	.word	0x08001abb
 8001a24:	08001abb 	.word	0x08001abb
 8001a28:	08001abb 	.word	0x08001abb
 8001a2c:	08001abb 	.word	0x08001abb
 8001a30:	08001abb 	.word	0x08001abb
 8001a34:	08001abb 	.word	0x08001abb
 8001a38:	08001abb 	.word	0x08001abb
 8001a3c:	08001abb 	.word	0x08001abb
 8001a40:	08001abb 	.word	0x08001abb
 8001a44:	08001abb 	.word	0x08001abb
 8001a48:	08001abb 	.word	0x08001abb
 8001a4c:	08001abb 	.word	0x08001abb
 8001a50:	08001a69 	.word	0x08001a69
 8001a54:	08001a7d 	.word	0x08001a7d
 8001a58:	4a79      	ldr	r2, [pc, #484]	; (8001c40 <HAL_GPIO_Init+0x2b4>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d013      	beq.n	8001a86 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a5e:	e02c      	b.n	8001aba <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	623b      	str	r3, [r7, #32]
          break;
 8001a66:	e029      	b.n	8001abc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	3304      	adds	r3, #4
 8001a6e:	623b      	str	r3, [r7, #32]
          break;
 8001a70:	e024      	b.n	8001abc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	68db      	ldr	r3, [r3, #12]
 8001a76:	3308      	adds	r3, #8
 8001a78:	623b      	str	r3, [r7, #32]
          break;
 8001a7a:	e01f      	b.n	8001abc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	330c      	adds	r3, #12
 8001a82:	623b      	str	r3, [r7, #32]
          break;
 8001a84:	e01a      	b.n	8001abc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d102      	bne.n	8001a94 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a8e:	2304      	movs	r3, #4
 8001a90:	623b      	str	r3, [r7, #32]
          break;
 8001a92:	e013      	b.n	8001abc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d105      	bne.n	8001aa8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a9c:	2308      	movs	r3, #8
 8001a9e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	69fa      	ldr	r2, [r7, #28]
 8001aa4:	611a      	str	r2, [r3, #16]
          break;
 8001aa6:	e009      	b.n	8001abc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001aa8:	2308      	movs	r3, #8
 8001aaa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	69fa      	ldr	r2, [r7, #28]
 8001ab0:	615a      	str	r2, [r3, #20]
          break;
 8001ab2:	e003      	b.n	8001abc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	623b      	str	r3, [r7, #32]
          break;
 8001ab8:	e000      	b.n	8001abc <HAL_GPIO_Init+0x130>
          break;
 8001aba:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	2bff      	cmp	r3, #255	; 0xff
 8001ac0:	d801      	bhi.n	8001ac6 <HAL_GPIO_Init+0x13a>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	e001      	b.n	8001aca <HAL_GPIO_Init+0x13e>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	3304      	adds	r3, #4
 8001aca:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001acc:	69bb      	ldr	r3, [r7, #24]
 8001ace:	2bff      	cmp	r3, #255	; 0xff
 8001ad0:	d802      	bhi.n	8001ad8 <HAL_GPIO_Init+0x14c>
 8001ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	e002      	b.n	8001ade <HAL_GPIO_Init+0x152>
 8001ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ada:	3b08      	subs	r3, #8
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	210f      	movs	r1, #15
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	fa01 f303 	lsl.w	r3, r1, r3
 8001aec:	43db      	mvns	r3, r3
 8001aee:	401a      	ands	r2, r3
 8001af0:	6a39      	ldr	r1, [r7, #32]
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	fa01 f303 	lsl.w	r3, r1, r3
 8001af8:	431a      	orrs	r2, r3
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	f000 80b1 	beq.w	8001c6e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b0c:	4b4d      	ldr	r3, [pc, #308]	; (8001c44 <HAL_GPIO_Init+0x2b8>)
 8001b0e:	699b      	ldr	r3, [r3, #24]
 8001b10:	4a4c      	ldr	r2, [pc, #304]	; (8001c44 <HAL_GPIO_Init+0x2b8>)
 8001b12:	f043 0301 	orr.w	r3, r3, #1
 8001b16:	6193      	str	r3, [r2, #24]
 8001b18:	4b4a      	ldr	r3, [pc, #296]	; (8001c44 <HAL_GPIO_Init+0x2b8>)
 8001b1a:	699b      	ldr	r3, [r3, #24]
 8001b1c:	f003 0301 	and.w	r3, r3, #1
 8001b20:	60bb      	str	r3, [r7, #8]
 8001b22:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b24:	4a48      	ldr	r2, [pc, #288]	; (8001c48 <HAL_GPIO_Init+0x2bc>)
 8001b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b28:	089b      	lsrs	r3, r3, #2
 8001b2a:	3302      	adds	r3, #2
 8001b2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b30:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b34:	f003 0303 	and.w	r3, r3, #3
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	220f      	movs	r2, #15
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	43db      	mvns	r3, r3
 8001b42:	68fa      	ldr	r2, [r7, #12]
 8001b44:	4013      	ands	r3, r2
 8001b46:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	4a40      	ldr	r2, [pc, #256]	; (8001c4c <HAL_GPIO_Init+0x2c0>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d013      	beq.n	8001b78 <HAL_GPIO_Init+0x1ec>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	4a3f      	ldr	r2, [pc, #252]	; (8001c50 <HAL_GPIO_Init+0x2c4>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d00d      	beq.n	8001b74 <HAL_GPIO_Init+0x1e8>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	4a3e      	ldr	r2, [pc, #248]	; (8001c54 <HAL_GPIO_Init+0x2c8>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d007      	beq.n	8001b70 <HAL_GPIO_Init+0x1e4>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	4a3d      	ldr	r2, [pc, #244]	; (8001c58 <HAL_GPIO_Init+0x2cc>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d101      	bne.n	8001b6c <HAL_GPIO_Init+0x1e0>
 8001b68:	2303      	movs	r3, #3
 8001b6a:	e006      	b.n	8001b7a <HAL_GPIO_Init+0x1ee>
 8001b6c:	2304      	movs	r3, #4
 8001b6e:	e004      	b.n	8001b7a <HAL_GPIO_Init+0x1ee>
 8001b70:	2302      	movs	r3, #2
 8001b72:	e002      	b.n	8001b7a <HAL_GPIO_Init+0x1ee>
 8001b74:	2301      	movs	r3, #1
 8001b76:	e000      	b.n	8001b7a <HAL_GPIO_Init+0x1ee>
 8001b78:	2300      	movs	r3, #0
 8001b7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b7c:	f002 0203 	and.w	r2, r2, #3
 8001b80:	0092      	lsls	r2, r2, #2
 8001b82:	4093      	lsls	r3, r2
 8001b84:	68fa      	ldr	r2, [r7, #12]
 8001b86:	4313      	orrs	r3, r2
 8001b88:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b8a:	492f      	ldr	r1, [pc, #188]	; (8001c48 <HAL_GPIO_Init+0x2bc>)
 8001b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8e:	089b      	lsrs	r3, r3, #2
 8001b90:	3302      	adds	r3, #2
 8001b92:	68fa      	ldr	r2, [r7, #12]
 8001b94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d006      	beq.n	8001bb2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ba4:	4b2d      	ldr	r3, [pc, #180]	; (8001c5c <HAL_GPIO_Init+0x2d0>)
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	492c      	ldr	r1, [pc, #176]	; (8001c5c <HAL_GPIO_Init+0x2d0>)
 8001baa:	69bb      	ldr	r3, [r7, #24]
 8001bac:	4313      	orrs	r3, r2
 8001bae:	600b      	str	r3, [r1, #0]
 8001bb0:	e006      	b.n	8001bc0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001bb2:	4b2a      	ldr	r3, [pc, #168]	; (8001c5c <HAL_GPIO_Init+0x2d0>)
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	69bb      	ldr	r3, [r7, #24]
 8001bb8:	43db      	mvns	r3, r3
 8001bba:	4928      	ldr	r1, [pc, #160]	; (8001c5c <HAL_GPIO_Init+0x2d0>)
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d006      	beq.n	8001bda <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001bcc:	4b23      	ldr	r3, [pc, #140]	; (8001c5c <HAL_GPIO_Init+0x2d0>)
 8001bce:	685a      	ldr	r2, [r3, #4]
 8001bd0:	4922      	ldr	r1, [pc, #136]	; (8001c5c <HAL_GPIO_Init+0x2d0>)
 8001bd2:	69bb      	ldr	r3, [r7, #24]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	604b      	str	r3, [r1, #4]
 8001bd8:	e006      	b.n	8001be8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001bda:	4b20      	ldr	r3, [pc, #128]	; (8001c5c <HAL_GPIO_Init+0x2d0>)
 8001bdc:	685a      	ldr	r2, [r3, #4]
 8001bde:	69bb      	ldr	r3, [r7, #24]
 8001be0:	43db      	mvns	r3, r3
 8001be2:	491e      	ldr	r1, [pc, #120]	; (8001c5c <HAL_GPIO_Init+0x2d0>)
 8001be4:	4013      	ands	r3, r2
 8001be6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d006      	beq.n	8001c02 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001bf4:	4b19      	ldr	r3, [pc, #100]	; (8001c5c <HAL_GPIO_Init+0x2d0>)
 8001bf6:	689a      	ldr	r2, [r3, #8]
 8001bf8:	4918      	ldr	r1, [pc, #96]	; (8001c5c <HAL_GPIO_Init+0x2d0>)
 8001bfa:	69bb      	ldr	r3, [r7, #24]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	608b      	str	r3, [r1, #8]
 8001c00:	e006      	b.n	8001c10 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c02:	4b16      	ldr	r3, [pc, #88]	; (8001c5c <HAL_GPIO_Init+0x2d0>)
 8001c04:	689a      	ldr	r2, [r3, #8]
 8001c06:	69bb      	ldr	r3, [r7, #24]
 8001c08:	43db      	mvns	r3, r3
 8001c0a:	4914      	ldr	r1, [pc, #80]	; (8001c5c <HAL_GPIO_Init+0x2d0>)
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d021      	beq.n	8001c60 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c1c:	4b0f      	ldr	r3, [pc, #60]	; (8001c5c <HAL_GPIO_Init+0x2d0>)
 8001c1e:	68da      	ldr	r2, [r3, #12]
 8001c20:	490e      	ldr	r1, [pc, #56]	; (8001c5c <HAL_GPIO_Init+0x2d0>)
 8001c22:	69bb      	ldr	r3, [r7, #24]
 8001c24:	4313      	orrs	r3, r2
 8001c26:	60cb      	str	r3, [r1, #12]
 8001c28:	e021      	b.n	8001c6e <HAL_GPIO_Init+0x2e2>
 8001c2a:	bf00      	nop
 8001c2c:	10320000 	.word	0x10320000
 8001c30:	10310000 	.word	0x10310000
 8001c34:	10220000 	.word	0x10220000
 8001c38:	10210000 	.word	0x10210000
 8001c3c:	10120000 	.word	0x10120000
 8001c40:	10110000 	.word	0x10110000
 8001c44:	40021000 	.word	0x40021000
 8001c48:	40010000 	.word	0x40010000
 8001c4c:	40010800 	.word	0x40010800
 8001c50:	40010c00 	.word	0x40010c00
 8001c54:	40011000 	.word	0x40011000
 8001c58:	40011400 	.word	0x40011400
 8001c5c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c60:	4b0b      	ldr	r3, [pc, #44]	; (8001c90 <HAL_GPIO_Init+0x304>)
 8001c62:	68da      	ldr	r2, [r3, #12]
 8001c64:	69bb      	ldr	r3, [r7, #24]
 8001c66:	43db      	mvns	r3, r3
 8001c68:	4909      	ldr	r1, [pc, #36]	; (8001c90 <HAL_GPIO_Init+0x304>)
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c70:	3301      	adds	r3, #1
 8001c72:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	f47f ae8e 	bne.w	80019a0 <HAL_GPIO_Init+0x14>
  }
}
 8001c84:	bf00      	nop
 8001c86:	bf00      	nop
 8001c88:	372c      	adds	r7, #44	; 0x2c
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bc80      	pop	{r7}
 8001c8e:	4770      	bx	lr
 8001c90:	40010400 	.word	0x40010400

08001c94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	807b      	strh	r3, [r7, #2]
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ca4:	787b      	ldrb	r3, [r7, #1]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d003      	beq.n	8001cb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001caa:	887a      	ldrh	r2, [r7, #2]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001cb0:	e003      	b.n	8001cba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001cb2:	887b      	ldrh	r3, [r7, #2]
 8001cb4:	041a      	lsls	r2, r3, #16
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	611a      	str	r2, [r3, #16]
}
 8001cba:	bf00      	nop
 8001cbc:	370c      	adds	r7, #12
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bc80      	pop	{r7}
 8001cc2:	4770      	bx	lr

08001cc4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b086      	sub	sp, #24
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d101      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e272      	b.n	80021bc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0301 	and.w	r3, r3, #1
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	f000 8087 	beq.w	8001df2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ce4:	4b92      	ldr	r3, [pc, #584]	; (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f003 030c 	and.w	r3, r3, #12
 8001cec:	2b04      	cmp	r3, #4
 8001cee:	d00c      	beq.n	8001d0a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001cf0:	4b8f      	ldr	r3, [pc, #572]	; (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f003 030c 	and.w	r3, r3, #12
 8001cf8:	2b08      	cmp	r3, #8
 8001cfa:	d112      	bne.n	8001d22 <HAL_RCC_OscConfig+0x5e>
 8001cfc:	4b8c      	ldr	r3, [pc, #560]	; (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d08:	d10b      	bne.n	8001d22 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d0a:	4b89      	ldr	r3, [pc, #548]	; (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d06c      	beq.n	8001df0 <HAL_RCC_OscConfig+0x12c>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d168      	bne.n	8001df0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e24c      	b.n	80021bc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d2a:	d106      	bne.n	8001d3a <HAL_RCC_OscConfig+0x76>
 8001d2c:	4b80      	ldr	r3, [pc, #512]	; (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a7f      	ldr	r2, [pc, #508]	; (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001d32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d36:	6013      	str	r3, [r2, #0]
 8001d38:	e02e      	b.n	8001d98 <HAL_RCC_OscConfig+0xd4>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d10c      	bne.n	8001d5c <HAL_RCC_OscConfig+0x98>
 8001d42:	4b7b      	ldr	r3, [pc, #492]	; (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a7a      	ldr	r2, [pc, #488]	; (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001d48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d4c:	6013      	str	r3, [r2, #0]
 8001d4e:	4b78      	ldr	r3, [pc, #480]	; (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a77      	ldr	r2, [pc, #476]	; (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001d54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d58:	6013      	str	r3, [r2, #0]
 8001d5a:	e01d      	b.n	8001d98 <HAL_RCC_OscConfig+0xd4>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d64:	d10c      	bne.n	8001d80 <HAL_RCC_OscConfig+0xbc>
 8001d66:	4b72      	ldr	r3, [pc, #456]	; (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a71      	ldr	r2, [pc, #452]	; (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001d6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d70:	6013      	str	r3, [r2, #0]
 8001d72:	4b6f      	ldr	r3, [pc, #444]	; (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a6e      	ldr	r2, [pc, #440]	; (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001d78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d7c:	6013      	str	r3, [r2, #0]
 8001d7e:	e00b      	b.n	8001d98 <HAL_RCC_OscConfig+0xd4>
 8001d80:	4b6b      	ldr	r3, [pc, #428]	; (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a6a      	ldr	r2, [pc, #424]	; (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001d86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d8a:	6013      	str	r3, [r2, #0]
 8001d8c:	4b68      	ldr	r3, [pc, #416]	; (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a67      	ldr	r2, [pc, #412]	; (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001d92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d96:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d013      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da0:	f7fe fdf0 	bl	8000984 <HAL_GetTick>
 8001da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001da6:	e008      	b.n	8001dba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001da8:	f7fe fdec 	bl	8000984 <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	2b64      	cmp	r3, #100	; 0x64
 8001db4:	d901      	bls.n	8001dba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	e200      	b.n	80021bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dba:	4b5d      	ldr	r3, [pc, #372]	; (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d0f0      	beq.n	8001da8 <HAL_RCC_OscConfig+0xe4>
 8001dc6:	e014      	b.n	8001df2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc8:	f7fe fddc 	bl	8000984 <HAL_GetTick>
 8001dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dce:	e008      	b.n	8001de2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dd0:	f7fe fdd8 	bl	8000984 <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	2b64      	cmp	r3, #100	; 0x64
 8001ddc:	d901      	bls.n	8001de2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	e1ec      	b.n	80021bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001de2:	4b53      	ldr	r3, [pc, #332]	; (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d1f0      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x10c>
 8001dee:	e000      	b.n	8001df2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001df0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0302 	and.w	r3, r3, #2
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d063      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001dfe:	4b4c      	ldr	r3, [pc, #304]	; (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f003 030c 	and.w	r3, r3, #12
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d00b      	beq.n	8001e22 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001e0a:	4b49      	ldr	r3, [pc, #292]	; (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f003 030c 	and.w	r3, r3, #12
 8001e12:	2b08      	cmp	r3, #8
 8001e14:	d11c      	bne.n	8001e50 <HAL_RCC_OscConfig+0x18c>
 8001e16:	4b46      	ldr	r3, [pc, #280]	; (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d116      	bne.n	8001e50 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e22:	4b43      	ldr	r3, [pc, #268]	; (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0302 	and.w	r3, r3, #2
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d005      	beq.n	8001e3a <HAL_RCC_OscConfig+0x176>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	691b      	ldr	r3, [r3, #16]
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d001      	beq.n	8001e3a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e1c0      	b.n	80021bc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e3a:	4b3d      	ldr	r3, [pc, #244]	; (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	695b      	ldr	r3, [r3, #20]
 8001e46:	00db      	lsls	r3, r3, #3
 8001e48:	4939      	ldr	r1, [pc, #228]	; (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e4e:	e03a      	b.n	8001ec6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	691b      	ldr	r3, [r3, #16]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d020      	beq.n	8001e9a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e58:	4b36      	ldr	r3, [pc, #216]	; (8001f34 <HAL_RCC_OscConfig+0x270>)
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e5e:	f7fe fd91 	bl	8000984 <HAL_GetTick>
 8001e62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e64:	e008      	b.n	8001e78 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e66:	f7fe fd8d 	bl	8000984 <HAL_GetTick>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	1ad3      	subs	r3, r2, r3
 8001e70:	2b02      	cmp	r3, #2
 8001e72:	d901      	bls.n	8001e78 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e74:	2303      	movs	r3, #3
 8001e76:	e1a1      	b.n	80021bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e78:	4b2d      	ldr	r3, [pc, #180]	; (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 0302 	and.w	r3, r3, #2
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d0f0      	beq.n	8001e66 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e84:	4b2a      	ldr	r3, [pc, #168]	; (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	695b      	ldr	r3, [r3, #20]
 8001e90:	00db      	lsls	r3, r3, #3
 8001e92:	4927      	ldr	r1, [pc, #156]	; (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001e94:	4313      	orrs	r3, r2
 8001e96:	600b      	str	r3, [r1, #0]
 8001e98:	e015      	b.n	8001ec6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e9a:	4b26      	ldr	r3, [pc, #152]	; (8001f34 <HAL_RCC_OscConfig+0x270>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea0:	f7fe fd70 	bl	8000984 <HAL_GetTick>
 8001ea4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ea6:	e008      	b.n	8001eba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ea8:	f7fe fd6c 	bl	8000984 <HAL_GetTick>
 8001eac:	4602      	mov	r2, r0
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	d901      	bls.n	8001eba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	e180      	b.n	80021bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eba:	4b1d      	ldr	r3, [pc, #116]	; (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0302 	and.w	r3, r3, #2
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d1f0      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0308 	and.w	r3, r3, #8
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d03a      	beq.n	8001f48 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	699b      	ldr	r3, [r3, #24]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d019      	beq.n	8001f0e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001eda:	4b17      	ldr	r3, [pc, #92]	; (8001f38 <HAL_RCC_OscConfig+0x274>)
 8001edc:	2201      	movs	r2, #1
 8001ede:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ee0:	f7fe fd50 	bl	8000984 <HAL_GetTick>
 8001ee4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ee6:	e008      	b.n	8001efa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ee8:	f7fe fd4c 	bl	8000984 <HAL_GetTick>
 8001eec:	4602      	mov	r2, r0
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d901      	bls.n	8001efa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e160      	b.n	80021bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001efa:	4b0d      	ldr	r3, [pc, #52]	; (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001efe:	f003 0302 	and.w	r3, r3, #2
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d0f0      	beq.n	8001ee8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001f06:	2001      	movs	r0, #1
 8001f08:	f000 fad8 	bl	80024bc <RCC_Delay>
 8001f0c:	e01c      	b.n	8001f48 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f0e:	4b0a      	ldr	r3, [pc, #40]	; (8001f38 <HAL_RCC_OscConfig+0x274>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f14:	f7fe fd36 	bl	8000984 <HAL_GetTick>
 8001f18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f1a:	e00f      	b.n	8001f3c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f1c:	f7fe fd32 	bl	8000984 <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d908      	bls.n	8001f3c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e146      	b.n	80021bc <HAL_RCC_OscConfig+0x4f8>
 8001f2e:	bf00      	nop
 8001f30:	40021000 	.word	0x40021000
 8001f34:	42420000 	.word	0x42420000
 8001f38:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f3c:	4b92      	ldr	r3, [pc, #584]	; (8002188 <HAL_RCC_OscConfig+0x4c4>)
 8001f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f40:	f003 0302 	and.w	r3, r3, #2
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d1e9      	bne.n	8001f1c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0304 	and.w	r3, r3, #4
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	f000 80a6 	beq.w	80020a2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f56:	2300      	movs	r3, #0
 8001f58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f5a:	4b8b      	ldr	r3, [pc, #556]	; (8002188 <HAL_RCC_OscConfig+0x4c4>)
 8001f5c:	69db      	ldr	r3, [r3, #28]
 8001f5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d10d      	bne.n	8001f82 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f66:	4b88      	ldr	r3, [pc, #544]	; (8002188 <HAL_RCC_OscConfig+0x4c4>)
 8001f68:	69db      	ldr	r3, [r3, #28]
 8001f6a:	4a87      	ldr	r2, [pc, #540]	; (8002188 <HAL_RCC_OscConfig+0x4c4>)
 8001f6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f70:	61d3      	str	r3, [r2, #28]
 8001f72:	4b85      	ldr	r3, [pc, #532]	; (8002188 <HAL_RCC_OscConfig+0x4c4>)
 8001f74:	69db      	ldr	r3, [r3, #28]
 8001f76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f7a:	60bb      	str	r3, [r7, #8]
 8001f7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f82:	4b82      	ldr	r3, [pc, #520]	; (800218c <HAL_RCC_OscConfig+0x4c8>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d118      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f8e:	4b7f      	ldr	r3, [pc, #508]	; (800218c <HAL_RCC_OscConfig+0x4c8>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a7e      	ldr	r2, [pc, #504]	; (800218c <HAL_RCC_OscConfig+0x4c8>)
 8001f94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f9a:	f7fe fcf3 	bl	8000984 <HAL_GetTick>
 8001f9e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fa0:	e008      	b.n	8001fb4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fa2:	f7fe fcef 	bl	8000984 <HAL_GetTick>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	2b64      	cmp	r3, #100	; 0x64
 8001fae:	d901      	bls.n	8001fb4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	e103      	b.n	80021bc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fb4:	4b75      	ldr	r3, [pc, #468]	; (800218c <HAL_RCC_OscConfig+0x4c8>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d0f0      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d106      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x312>
 8001fc8:	4b6f      	ldr	r3, [pc, #444]	; (8002188 <HAL_RCC_OscConfig+0x4c4>)
 8001fca:	6a1b      	ldr	r3, [r3, #32]
 8001fcc:	4a6e      	ldr	r2, [pc, #440]	; (8002188 <HAL_RCC_OscConfig+0x4c4>)
 8001fce:	f043 0301 	orr.w	r3, r3, #1
 8001fd2:	6213      	str	r3, [r2, #32]
 8001fd4:	e02d      	b.n	8002032 <HAL_RCC_OscConfig+0x36e>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	68db      	ldr	r3, [r3, #12]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d10c      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x334>
 8001fde:	4b6a      	ldr	r3, [pc, #424]	; (8002188 <HAL_RCC_OscConfig+0x4c4>)
 8001fe0:	6a1b      	ldr	r3, [r3, #32]
 8001fe2:	4a69      	ldr	r2, [pc, #420]	; (8002188 <HAL_RCC_OscConfig+0x4c4>)
 8001fe4:	f023 0301 	bic.w	r3, r3, #1
 8001fe8:	6213      	str	r3, [r2, #32]
 8001fea:	4b67      	ldr	r3, [pc, #412]	; (8002188 <HAL_RCC_OscConfig+0x4c4>)
 8001fec:	6a1b      	ldr	r3, [r3, #32]
 8001fee:	4a66      	ldr	r2, [pc, #408]	; (8002188 <HAL_RCC_OscConfig+0x4c4>)
 8001ff0:	f023 0304 	bic.w	r3, r3, #4
 8001ff4:	6213      	str	r3, [r2, #32]
 8001ff6:	e01c      	b.n	8002032 <HAL_RCC_OscConfig+0x36e>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	2b05      	cmp	r3, #5
 8001ffe:	d10c      	bne.n	800201a <HAL_RCC_OscConfig+0x356>
 8002000:	4b61      	ldr	r3, [pc, #388]	; (8002188 <HAL_RCC_OscConfig+0x4c4>)
 8002002:	6a1b      	ldr	r3, [r3, #32]
 8002004:	4a60      	ldr	r2, [pc, #384]	; (8002188 <HAL_RCC_OscConfig+0x4c4>)
 8002006:	f043 0304 	orr.w	r3, r3, #4
 800200a:	6213      	str	r3, [r2, #32]
 800200c:	4b5e      	ldr	r3, [pc, #376]	; (8002188 <HAL_RCC_OscConfig+0x4c4>)
 800200e:	6a1b      	ldr	r3, [r3, #32]
 8002010:	4a5d      	ldr	r2, [pc, #372]	; (8002188 <HAL_RCC_OscConfig+0x4c4>)
 8002012:	f043 0301 	orr.w	r3, r3, #1
 8002016:	6213      	str	r3, [r2, #32]
 8002018:	e00b      	b.n	8002032 <HAL_RCC_OscConfig+0x36e>
 800201a:	4b5b      	ldr	r3, [pc, #364]	; (8002188 <HAL_RCC_OscConfig+0x4c4>)
 800201c:	6a1b      	ldr	r3, [r3, #32]
 800201e:	4a5a      	ldr	r2, [pc, #360]	; (8002188 <HAL_RCC_OscConfig+0x4c4>)
 8002020:	f023 0301 	bic.w	r3, r3, #1
 8002024:	6213      	str	r3, [r2, #32]
 8002026:	4b58      	ldr	r3, [pc, #352]	; (8002188 <HAL_RCC_OscConfig+0x4c4>)
 8002028:	6a1b      	ldr	r3, [r3, #32]
 800202a:	4a57      	ldr	r2, [pc, #348]	; (8002188 <HAL_RCC_OscConfig+0x4c4>)
 800202c:	f023 0304 	bic.w	r3, r3, #4
 8002030:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	68db      	ldr	r3, [r3, #12]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d015      	beq.n	8002066 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800203a:	f7fe fca3 	bl	8000984 <HAL_GetTick>
 800203e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002040:	e00a      	b.n	8002058 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002042:	f7fe fc9f 	bl	8000984 <HAL_GetTick>
 8002046:	4602      	mov	r2, r0
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002050:	4293      	cmp	r3, r2
 8002052:	d901      	bls.n	8002058 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002054:	2303      	movs	r3, #3
 8002056:	e0b1      	b.n	80021bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002058:	4b4b      	ldr	r3, [pc, #300]	; (8002188 <HAL_RCC_OscConfig+0x4c4>)
 800205a:	6a1b      	ldr	r3, [r3, #32]
 800205c:	f003 0302 	and.w	r3, r3, #2
 8002060:	2b00      	cmp	r3, #0
 8002062:	d0ee      	beq.n	8002042 <HAL_RCC_OscConfig+0x37e>
 8002064:	e014      	b.n	8002090 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002066:	f7fe fc8d 	bl	8000984 <HAL_GetTick>
 800206a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800206c:	e00a      	b.n	8002084 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800206e:	f7fe fc89 	bl	8000984 <HAL_GetTick>
 8002072:	4602      	mov	r2, r0
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	1ad3      	subs	r3, r2, r3
 8002078:	f241 3288 	movw	r2, #5000	; 0x1388
 800207c:	4293      	cmp	r3, r2
 800207e:	d901      	bls.n	8002084 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	e09b      	b.n	80021bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002084:	4b40      	ldr	r3, [pc, #256]	; (8002188 <HAL_RCC_OscConfig+0x4c4>)
 8002086:	6a1b      	ldr	r3, [r3, #32]
 8002088:	f003 0302 	and.w	r3, r3, #2
 800208c:	2b00      	cmp	r3, #0
 800208e:	d1ee      	bne.n	800206e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002090:	7dfb      	ldrb	r3, [r7, #23]
 8002092:	2b01      	cmp	r3, #1
 8002094:	d105      	bne.n	80020a2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002096:	4b3c      	ldr	r3, [pc, #240]	; (8002188 <HAL_RCC_OscConfig+0x4c4>)
 8002098:	69db      	ldr	r3, [r3, #28]
 800209a:	4a3b      	ldr	r2, [pc, #236]	; (8002188 <HAL_RCC_OscConfig+0x4c4>)
 800209c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020a0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	69db      	ldr	r3, [r3, #28]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	f000 8087 	beq.w	80021ba <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020ac:	4b36      	ldr	r3, [pc, #216]	; (8002188 <HAL_RCC_OscConfig+0x4c4>)
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f003 030c 	and.w	r3, r3, #12
 80020b4:	2b08      	cmp	r3, #8
 80020b6:	d061      	beq.n	800217c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	69db      	ldr	r3, [r3, #28]
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d146      	bne.n	800214e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020c0:	4b33      	ldr	r3, [pc, #204]	; (8002190 <HAL_RCC_OscConfig+0x4cc>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c6:	f7fe fc5d 	bl	8000984 <HAL_GetTick>
 80020ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020cc:	e008      	b.n	80020e0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020ce:	f7fe fc59 	bl	8000984 <HAL_GetTick>
 80020d2:	4602      	mov	r2, r0
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	2b02      	cmp	r3, #2
 80020da:	d901      	bls.n	80020e0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80020dc:	2303      	movs	r3, #3
 80020de:	e06d      	b.n	80021bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020e0:	4b29      	ldr	r3, [pc, #164]	; (8002188 <HAL_RCC_OscConfig+0x4c4>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d1f0      	bne.n	80020ce <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6a1b      	ldr	r3, [r3, #32]
 80020f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020f4:	d108      	bne.n	8002108 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80020f6:	4b24      	ldr	r3, [pc, #144]	; (8002188 <HAL_RCC_OscConfig+0x4c4>)
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	4921      	ldr	r1, [pc, #132]	; (8002188 <HAL_RCC_OscConfig+0x4c4>)
 8002104:	4313      	orrs	r3, r2
 8002106:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002108:	4b1f      	ldr	r3, [pc, #124]	; (8002188 <HAL_RCC_OscConfig+0x4c4>)
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6a19      	ldr	r1, [r3, #32]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002118:	430b      	orrs	r3, r1
 800211a:	491b      	ldr	r1, [pc, #108]	; (8002188 <HAL_RCC_OscConfig+0x4c4>)
 800211c:	4313      	orrs	r3, r2
 800211e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002120:	4b1b      	ldr	r3, [pc, #108]	; (8002190 <HAL_RCC_OscConfig+0x4cc>)
 8002122:	2201      	movs	r2, #1
 8002124:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002126:	f7fe fc2d 	bl	8000984 <HAL_GetTick>
 800212a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800212c:	e008      	b.n	8002140 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800212e:	f7fe fc29 	bl	8000984 <HAL_GetTick>
 8002132:	4602      	mov	r2, r0
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	2b02      	cmp	r3, #2
 800213a:	d901      	bls.n	8002140 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800213c:	2303      	movs	r3, #3
 800213e:	e03d      	b.n	80021bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002140:	4b11      	ldr	r3, [pc, #68]	; (8002188 <HAL_RCC_OscConfig+0x4c4>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002148:	2b00      	cmp	r3, #0
 800214a:	d0f0      	beq.n	800212e <HAL_RCC_OscConfig+0x46a>
 800214c:	e035      	b.n	80021ba <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800214e:	4b10      	ldr	r3, [pc, #64]	; (8002190 <HAL_RCC_OscConfig+0x4cc>)
 8002150:	2200      	movs	r2, #0
 8002152:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002154:	f7fe fc16 	bl	8000984 <HAL_GetTick>
 8002158:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800215a:	e008      	b.n	800216e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800215c:	f7fe fc12 	bl	8000984 <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	2b02      	cmp	r3, #2
 8002168:	d901      	bls.n	800216e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e026      	b.n	80021bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800216e:	4b06      	ldr	r3, [pc, #24]	; (8002188 <HAL_RCC_OscConfig+0x4c4>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d1f0      	bne.n	800215c <HAL_RCC_OscConfig+0x498>
 800217a:	e01e      	b.n	80021ba <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	69db      	ldr	r3, [r3, #28]
 8002180:	2b01      	cmp	r3, #1
 8002182:	d107      	bne.n	8002194 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e019      	b.n	80021bc <HAL_RCC_OscConfig+0x4f8>
 8002188:	40021000 	.word	0x40021000
 800218c:	40007000 	.word	0x40007000
 8002190:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002194:	4b0b      	ldr	r3, [pc, #44]	; (80021c4 <HAL_RCC_OscConfig+0x500>)
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6a1b      	ldr	r3, [r3, #32]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d106      	bne.n	80021b6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021b2:	429a      	cmp	r2, r3
 80021b4:	d001      	beq.n	80021ba <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e000      	b.n	80021bc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80021ba:	2300      	movs	r3, #0
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3718      	adds	r7, #24
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	40021000 	.word	0x40021000

080021c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d101      	bne.n	80021dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	e0d0      	b.n	800237e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021dc:	4b6a      	ldr	r3, [pc, #424]	; (8002388 <HAL_RCC_ClockConfig+0x1c0>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0307 	and.w	r3, r3, #7
 80021e4:	683a      	ldr	r2, [r7, #0]
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d910      	bls.n	800220c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ea:	4b67      	ldr	r3, [pc, #412]	; (8002388 <HAL_RCC_ClockConfig+0x1c0>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f023 0207 	bic.w	r2, r3, #7
 80021f2:	4965      	ldr	r1, [pc, #404]	; (8002388 <HAL_RCC_ClockConfig+0x1c0>)
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021fa:	4b63      	ldr	r3, [pc, #396]	; (8002388 <HAL_RCC_ClockConfig+0x1c0>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0307 	and.w	r3, r3, #7
 8002202:	683a      	ldr	r2, [r7, #0]
 8002204:	429a      	cmp	r2, r3
 8002206:	d001      	beq.n	800220c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e0b8      	b.n	800237e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0302 	and.w	r3, r3, #2
 8002214:	2b00      	cmp	r3, #0
 8002216:	d020      	beq.n	800225a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0304 	and.w	r3, r3, #4
 8002220:	2b00      	cmp	r3, #0
 8002222:	d005      	beq.n	8002230 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002224:	4b59      	ldr	r3, [pc, #356]	; (800238c <HAL_RCC_ClockConfig+0x1c4>)
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	4a58      	ldr	r2, [pc, #352]	; (800238c <HAL_RCC_ClockConfig+0x1c4>)
 800222a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800222e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0308 	and.w	r3, r3, #8
 8002238:	2b00      	cmp	r3, #0
 800223a:	d005      	beq.n	8002248 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800223c:	4b53      	ldr	r3, [pc, #332]	; (800238c <HAL_RCC_ClockConfig+0x1c4>)
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	4a52      	ldr	r2, [pc, #328]	; (800238c <HAL_RCC_ClockConfig+0x1c4>)
 8002242:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002246:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002248:	4b50      	ldr	r3, [pc, #320]	; (800238c <HAL_RCC_ClockConfig+0x1c4>)
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	494d      	ldr	r1, [pc, #308]	; (800238c <HAL_RCC_ClockConfig+0x1c4>)
 8002256:	4313      	orrs	r3, r2
 8002258:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0301 	and.w	r3, r3, #1
 8002262:	2b00      	cmp	r3, #0
 8002264:	d040      	beq.n	80022e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	2b01      	cmp	r3, #1
 800226c:	d107      	bne.n	800227e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800226e:	4b47      	ldr	r3, [pc, #284]	; (800238c <HAL_RCC_ClockConfig+0x1c4>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d115      	bne.n	80022a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e07f      	b.n	800237e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	2b02      	cmp	r3, #2
 8002284:	d107      	bne.n	8002296 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002286:	4b41      	ldr	r3, [pc, #260]	; (800238c <HAL_RCC_ClockConfig+0x1c4>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d109      	bne.n	80022a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e073      	b.n	800237e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002296:	4b3d      	ldr	r3, [pc, #244]	; (800238c <HAL_RCC_ClockConfig+0x1c4>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0302 	and.w	r3, r3, #2
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d101      	bne.n	80022a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e06b      	b.n	800237e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022a6:	4b39      	ldr	r3, [pc, #228]	; (800238c <HAL_RCC_ClockConfig+0x1c4>)
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	f023 0203 	bic.w	r2, r3, #3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	4936      	ldr	r1, [pc, #216]	; (800238c <HAL_RCC_ClockConfig+0x1c4>)
 80022b4:	4313      	orrs	r3, r2
 80022b6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022b8:	f7fe fb64 	bl	8000984 <HAL_GetTick>
 80022bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022be:	e00a      	b.n	80022d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022c0:	f7fe fb60 	bl	8000984 <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e053      	b.n	800237e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022d6:	4b2d      	ldr	r3, [pc, #180]	; (800238c <HAL_RCC_ClockConfig+0x1c4>)
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f003 020c 	and.w	r2, r3, #12
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d1eb      	bne.n	80022c0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022e8:	4b27      	ldr	r3, [pc, #156]	; (8002388 <HAL_RCC_ClockConfig+0x1c0>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0307 	and.w	r3, r3, #7
 80022f0:	683a      	ldr	r2, [r7, #0]
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d210      	bcs.n	8002318 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022f6:	4b24      	ldr	r3, [pc, #144]	; (8002388 <HAL_RCC_ClockConfig+0x1c0>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f023 0207 	bic.w	r2, r3, #7
 80022fe:	4922      	ldr	r1, [pc, #136]	; (8002388 <HAL_RCC_ClockConfig+0x1c0>)
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	4313      	orrs	r3, r2
 8002304:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002306:	4b20      	ldr	r3, [pc, #128]	; (8002388 <HAL_RCC_ClockConfig+0x1c0>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 0307 	and.w	r3, r3, #7
 800230e:	683a      	ldr	r2, [r7, #0]
 8002310:	429a      	cmp	r2, r3
 8002312:	d001      	beq.n	8002318 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e032      	b.n	800237e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0304 	and.w	r3, r3, #4
 8002320:	2b00      	cmp	r3, #0
 8002322:	d008      	beq.n	8002336 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002324:	4b19      	ldr	r3, [pc, #100]	; (800238c <HAL_RCC_ClockConfig+0x1c4>)
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	4916      	ldr	r1, [pc, #88]	; (800238c <HAL_RCC_ClockConfig+0x1c4>)
 8002332:	4313      	orrs	r3, r2
 8002334:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0308 	and.w	r3, r3, #8
 800233e:	2b00      	cmp	r3, #0
 8002340:	d009      	beq.n	8002356 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002342:	4b12      	ldr	r3, [pc, #72]	; (800238c <HAL_RCC_ClockConfig+0x1c4>)
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	691b      	ldr	r3, [r3, #16]
 800234e:	00db      	lsls	r3, r3, #3
 8002350:	490e      	ldr	r1, [pc, #56]	; (800238c <HAL_RCC_ClockConfig+0x1c4>)
 8002352:	4313      	orrs	r3, r2
 8002354:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002356:	f000 f821 	bl	800239c <HAL_RCC_GetSysClockFreq>
 800235a:	4602      	mov	r2, r0
 800235c:	4b0b      	ldr	r3, [pc, #44]	; (800238c <HAL_RCC_ClockConfig+0x1c4>)
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	091b      	lsrs	r3, r3, #4
 8002362:	f003 030f 	and.w	r3, r3, #15
 8002366:	490a      	ldr	r1, [pc, #40]	; (8002390 <HAL_RCC_ClockConfig+0x1c8>)
 8002368:	5ccb      	ldrb	r3, [r1, r3]
 800236a:	fa22 f303 	lsr.w	r3, r2, r3
 800236e:	4a09      	ldr	r2, [pc, #36]	; (8002394 <HAL_RCC_ClockConfig+0x1cc>)
 8002370:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002372:	4b09      	ldr	r3, [pc, #36]	; (8002398 <HAL_RCC_ClockConfig+0x1d0>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4618      	mov	r0, r3
 8002378:	f7fe fac2 	bl	8000900 <HAL_InitTick>

  return HAL_OK;
 800237c:	2300      	movs	r3, #0
}
 800237e:	4618      	mov	r0, r3
 8002380:	3710      	adds	r7, #16
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	40022000 	.word	0x40022000
 800238c:	40021000 	.word	0x40021000
 8002390:	080036e4 	.word	0x080036e4
 8002394:	20000008 	.word	0x20000008
 8002398:	2000000c 	.word	0x2000000c

0800239c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800239c:	b490      	push	{r4, r7}
 800239e:	b08a      	sub	sp, #40	; 0x28
 80023a0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80023a2:	4b29      	ldr	r3, [pc, #164]	; (8002448 <HAL_RCC_GetSysClockFreq+0xac>)
 80023a4:	1d3c      	adds	r4, r7, #4
 80023a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80023a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80023ac:	f240 2301 	movw	r3, #513	; 0x201
 80023b0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80023b2:	2300      	movs	r3, #0
 80023b4:	61fb      	str	r3, [r7, #28]
 80023b6:	2300      	movs	r3, #0
 80023b8:	61bb      	str	r3, [r7, #24]
 80023ba:	2300      	movs	r3, #0
 80023bc:	627b      	str	r3, [r7, #36]	; 0x24
 80023be:	2300      	movs	r3, #0
 80023c0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80023c2:	2300      	movs	r3, #0
 80023c4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80023c6:	4b21      	ldr	r3, [pc, #132]	; (800244c <HAL_RCC_GetSysClockFreq+0xb0>)
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	f003 030c 	and.w	r3, r3, #12
 80023d2:	2b04      	cmp	r3, #4
 80023d4:	d002      	beq.n	80023dc <HAL_RCC_GetSysClockFreq+0x40>
 80023d6:	2b08      	cmp	r3, #8
 80023d8:	d003      	beq.n	80023e2 <HAL_RCC_GetSysClockFreq+0x46>
 80023da:	e02b      	b.n	8002434 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80023dc:	4b1c      	ldr	r3, [pc, #112]	; (8002450 <HAL_RCC_GetSysClockFreq+0xb4>)
 80023de:	623b      	str	r3, [r7, #32]
      break;
 80023e0:	e02b      	b.n	800243a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	0c9b      	lsrs	r3, r3, #18
 80023e6:	f003 030f 	and.w	r3, r3, #15
 80023ea:	3328      	adds	r3, #40	; 0x28
 80023ec:	443b      	add	r3, r7
 80023ee:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80023f2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d012      	beq.n	8002424 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80023fe:	4b13      	ldr	r3, [pc, #76]	; (800244c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	0c5b      	lsrs	r3, r3, #17
 8002404:	f003 0301 	and.w	r3, r3, #1
 8002408:	3328      	adds	r3, #40	; 0x28
 800240a:	443b      	add	r3, r7
 800240c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002410:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	4a0e      	ldr	r2, [pc, #56]	; (8002450 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002416:	fb03 f202 	mul.w	r2, r3, r2
 800241a:	69bb      	ldr	r3, [r7, #24]
 800241c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002420:	627b      	str	r3, [r7, #36]	; 0x24
 8002422:	e004      	b.n	800242e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	4a0b      	ldr	r2, [pc, #44]	; (8002454 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002428:	fb02 f303 	mul.w	r3, r2, r3
 800242c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800242e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002430:	623b      	str	r3, [r7, #32]
      break;
 8002432:	e002      	b.n	800243a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002434:	4b06      	ldr	r3, [pc, #24]	; (8002450 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002436:	623b      	str	r3, [r7, #32]
      break;
 8002438:	bf00      	nop
    }
  }
  return sysclockfreq;
 800243a:	6a3b      	ldr	r3, [r7, #32]
}
 800243c:	4618      	mov	r0, r3
 800243e:	3728      	adds	r7, #40	; 0x28
 8002440:	46bd      	mov	sp, r7
 8002442:	bc90      	pop	{r4, r7}
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	080036d4 	.word	0x080036d4
 800244c:	40021000 	.word	0x40021000
 8002450:	007a1200 	.word	0x007a1200
 8002454:	003d0900 	.word	0x003d0900

08002458 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800245c:	4b02      	ldr	r3, [pc, #8]	; (8002468 <HAL_RCC_GetHCLKFreq+0x10>)
 800245e:	681b      	ldr	r3, [r3, #0]
}
 8002460:	4618      	mov	r0, r3
 8002462:	46bd      	mov	sp, r7
 8002464:	bc80      	pop	{r7}
 8002466:	4770      	bx	lr
 8002468:	20000008 	.word	0x20000008

0800246c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002470:	f7ff fff2 	bl	8002458 <HAL_RCC_GetHCLKFreq>
 8002474:	4602      	mov	r2, r0
 8002476:	4b05      	ldr	r3, [pc, #20]	; (800248c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	0a1b      	lsrs	r3, r3, #8
 800247c:	f003 0307 	and.w	r3, r3, #7
 8002480:	4903      	ldr	r1, [pc, #12]	; (8002490 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002482:	5ccb      	ldrb	r3, [r1, r3]
 8002484:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002488:	4618      	mov	r0, r3
 800248a:	bd80      	pop	{r7, pc}
 800248c:	40021000 	.word	0x40021000
 8002490:	080036f4 	.word	0x080036f4

08002494 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002498:	f7ff ffde 	bl	8002458 <HAL_RCC_GetHCLKFreq>
 800249c:	4602      	mov	r2, r0
 800249e:	4b05      	ldr	r3, [pc, #20]	; (80024b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	0adb      	lsrs	r3, r3, #11
 80024a4:	f003 0307 	and.w	r3, r3, #7
 80024a8:	4903      	ldr	r1, [pc, #12]	; (80024b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024aa:	5ccb      	ldrb	r3, [r1, r3]
 80024ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	40021000 	.word	0x40021000
 80024b8:	080036f4 	.word	0x080036f4

080024bc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80024bc:	b480      	push	{r7}
 80024be:	b085      	sub	sp, #20
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80024c4:	4b0a      	ldr	r3, [pc, #40]	; (80024f0 <RCC_Delay+0x34>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a0a      	ldr	r2, [pc, #40]	; (80024f4 <RCC_Delay+0x38>)
 80024ca:	fba2 2303 	umull	r2, r3, r2, r3
 80024ce:	0a5b      	lsrs	r3, r3, #9
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	fb02 f303 	mul.w	r3, r2, r3
 80024d6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80024d8:	bf00      	nop
  }
  while (Delay --);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	1e5a      	subs	r2, r3, #1
 80024de:	60fa      	str	r2, [r7, #12]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d1f9      	bne.n	80024d8 <RCC_Delay+0x1c>
}
 80024e4:	bf00      	nop
 80024e6:	bf00      	nop
 80024e8:	3714      	adds	r7, #20
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bc80      	pop	{r7}
 80024ee:	4770      	bx	lr
 80024f0:	20000008 	.word	0x20000008
 80024f4:	10624dd3 	.word	0x10624dd3

080024f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b086      	sub	sp, #24
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002500:	2300      	movs	r3, #0
 8002502:	613b      	str	r3, [r7, #16]
 8002504:	2300      	movs	r3, #0
 8002506:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0301 	and.w	r3, r3, #1
 8002510:	2b00      	cmp	r3, #0
 8002512:	d07d      	beq.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002514:	2300      	movs	r3, #0
 8002516:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002518:	4b4f      	ldr	r3, [pc, #316]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800251a:	69db      	ldr	r3, [r3, #28]
 800251c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d10d      	bne.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002524:	4b4c      	ldr	r3, [pc, #304]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002526:	69db      	ldr	r3, [r3, #28]
 8002528:	4a4b      	ldr	r2, [pc, #300]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800252a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800252e:	61d3      	str	r3, [r2, #28]
 8002530:	4b49      	ldr	r3, [pc, #292]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002532:	69db      	ldr	r3, [r3, #28]
 8002534:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002538:	60bb      	str	r3, [r7, #8]
 800253a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800253c:	2301      	movs	r3, #1
 800253e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002540:	4b46      	ldr	r3, [pc, #280]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002548:	2b00      	cmp	r3, #0
 800254a:	d118      	bne.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800254c:	4b43      	ldr	r3, [pc, #268]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a42      	ldr	r2, [pc, #264]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002552:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002556:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002558:	f7fe fa14 	bl	8000984 <HAL_GetTick>
 800255c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800255e:	e008      	b.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002560:	f7fe fa10 	bl	8000984 <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	2b64      	cmp	r3, #100	; 0x64
 800256c:	d901      	bls.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e06d      	b.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002572:	4b3a      	ldr	r3, [pc, #232]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800257a:	2b00      	cmp	r3, #0
 800257c:	d0f0      	beq.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800257e:	4b36      	ldr	r3, [pc, #216]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002580:	6a1b      	ldr	r3, [r3, #32]
 8002582:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002586:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d02e      	beq.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002596:	68fa      	ldr	r2, [r7, #12]
 8002598:	429a      	cmp	r2, r3
 800259a:	d027      	beq.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800259c:	4b2e      	ldr	r3, [pc, #184]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800259e:	6a1b      	ldr	r3, [r3, #32]
 80025a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025a4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80025a6:	4b2e      	ldr	r3, [pc, #184]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80025a8:	2201      	movs	r2, #1
 80025aa:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80025ac:	4b2c      	ldr	r3, [pc, #176]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80025b2:	4a29      	ldr	r2, [pc, #164]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	f003 0301 	and.w	r3, r3, #1
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d014      	beq.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c2:	f7fe f9df 	bl	8000984 <HAL_GetTick>
 80025c6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025c8:	e00a      	b.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025ca:	f7fe f9db 	bl	8000984 <HAL_GetTick>
 80025ce:	4602      	mov	r2, r0
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80025d8:	4293      	cmp	r3, r2
 80025da:	d901      	bls.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80025dc:	2303      	movs	r3, #3
 80025de:	e036      	b.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025e0:	4b1d      	ldr	r3, [pc, #116]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025e2:	6a1b      	ldr	r3, [r3, #32]
 80025e4:	f003 0302 	and.w	r3, r3, #2
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d0ee      	beq.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025ec:	4b1a      	ldr	r3, [pc, #104]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025ee:	6a1b      	ldr	r3, [r3, #32]
 80025f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	4917      	ldr	r1, [pc, #92]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025fa:	4313      	orrs	r3, r2
 80025fc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80025fe:	7dfb      	ldrb	r3, [r7, #23]
 8002600:	2b01      	cmp	r3, #1
 8002602:	d105      	bne.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002604:	4b14      	ldr	r3, [pc, #80]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002606:	69db      	ldr	r3, [r3, #28]
 8002608:	4a13      	ldr	r2, [pc, #76]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800260a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800260e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0302 	and.w	r3, r3, #2
 8002618:	2b00      	cmp	r3, #0
 800261a:	d008      	beq.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800261c:	4b0e      	ldr	r3, [pc, #56]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	490b      	ldr	r1, [pc, #44]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800262a:	4313      	orrs	r3, r2
 800262c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0310 	and.w	r3, r3, #16
 8002636:	2b00      	cmp	r3, #0
 8002638:	d008      	beq.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800263a:	4b07      	ldr	r3, [pc, #28]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	4904      	ldr	r1, [pc, #16]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002648:	4313      	orrs	r3, r2
 800264a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800264c:	2300      	movs	r3, #0
}
 800264e:	4618      	mov	r0, r3
 8002650:	3718      	adds	r7, #24
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	40021000 	.word	0x40021000
 800265c:	40007000 	.word	0x40007000
 8002660:	42420440 	.word	0x42420440

08002664 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d101      	bne.n	8002676 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e03f      	b.n	80026f6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800267c:	b2db      	uxtb	r3, r3
 800267e:	2b00      	cmp	r3, #0
 8002680:	d106      	bne.n	8002690 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f7fd ffd0 	bl	8000630 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2224      	movs	r2, #36	; 0x24
 8002694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	68da      	ldr	r2, [r3, #12]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80026a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80026a8:	6878      	ldr	r0, [r7, #4]
 80026aa:	f000 fac9 	bl	8002c40 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	691a      	ldr	r2, [r3, #16]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80026bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	695a      	ldr	r2, [r3, #20]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80026cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	68da      	ldr	r2, [r3, #12]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80026dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2220      	movs	r2, #32
 80026e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2220      	movs	r2, #32
 80026f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80026f4:	2300      	movs	r3, #0
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3708      	adds	r7, #8
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
	...

08002700 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b086      	sub	sp, #24
 8002704:	af00      	add	r7, sp, #0
 8002706:	60f8      	str	r0, [r7, #12]
 8002708:	60b9      	str	r1, [r7, #8]
 800270a:	4613      	mov	r3, r2
 800270c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002714:	b2db      	uxtb	r3, r3
 8002716:	2b20      	cmp	r3, #32
 8002718:	d153      	bne.n	80027c2 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d002      	beq.n	8002726 <HAL_UART_Transmit_DMA+0x26>
 8002720:	88fb      	ldrh	r3, [r7, #6]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d101      	bne.n	800272a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e04c      	b.n	80027c4 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002730:	2b01      	cmp	r3, #1
 8002732:	d101      	bne.n	8002738 <HAL_UART_Transmit_DMA+0x38>
 8002734:	2302      	movs	r3, #2
 8002736:	e045      	b.n	80027c4 <HAL_UART_Transmit_DMA+0xc4>
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2201      	movs	r2, #1
 800273c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8002740:	68ba      	ldr	r2, [r7, #8]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	88fa      	ldrh	r2, [r7, #6]
 800274a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	88fa      	ldrh	r2, [r7, #6]
 8002750:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2200      	movs	r2, #0
 8002756:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2221      	movs	r2, #33	; 0x21
 800275c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002764:	4a19      	ldr	r2, [pc, #100]	; (80027cc <HAL_UART_Transmit_DMA+0xcc>)
 8002766:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800276c:	4a18      	ldr	r2, [pc, #96]	; (80027d0 <HAL_UART_Transmit_DMA+0xd0>)
 800276e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002774:	4a17      	ldr	r2, [pc, #92]	; (80027d4 <HAL_UART_Transmit_DMA+0xd4>)
 8002776:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800277c:	2200      	movs	r2, #0
 800277e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 8002780:	f107 0308 	add.w	r3, r7, #8
 8002784:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	6819      	ldr	r1, [r3, #0]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	3304      	adds	r3, #4
 8002794:	461a      	mov	r2, r3
 8002796:	88fb      	ldrh	r3, [r7, #6]
 8002798:	f7fe ff2a 	bl	80015f0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80027a4:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2200      	movs	r2, #0
 80027aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	695a      	ldr	r2, [r3, #20]
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80027bc:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80027be:	2300      	movs	r3, #0
 80027c0:	e000      	b.n	80027c4 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 80027c2:	2302      	movs	r3, #2
  }
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3718      	adds	r7, #24
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	08002925 	.word	0x08002925
 80027d0:	08002977 	.word	0x08002977
 80027d4:	08002a5f 	.word	0x08002a5f

080027d8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af00      	add	r7, sp, #0
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	60b9      	str	r1, [r7, #8]
 80027e2:	4613      	mov	r3, r2
 80027e4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	2b20      	cmp	r3, #32
 80027f0:	d11d      	bne.n	800282e <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d002      	beq.n	80027fe <HAL_UART_Receive_DMA+0x26>
 80027f8:	88fb      	ldrh	r3, [r7, #6]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d101      	bne.n	8002802 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e016      	b.n	8002830 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002808:	2b01      	cmp	r3, #1
 800280a:	d101      	bne.n	8002810 <HAL_UART_Receive_DMA+0x38>
 800280c:	2302      	movs	r3, #2
 800280e:	e00f      	b.n	8002830 <HAL_UART_Receive_DMA+0x58>
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2201      	movs	r2, #1
 8002814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2200      	movs	r2, #0
 800281c:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 800281e:	88fb      	ldrh	r3, [r7, #6]
 8002820:	461a      	mov	r2, r3
 8002822:	68b9      	ldr	r1, [r7, #8]
 8002824:	68f8      	ldr	r0, [r7, #12]
 8002826:	f000 f965 	bl	8002af4 <UART_Start_Receive_DMA>
 800282a:	4603      	mov	r3, r0
 800282c:	e000      	b.n	8002830 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800282e:	2302      	movs	r3, #2
  }
}
 8002830:	4618      	mov	r0, r3
 8002832:	3710      	adds	r7, #16
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}

08002838 <HAL_UART_DMA_Tx_Stop>:

  return HAL_OK;
}

HAL_StatusTypeDef HAL_UART_DMA_Tx_Stop(UART_HandleTypeDef *huart)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b084      	sub	sp, #16
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002840:	2300      	movs	r3, #0
 8002842:	60fb      	str	r3, [r7, #12]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	695b      	ldr	r3, [r3, #20]
 800284a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800284e:	2b00      	cmp	r3, #0
 8002850:	bf14      	ite	ne
 8002852:	2301      	movne	r3, #1
 8002854:	2300      	moveq	r3, #0
 8002856:	b2db      	uxtb	r3, r3
 8002858:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002860:	b2db      	uxtb	r3, r3
 8002862:	2b21      	cmp	r3, #33	; 0x21
 8002864:	d116      	bne.n	8002894 <HAL_UART_DMA_Tx_Stop+0x5c>
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d013      	beq.n	8002894 <HAL_UART_DMA_Tx_Stop+0x5c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	695a      	ldr	r2, [r3, #20]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800287a:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002880:	2b00      	cmp	r3, #0
 8002882:	d004      	beq.n	800288e <HAL_UART_DMA_Tx_Stop+0x56>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002888:	4618      	mov	r0, r3
 800288a:	f7fe ff10 	bl	80016ae <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f000 f994 	bl	8002bbc <UART_EndTxTransfer>
  }
  return HAL_OK;
 8002894:	2300      	movs	r3, #0
}
 8002896:	4618      	mov	r0, r3
 8002898:	3710      	adds	r7, #16
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}

0800289e <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800289e:	b480      	push	{r7}
 80028a0:	b083      	sub	sp, #12
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80028a6:	bf00      	nop
 80028a8:	370c      	adds	r7, #12
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bc80      	pop	{r7}
 80028ae:	4770      	bx	lr

080028b0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80028b8:	bf00      	nop
 80028ba:	370c      	adds	r7, #12
 80028bc:	46bd      	mov	sp, r7
 80028be:	bc80      	pop	{r7}
 80028c0:	4770      	bx	lr

080028c2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80028c2:	b480      	push	{r7}
 80028c4:	b083      	sub	sp, #12
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80028ca:	bf00      	nop
 80028cc:	370c      	adds	r7, #12
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bc80      	pop	{r7}
 80028d2:	4770      	bx	lr

080028d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	460b      	mov	r3, r1
 80028de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80028e0:	bf00      	nop
 80028e2:	370c      	adds	r7, #12
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bc80      	pop	{r7}
 80028e8:	4770      	bx	lr

080028ea <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 80028ea:	b480      	push	{r7}
 80028ec:	b085      	sub	sp, #20
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 80028f2:	2300      	movs	r3, #0
 80028f4:	60fb      	str	r3, [r7, #12]
 80028f6:	2300      	movs	r3, #0
 80028f8:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002900:	b2db      	uxtb	r3, r3
 8002902:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800290a:	b2db      	uxtb	r3, r3
 800290c:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	b2da      	uxtb	r2, r3
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	b2db      	uxtb	r3, r3
 8002916:	4313      	orrs	r3, r2
 8002918:	b2db      	uxtb	r3, r3
}
 800291a:	4618      	mov	r0, r3
 800291c:	3714      	adds	r7, #20
 800291e:	46bd      	mov	sp, r7
 8002920:	bc80      	pop	{r7}
 8002922:	4770      	bx	lr

08002924 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002930:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0320 	and.w	r3, r3, #32
 800293c:	2b00      	cmp	r3, #0
 800293e:	d113      	bne.n	8002968 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2200      	movs	r2, #0
 8002944:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	695a      	ldr	r2, [r3, #20]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002954:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	68da      	ldr	r2, [r3, #12]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002964:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002966:	e002      	b.n	800296e <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8002968:	68f8      	ldr	r0, [r7, #12]
 800296a:	f7fd fc03 	bl	8000174 <HAL_UART_TxCpltCallback>
}
 800296e:	bf00      	nop
 8002970:	3710      	adds	r7, #16
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}

08002976 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002976:	b580      	push	{r7, lr}
 8002978:	b084      	sub	sp, #16
 800297a:	af00      	add	r7, sp, #0
 800297c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002982:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8002984:	68f8      	ldr	r0, [r7, #12]
 8002986:	f7ff ff8a 	bl	800289e <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800298a:	bf00      	nop
 800298c:	3710      	adds	r7, #16
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}

08002992 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002992:	b580      	push	{r7, lr}
 8002994:	b084      	sub	sp, #16
 8002996:	af00      	add	r7, sp, #0
 8002998:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299e:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0320 	and.w	r3, r3, #32
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d12a      	bne.n	8002a04 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2200      	movs	r2, #0
 80029b2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	68da      	ldr	r2, [r3, #12]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80029c2:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	695a      	ldr	r2, [r3, #20]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f022 0201 	bic.w	r2, r2, #1
 80029d2:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	695a      	ldr	r2, [r3, #20]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029e2:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2220      	movs	r2, #32
 80029e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d107      	bne.n	8002a04 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	68da      	ldr	r2, [r3, #12]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f022 0210 	bic.w	r2, r2, #16
 8002a02:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d106      	bne.n	8002a1a <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002a10:	4619      	mov	r1, r3
 8002a12:	68f8      	ldr	r0, [r7, #12]
 8002a14:	f7ff ff5e 	bl	80028d4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002a18:	e002      	b.n	8002a20 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8002a1a:	68f8      	ldr	r0, [r7, #12]
 8002a1c:	f7fd fb96 	bl	800014c <HAL_UART_RxCpltCallback>
}
 8002a20:	bf00      	nop
 8002a22:	3710      	adds	r7, #16
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}

08002a28 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b084      	sub	sp, #16
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a34:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d108      	bne.n	8002a50 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002a42:	085b      	lsrs	r3, r3, #1
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	4619      	mov	r1, r3
 8002a48:	68f8      	ldr	r0, [r7, #12]
 8002a4a:	f7ff ff43 	bl	80028d4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002a4e:	e002      	b.n	8002a56 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8002a50:	68f8      	ldr	r0, [r7, #12]
 8002a52:	f7ff ff2d 	bl	80028b0 <HAL_UART_RxHalfCpltCallback>
}
 8002a56:	bf00      	nop
 8002a58:	3710      	adds	r7, #16
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}

08002a5e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002a5e:	b580      	push	{r7, lr}
 8002a60:	b084      	sub	sp, #16
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002a66:	2300      	movs	r3, #0
 8002a68:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	695b      	ldr	r3, [r3, #20]
 8002a76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	bf14      	ite	ne
 8002a7e:	2301      	movne	r3, #1
 8002a80:	2300      	moveq	r3, #0
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	2b21      	cmp	r3, #33	; 0x21
 8002a90:	d108      	bne.n	8002aa4 <UART_DMAError+0x46>
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d005      	beq.n	8002aa4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8002a9e:	68b8      	ldr	r0, [r7, #8]
 8002aa0:	f000 f88c 	bl	8002bbc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	695b      	ldr	r3, [r3, #20]
 8002aaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	bf14      	ite	ne
 8002ab2:	2301      	movne	r3, #1
 8002ab4:	2300      	moveq	r3, #0
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2b22      	cmp	r3, #34	; 0x22
 8002ac4:	d108      	bne.n	8002ad8 <UART_DMAError+0x7a>
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d005      	beq.n	8002ad8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002ad2:	68b8      	ldr	r0, [r7, #8]
 8002ad4:	f000 f887 	bl	8002be6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002adc:	f043 0210 	orr.w	r2, r3, #16
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002ae4:	68b8      	ldr	r0, [r7, #8]
 8002ae6:	f7ff feec 	bl	80028c2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002aea:	bf00      	nop
 8002aec:	3710      	adds	r7, #16
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
	...

08002af4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b086      	sub	sp, #24
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	60f8      	str	r0, [r7, #12]
 8002afc:	60b9      	str	r1, [r7, #8]
 8002afe:	4613      	mov	r3, r2
 8002b00:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8002b02:	68ba      	ldr	r2, [r7, #8]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	88fa      	ldrh	r2, [r7, #6]
 8002b0c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2200      	movs	r2, #0
 8002b12:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2222      	movs	r2, #34	; 0x22
 8002b18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b20:	4a23      	ldr	r2, [pc, #140]	; (8002bb0 <UART_Start_Receive_DMA+0xbc>)
 8002b22:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b28:	4a22      	ldr	r2, [pc, #136]	; (8002bb4 <UART_Start_Receive_DMA+0xc0>)
 8002b2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b30:	4a21      	ldr	r2, [pc, #132]	; (8002bb8 <UART_Start_Receive_DMA+0xc4>)
 8002b32:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b38:	2200      	movs	r2, #0
 8002b3a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8002b3c:	f107 0308 	add.w	r3, r7, #8
 8002b40:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	3304      	adds	r3, #4
 8002b4c:	4619      	mov	r1, r3
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	88fb      	ldrh	r3, [r7, #6]
 8002b54:	f7fe fd4c 	bl	80015f0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8002b58:	2300      	movs	r3, #0
 8002b5a:	613b      	str	r3, [r7, #16]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	613b      	str	r3, [r7, #16]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	613b      	str	r3, [r7, #16]
 8002b6c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2200      	movs	r2, #0
 8002b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	68da      	ldr	r2, [r3, #12]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b84:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	695a      	ldr	r2, [r3, #20]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f042 0201 	orr.w	r2, r2, #1
 8002b94:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	695a      	ldr	r2, [r3, #20]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ba4:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8002ba6:	2300      	movs	r3, #0
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3718      	adds	r7, #24
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	08002993 	.word	0x08002993
 8002bb4:	08002a29 	.word	0x08002a29
 8002bb8:	08002a5f 	.word	0x08002a5f

08002bbc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	68da      	ldr	r2, [r3, #12]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002bd2:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2220      	movs	r2, #32
 8002bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8002bdc:	bf00      	nop
 8002bde:	370c      	adds	r7, #12
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bc80      	pop	{r7}
 8002be4:	4770      	bx	lr

08002be6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002be6:	b480      	push	{r7}
 8002be8:	b083      	sub	sp, #12
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	68da      	ldr	r2, [r3, #12]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002bfc:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	695a      	ldr	r2, [r3, #20]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f022 0201 	bic.w	r2, r2, #1
 8002c0c:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d107      	bne.n	8002c26 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	68da      	ldr	r2, [r3, #12]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f022 0210 	bic.w	r2, r2, #16
 8002c24:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2220      	movs	r2, #32
 8002c2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2200      	movs	r2, #0
 8002c32:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002c34:	bf00      	nop
 8002c36:	370c      	adds	r7, #12
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bc80      	pop	{r7}
 8002c3c:	4770      	bx	lr
	...

08002c40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	691b      	ldr	r3, [r3, #16]
 8002c4e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	68da      	ldr	r2, [r3, #12]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	430a      	orrs	r2, r1
 8002c5c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	689a      	ldr	r2, [r3, #8]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	691b      	ldr	r3, [r3, #16]
 8002c66:	431a      	orrs	r2, r3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	695b      	ldr	r3, [r3, #20]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002c7a:	f023 030c 	bic.w	r3, r3, #12
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	6812      	ldr	r2, [r2, #0]
 8002c82:	68b9      	ldr	r1, [r7, #8]
 8002c84:	430b      	orrs	r3, r1
 8002c86:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	695b      	ldr	r3, [r3, #20]
 8002c8e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	699a      	ldr	r2, [r3, #24]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	430a      	orrs	r2, r1
 8002c9c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a2c      	ldr	r2, [pc, #176]	; (8002d54 <UART_SetConfig+0x114>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d103      	bne.n	8002cb0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002ca8:	f7ff fbf4 	bl	8002494 <HAL_RCC_GetPCLK2Freq>
 8002cac:	60f8      	str	r0, [r7, #12]
 8002cae:	e002      	b.n	8002cb6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002cb0:	f7ff fbdc 	bl	800246c <HAL_RCC_GetPCLK1Freq>
 8002cb4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002cb6:	68fa      	ldr	r2, [r7, #12]
 8002cb8:	4613      	mov	r3, r2
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	4413      	add	r3, r2
 8002cbe:	009a      	lsls	r2, r3, #2
 8002cc0:	441a      	add	r2, r3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ccc:	4a22      	ldr	r2, [pc, #136]	; (8002d58 <UART_SetConfig+0x118>)
 8002cce:	fba2 2303 	umull	r2, r3, r2, r3
 8002cd2:	095b      	lsrs	r3, r3, #5
 8002cd4:	0119      	lsls	r1, r3, #4
 8002cd6:	68fa      	ldr	r2, [r7, #12]
 8002cd8:	4613      	mov	r3, r2
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	4413      	add	r3, r2
 8002cde:	009a      	lsls	r2, r3, #2
 8002ce0:	441a      	add	r2, r3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002cec:	4b1a      	ldr	r3, [pc, #104]	; (8002d58 <UART_SetConfig+0x118>)
 8002cee:	fba3 0302 	umull	r0, r3, r3, r2
 8002cf2:	095b      	lsrs	r3, r3, #5
 8002cf4:	2064      	movs	r0, #100	; 0x64
 8002cf6:	fb00 f303 	mul.w	r3, r0, r3
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	011b      	lsls	r3, r3, #4
 8002cfe:	3332      	adds	r3, #50	; 0x32
 8002d00:	4a15      	ldr	r2, [pc, #84]	; (8002d58 <UART_SetConfig+0x118>)
 8002d02:	fba2 2303 	umull	r2, r3, r2, r3
 8002d06:	095b      	lsrs	r3, r3, #5
 8002d08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d0c:	4419      	add	r1, r3
 8002d0e:	68fa      	ldr	r2, [r7, #12]
 8002d10:	4613      	mov	r3, r2
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	4413      	add	r3, r2
 8002d16:	009a      	lsls	r2, r3, #2
 8002d18:	441a      	add	r2, r3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d24:	4b0c      	ldr	r3, [pc, #48]	; (8002d58 <UART_SetConfig+0x118>)
 8002d26:	fba3 0302 	umull	r0, r3, r3, r2
 8002d2a:	095b      	lsrs	r3, r3, #5
 8002d2c:	2064      	movs	r0, #100	; 0x64
 8002d2e:	fb00 f303 	mul.w	r3, r0, r3
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	011b      	lsls	r3, r3, #4
 8002d36:	3332      	adds	r3, #50	; 0x32
 8002d38:	4a07      	ldr	r2, [pc, #28]	; (8002d58 <UART_SetConfig+0x118>)
 8002d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d3e:	095b      	lsrs	r3, r3, #5
 8002d40:	f003 020f 	and.w	r2, r3, #15
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	440a      	add	r2, r1
 8002d4a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002d4c:	bf00      	nop
 8002d4e:	3710      	adds	r7, #16
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	40013800 	.word	0x40013800
 8002d58:	51eb851f 	.word	0x51eb851f

08002d5c <__errno>:
 8002d5c:	4b01      	ldr	r3, [pc, #4]	; (8002d64 <__errno+0x8>)
 8002d5e:	6818      	ldr	r0, [r3, #0]
 8002d60:	4770      	bx	lr
 8002d62:	bf00      	nop
 8002d64:	20000014 	.word	0x20000014

08002d68 <__libc_init_array>:
 8002d68:	b570      	push	{r4, r5, r6, lr}
 8002d6a:	2600      	movs	r6, #0
 8002d6c:	4d0c      	ldr	r5, [pc, #48]	; (8002da0 <__libc_init_array+0x38>)
 8002d6e:	4c0d      	ldr	r4, [pc, #52]	; (8002da4 <__libc_init_array+0x3c>)
 8002d70:	1b64      	subs	r4, r4, r5
 8002d72:	10a4      	asrs	r4, r4, #2
 8002d74:	42a6      	cmp	r6, r4
 8002d76:	d109      	bne.n	8002d8c <__libc_init_array+0x24>
 8002d78:	f000 fc9c 	bl	80036b4 <_init>
 8002d7c:	2600      	movs	r6, #0
 8002d7e:	4d0a      	ldr	r5, [pc, #40]	; (8002da8 <__libc_init_array+0x40>)
 8002d80:	4c0a      	ldr	r4, [pc, #40]	; (8002dac <__libc_init_array+0x44>)
 8002d82:	1b64      	subs	r4, r4, r5
 8002d84:	10a4      	asrs	r4, r4, #2
 8002d86:	42a6      	cmp	r6, r4
 8002d88:	d105      	bne.n	8002d96 <__libc_init_array+0x2e>
 8002d8a:	bd70      	pop	{r4, r5, r6, pc}
 8002d8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d90:	4798      	blx	r3
 8002d92:	3601      	adds	r6, #1
 8002d94:	e7ee      	b.n	8002d74 <__libc_init_array+0xc>
 8002d96:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d9a:	4798      	blx	r3
 8002d9c:	3601      	adds	r6, #1
 8002d9e:	e7f2      	b.n	8002d86 <__libc_init_array+0x1e>
 8002da0:	08003730 	.word	0x08003730
 8002da4:	08003730 	.word	0x08003730
 8002da8:	08003730 	.word	0x08003730
 8002dac:	08003734 	.word	0x08003734

08002db0 <memset>:
 8002db0:	4603      	mov	r3, r0
 8002db2:	4402      	add	r2, r0
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d100      	bne.n	8002dba <memset+0xa>
 8002db8:	4770      	bx	lr
 8002dba:	f803 1b01 	strb.w	r1, [r3], #1
 8002dbe:	e7f9      	b.n	8002db4 <memset+0x4>

08002dc0 <siprintf>:
 8002dc0:	b40e      	push	{r1, r2, r3}
 8002dc2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002dc6:	b500      	push	{lr}
 8002dc8:	b09c      	sub	sp, #112	; 0x70
 8002dca:	ab1d      	add	r3, sp, #116	; 0x74
 8002dcc:	9002      	str	r0, [sp, #8]
 8002dce:	9006      	str	r0, [sp, #24]
 8002dd0:	9107      	str	r1, [sp, #28]
 8002dd2:	9104      	str	r1, [sp, #16]
 8002dd4:	4808      	ldr	r0, [pc, #32]	; (8002df8 <siprintf+0x38>)
 8002dd6:	4909      	ldr	r1, [pc, #36]	; (8002dfc <siprintf+0x3c>)
 8002dd8:	f853 2b04 	ldr.w	r2, [r3], #4
 8002ddc:	9105      	str	r1, [sp, #20]
 8002dde:	6800      	ldr	r0, [r0, #0]
 8002de0:	a902      	add	r1, sp, #8
 8002de2:	9301      	str	r3, [sp, #4]
 8002de4:	f000 f868 	bl	8002eb8 <_svfiprintf_r>
 8002de8:	2200      	movs	r2, #0
 8002dea:	9b02      	ldr	r3, [sp, #8]
 8002dec:	701a      	strb	r2, [r3, #0]
 8002dee:	b01c      	add	sp, #112	; 0x70
 8002df0:	f85d eb04 	ldr.w	lr, [sp], #4
 8002df4:	b003      	add	sp, #12
 8002df6:	4770      	bx	lr
 8002df8:	20000014 	.word	0x20000014
 8002dfc:	ffff0208 	.word	0xffff0208

08002e00 <__ssputs_r>:
 8002e00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e04:	688e      	ldr	r6, [r1, #8]
 8002e06:	4682      	mov	sl, r0
 8002e08:	429e      	cmp	r6, r3
 8002e0a:	460c      	mov	r4, r1
 8002e0c:	4690      	mov	r8, r2
 8002e0e:	461f      	mov	r7, r3
 8002e10:	d838      	bhi.n	8002e84 <__ssputs_r+0x84>
 8002e12:	898a      	ldrh	r2, [r1, #12]
 8002e14:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002e18:	d032      	beq.n	8002e80 <__ssputs_r+0x80>
 8002e1a:	6825      	ldr	r5, [r4, #0]
 8002e1c:	6909      	ldr	r1, [r1, #16]
 8002e1e:	3301      	adds	r3, #1
 8002e20:	eba5 0901 	sub.w	r9, r5, r1
 8002e24:	6965      	ldr	r5, [r4, #20]
 8002e26:	444b      	add	r3, r9
 8002e28:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002e2c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002e30:	106d      	asrs	r5, r5, #1
 8002e32:	429d      	cmp	r5, r3
 8002e34:	bf38      	it	cc
 8002e36:	461d      	movcc	r5, r3
 8002e38:	0553      	lsls	r3, r2, #21
 8002e3a:	d531      	bpl.n	8002ea0 <__ssputs_r+0xa0>
 8002e3c:	4629      	mov	r1, r5
 8002e3e:	f000 fb6f 	bl	8003520 <_malloc_r>
 8002e42:	4606      	mov	r6, r0
 8002e44:	b950      	cbnz	r0, 8002e5c <__ssputs_r+0x5c>
 8002e46:	230c      	movs	r3, #12
 8002e48:	f04f 30ff 	mov.w	r0, #4294967295
 8002e4c:	f8ca 3000 	str.w	r3, [sl]
 8002e50:	89a3      	ldrh	r3, [r4, #12]
 8002e52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e56:	81a3      	strh	r3, [r4, #12]
 8002e58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e5c:	464a      	mov	r2, r9
 8002e5e:	6921      	ldr	r1, [r4, #16]
 8002e60:	f000 face 	bl	8003400 <memcpy>
 8002e64:	89a3      	ldrh	r3, [r4, #12]
 8002e66:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002e6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e6e:	81a3      	strh	r3, [r4, #12]
 8002e70:	6126      	str	r6, [r4, #16]
 8002e72:	444e      	add	r6, r9
 8002e74:	6026      	str	r6, [r4, #0]
 8002e76:	463e      	mov	r6, r7
 8002e78:	6165      	str	r5, [r4, #20]
 8002e7a:	eba5 0509 	sub.w	r5, r5, r9
 8002e7e:	60a5      	str	r5, [r4, #8]
 8002e80:	42be      	cmp	r6, r7
 8002e82:	d900      	bls.n	8002e86 <__ssputs_r+0x86>
 8002e84:	463e      	mov	r6, r7
 8002e86:	4632      	mov	r2, r6
 8002e88:	4641      	mov	r1, r8
 8002e8a:	6820      	ldr	r0, [r4, #0]
 8002e8c:	f000 fac6 	bl	800341c <memmove>
 8002e90:	68a3      	ldr	r3, [r4, #8]
 8002e92:	2000      	movs	r0, #0
 8002e94:	1b9b      	subs	r3, r3, r6
 8002e96:	60a3      	str	r3, [r4, #8]
 8002e98:	6823      	ldr	r3, [r4, #0]
 8002e9a:	4433      	add	r3, r6
 8002e9c:	6023      	str	r3, [r4, #0]
 8002e9e:	e7db      	b.n	8002e58 <__ssputs_r+0x58>
 8002ea0:	462a      	mov	r2, r5
 8002ea2:	f000 fbb1 	bl	8003608 <_realloc_r>
 8002ea6:	4606      	mov	r6, r0
 8002ea8:	2800      	cmp	r0, #0
 8002eaa:	d1e1      	bne.n	8002e70 <__ssputs_r+0x70>
 8002eac:	4650      	mov	r0, sl
 8002eae:	6921      	ldr	r1, [r4, #16]
 8002eb0:	f000 face 	bl	8003450 <_free_r>
 8002eb4:	e7c7      	b.n	8002e46 <__ssputs_r+0x46>
	...

08002eb8 <_svfiprintf_r>:
 8002eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ebc:	4698      	mov	r8, r3
 8002ebe:	898b      	ldrh	r3, [r1, #12]
 8002ec0:	4607      	mov	r7, r0
 8002ec2:	061b      	lsls	r3, r3, #24
 8002ec4:	460d      	mov	r5, r1
 8002ec6:	4614      	mov	r4, r2
 8002ec8:	b09d      	sub	sp, #116	; 0x74
 8002eca:	d50e      	bpl.n	8002eea <_svfiprintf_r+0x32>
 8002ecc:	690b      	ldr	r3, [r1, #16]
 8002ece:	b963      	cbnz	r3, 8002eea <_svfiprintf_r+0x32>
 8002ed0:	2140      	movs	r1, #64	; 0x40
 8002ed2:	f000 fb25 	bl	8003520 <_malloc_r>
 8002ed6:	6028      	str	r0, [r5, #0]
 8002ed8:	6128      	str	r0, [r5, #16]
 8002eda:	b920      	cbnz	r0, 8002ee6 <_svfiprintf_r+0x2e>
 8002edc:	230c      	movs	r3, #12
 8002ede:	603b      	str	r3, [r7, #0]
 8002ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ee4:	e0d1      	b.n	800308a <_svfiprintf_r+0x1d2>
 8002ee6:	2340      	movs	r3, #64	; 0x40
 8002ee8:	616b      	str	r3, [r5, #20]
 8002eea:	2300      	movs	r3, #0
 8002eec:	9309      	str	r3, [sp, #36]	; 0x24
 8002eee:	2320      	movs	r3, #32
 8002ef0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002ef4:	2330      	movs	r3, #48	; 0x30
 8002ef6:	f04f 0901 	mov.w	r9, #1
 8002efa:	f8cd 800c 	str.w	r8, [sp, #12]
 8002efe:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80030a4 <_svfiprintf_r+0x1ec>
 8002f02:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002f06:	4623      	mov	r3, r4
 8002f08:	469a      	mov	sl, r3
 8002f0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002f0e:	b10a      	cbz	r2, 8002f14 <_svfiprintf_r+0x5c>
 8002f10:	2a25      	cmp	r2, #37	; 0x25
 8002f12:	d1f9      	bne.n	8002f08 <_svfiprintf_r+0x50>
 8002f14:	ebba 0b04 	subs.w	fp, sl, r4
 8002f18:	d00b      	beq.n	8002f32 <_svfiprintf_r+0x7a>
 8002f1a:	465b      	mov	r3, fp
 8002f1c:	4622      	mov	r2, r4
 8002f1e:	4629      	mov	r1, r5
 8002f20:	4638      	mov	r0, r7
 8002f22:	f7ff ff6d 	bl	8002e00 <__ssputs_r>
 8002f26:	3001      	adds	r0, #1
 8002f28:	f000 80aa 	beq.w	8003080 <_svfiprintf_r+0x1c8>
 8002f2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002f2e:	445a      	add	r2, fp
 8002f30:	9209      	str	r2, [sp, #36]	; 0x24
 8002f32:	f89a 3000 	ldrb.w	r3, [sl]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	f000 80a2 	beq.w	8003080 <_svfiprintf_r+0x1c8>
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	f04f 32ff 	mov.w	r2, #4294967295
 8002f42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002f46:	f10a 0a01 	add.w	sl, sl, #1
 8002f4a:	9304      	str	r3, [sp, #16]
 8002f4c:	9307      	str	r3, [sp, #28]
 8002f4e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002f52:	931a      	str	r3, [sp, #104]	; 0x68
 8002f54:	4654      	mov	r4, sl
 8002f56:	2205      	movs	r2, #5
 8002f58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f5c:	4851      	ldr	r0, [pc, #324]	; (80030a4 <_svfiprintf_r+0x1ec>)
 8002f5e:	f000 fa41 	bl	80033e4 <memchr>
 8002f62:	9a04      	ldr	r2, [sp, #16]
 8002f64:	b9d8      	cbnz	r0, 8002f9e <_svfiprintf_r+0xe6>
 8002f66:	06d0      	lsls	r0, r2, #27
 8002f68:	bf44      	itt	mi
 8002f6a:	2320      	movmi	r3, #32
 8002f6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002f70:	0711      	lsls	r1, r2, #28
 8002f72:	bf44      	itt	mi
 8002f74:	232b      	movmi	r3, #43	; 0x2b
 8002f76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002f7a:	f89a 3000 	ldrb.w	r3, [sl]
 8002f7e:	2b2a      	cmp	r3, #42	; 0x2a
 8002f80:	d015      	beq.n	8002fae <_svfiprintf_r+0xf6>
 8002f82:	4654      	mov	r4, sl
 8002f84:	2000      	movs	r0, #0
 8002f86:	f04f 0c0a 	mov.w	ip, #10
 8002f8a:	9a07      	ldr	r2, [sp, #28]
 8002f8c:	4621      	mov	r1, r4
 8002f8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002f92:	3b30      	subs	r3, #48	; 0x30
 8002f94:	2b09      	cmp	r3, #9
 8002f96:	d94e      	bls.n	8003036 <_svfiprintf_r+0x17e>
 8002f98:	b1b0      	cbz	r0, 8002fc8 <_svfiprintf_r+0x110>
 8002f9a:	9207      	str	r2, [sp, #28]
 8002f9c:	e014      	b.n	8002fc8 <_svfiprintf_r+0x110>
 8002f9e:	eba0 0308 	sub.w	r3, r0, r8
 8002fa2:	fa09 f303 	lsl.w	r3, r9, r3
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	46a2      	mov	sl, r4
 8002faa:	9304      	str	r3, [sp, #16]
 8002fac:	e7d2      	b.n	8002f54 <_svfiprintf_r+0x9c>
 8002fae:	9b03      	ldr	r3, [sp, #12]
 8002fb0:	1d19      	adds	r1, r3, #4
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	9103      	str	r1, [sp, #12]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	bfbb      	ittet	lt
 8002fba:	425b      	neglt	r3, r3
 8002fbc:	f042 0202 	orrlt.w	r2, r2, #2
 8002fc0:	9307      	strge	r3, [sp, #28]
 8002fc2:	9307      	strlt	r3, [sp, #28]
 8002fc4:	bfb8      	it	lt
 8002fc6:	9204      	strlt	r2, [sp, #16]
 8002fc8:	7823      	ldrb	r3, [r4, #0]
 8002fca:	2b2e      	cmp	r3, #46	; 0x2e
 8002fcc:	d10c      	bne.n	8002fe8 <_svfiprintf_r+0x130>
 8002fce:	7863      	ldrb	r3, [r4, #1]
 8002fd0:	2b2a      	cmp	r3, #42	; 0x2a
 8002fd2:	d135      	bne.n	8003040 <_svfiprintf_r+0x188>
 8002fd4:	9b03      	ldr	r3, [sp, #12]
 8002fd6:	3402      	adds	r4, #2
 8002fd8:	1d1a      	adds	r2, r3, #4
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	9203      	str	r2, [sp, #12]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	bfb8      	it	lt
 8002fe2:	f04f 33ff 	movlt.w	r3, #4294967295
 8002fe6:	9305      	str	r3, [sp, #20]
 8002fe8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80030a8 <_svfiprintf_r+0x1f0>
 8002fec:	2203      	movs	r2, #3
 8002fee:	4650      	mov	r0, sl
 8002ff0:	7821      	ldrb	r1, [r4, #0]
 8002ff2:	f000 f9f7 	bl	80033e4 <memchr>
 8002ff6:	b140      	cbz	r0, 800300a <_svfiprintf_r+0x152>
 8002ff8:	2340      	movs	r3, #64	; 0x40
 8002ffa:	eba0 000a 	sub.w	r0, r0, sl
 8002ffe:	fa03 f000 	lsl.w	r0, r3, r0
 8003002:	9b04      	ldr	r3, [sp, #16]
 8003004:	3401      	adds	r4, #1
 8003006:	4303      	orrs	r3, r0
 8003008:	9304      	str	r3, [sp, #16]
 800300a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800300e:	2206      	movs	r2, #6
 8003010:	4826      	ldr	r0, [pc, #152]	; (80030ac <_svfiprintf_r+0x1f4>)
 8003012:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003016:	f000 f9e5 	bl	80033e4 <memchr>
 800301a:	2800      	cmp	r0, #0
 800301c:	d038      	beq.n	8003090 <_svfiprintf_r+0x1d8>
 800301e:	4b24      	ldr	r3, [pc, #144]	; (80030b0 <_svfiprintf_r+0x1f8>)
 8003020:	bb1b      	cbnz	r3, 800306a <_svfiprintf_r+0x1b2>
 8003022:	9b03      	ldr	r3, [sp, #12]
 8003024:	3307      	adds	r3, #7
 8003026:	f023 0307 	bic.w	r3, r3, #7
 800302a:	3308      	adds	r3, #8
 800302c:	9303      	str	r3, [sp, #12]
 800302e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003030:	4433      	add	r3, r6
 8003032:	9309      	str	r3, [sp, #36]	; 0x24
 8003034:	e767      	b.n	8002f06 <_svfiprintf_r+0x4e>
 8003036:	460c      	mov	r4, r1
 8003038:	2001      	movs	r0, #1
 800303a:	fb0c 3202 	mla	r2, ip, r2, r3
 800303e:	e7a5      	b.n	8002f8c <_svfiprintf_r+0xd4>
 8003040:	2300      	movs	r3, #0
 8003042:	f04f 0c0a 	mov.w	ip, #10
 8003046:	4619      	mov	r1, r3
 8003048:	3401      	adds	r4, #1
 800304a:	9305      	str	r3, [sp, #20]
 800304c:	4620      	mov	r0, r4
 800304e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003052:	3a30      	subs	r2, #48	; 0x30
 8003054:	2a09      	cmp	r2, #9
 8003056:	d903      	bls.n	8003060 <_svfiprintf_r+0x1a8>
 8003058:	2b00      	cmp	r3, #0
 800305a:	d0c5      	beq.n	8002fe8 <_svfiprintf_r+0x130>
 800305c:	9105      	str	r1, [sp, #20]
 800305e:	e7c3      	b.n	8002fe8 <_svfiprintf_r+0x130>
 8003060:	4604      	mov	r4, r0
 8003062:	2301      	movs	r3, #1
 8003064:	fb0c 2101 	mla	r1, ip, r1, r2
 8003068:	e7f0      	b.n	800304c <_svfiprintf_r+0x194>
 800306a:	ab03      	add	r3, sp, #12
 800306c:	9300      	str	r3, [sp, #0]
 800306e:	462a      	mov	r2, r5
 8003070:	4638      	mov	r0, r7
 8003072:	4b10      	ldr	r3, [pc, #64]	; (80030b4 <_svfiprintf_r+0x1fc>)
 8003074:	a904      	add	r1, sp, #16
 8003076:	f3af 8000 	nop.w
 800307a:	1c42      	adds	r2, r0, #1
 800307c:	4606      	mov	r6, r0
 800307e:	d1d6      	bne.n	800302e <_svfiprintf_r+0x176>
 8003080:	89ab      	ldrh	r3, [r5, #12]
 8003082:	065b      	lsls	r3, r3, #25
 8003084:	f53f af2c 	bmi.w	8002ee0 <_svfiprintf_r+0x28>
 8003088:	9809      	ldr	r0, [sp, #36]	; 0x24
 800308a:	b01d      	add	sp, #116	; 0x74
 800308c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003090:	ab03      	add	r3, sp, #12
 8003092:	9300      	str	r3, [sp, #0]
 8003094:	462a      	mov	r2, r5
 8003096:	4638      	mov	r0, r7
 8003098:	4b06      	ldr	r3, [pc, #24]	; (80030b4 <_svfiprintf_r+0x1fc>)
 800309a:	a904      	add	r1, sp, #16
 800309c:	f000 f87c 	bl	8003198 <_printf_i>
 80030a0:	e7eb      	b.n	800307a <_svfiprintf_r+0x1c2>
 80030a2:	bf00      	nop
 80030a4:	080036fc 	.word	0x080036fc
 80030a8:	08003702 	.word	0x08003702
 80030ac:	08003706 	.word	0x08003706
 80030b0:	00000000 	.word	0x00000000
 80030b4:	08002e01 	.word	0x08002e01

080030b8 <_printf_common>:
 80030b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80030bc:	4616      	mov	r6, r2
 80030be:	4699      	mov	r9, r3
 80030c0:	688a      	ldr	r2, [r1, #8]
 80030c2:	690b      	ldr	r3, [r1, #16]
 80030c4:	4607      	mov	r7, r0
 80030c6:	4293      	cmp	r3, r2
 80030c8:	bfb8      	it	lt
 80030ca:	4613      	movlt	r3, r2
 80030cc:	6033      	str	r3, [r6, #0]
 80030ce:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80030d2:	460c      	mov	r4, r1
 80030d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80030d8:	b10a      	cbz	r2, 80030de <_printf_common+0x26>
 80030da:	3301      	adds	r3, #1
 80030dc:	6033      	str	r3, [r6, #0]
 80030de:	6823      	ldr	r3, [r4, #0]
 80030e0:	0699      	lsls	r1, r3, #26
 80030e2:	bf42      	ittt	mi
 80030e4:	6833      	ldrmi	r3, [r6, #0]
 80030e6:	3302      	addmi	r3, #2
 80030e8:	6033      	strmi	r3, [r6, #0]
 80030ea:	6825      	ldr	r5, [r4, #0]
 80030ec:	f015 0506 	ands.w	r5, r5, #6
 80030f0:	d106      	bne.n	8003100 <_printf_common+0x48>
 80030f2:	f104 0a19 	add.w	sl, r4, #25
 80030f6:	68e3      	ldr	r3, [r4, #12]
 80030f8:	6832      	ldr	r2, [r6, #0]
 80030fa:	1a9b      	subs	r3, r3, r2
 80030fc:	42ab      	cmp	r3, r5
 80030fe:	dc28      	bgt.n	8003152 <_printf_common+0x9a>
 8003100:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003104:	1e13      	subs	r3, r2, #0
 8003106:	6822      	ldr	r2, [r4, #0]
 8003108:	bf18      	it	ne
 800310a:	2301      	movne	r3, #1
 800310c:	0692      	lsls	r2, r2, #26
 800310e:	d42d      	bmi.n	800316c <_printf_common+0xb4>
 8003110:	4649      	mov	r1, r9
 8003112:	4638      	mov	r0, r7
 8003114:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003118:	47c0      	blx	r8
 800311a:	3001      	adds	r0, #1
 800311c:	d020      	beq.n	8003160 <_printf_common+0xa8>
 800311e:	6823      	ldr	r3, [r4, #0]
 8003120:	68e5      	ldr	r5, [r4, #12]
 8003122:	f003 0306 	and.w	r3, r3, #6
 8003126:	2b04      	cmp	r3, #4
 8003128:	bf18      	it	ne
 800312a:	2500      	movne	r5, #0
 800312c:	6832      	ldr	r2, [r6, #0]
 800312e:	f04f 0600 	mov.w	r6, #0
 8003132:	68a3      	ldr	r3, [r4, #8]
 8003134:	bf08      	it	eq
 8003136:	1aad      	subeq	r5, r5, r2
 8003138:	6922      	ldr	r2, [r4, #16]
 800313a:	bf08      	it	eq
 800313c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003140:	4293      	cmp	r3, r2
 8003142:	bfc4      	itt	gt
 8003144:	1a9b      	subgt	r3, r3, r2
 8003146:	18ed      	addgt	r5, r5, r3
 8003148:	341a      	adds	r4, #26
 800314a:	42b5      	cmp	r5, r6
 800314c:	d11a      	bne.n	8003184 <_printf_common+0xcc>
 800314e:	2000      	movs	r0, #0
 8003150:	e008      	b.n	8003164 <_printf_common+0xac>
 8003152:	2301      	movs	r3, #1
 8003154:	4652      	mov	r2, sl
 8003156:	4649      	mov	r1, r9
 8003158:	4638      	mov	r0, r7
 800315a:	47c0      	blx	r8
 800315c:	3001      	adds	r0, #1
 800315e:	d103      	bne.n	8003168 <_printf_common+0xb0>
 8003160:	f04f 30ff 	mov.w	r0, #4294967295
 8003164:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003168:	3501      	adds	r5, #1
 800316a:	e7c4      	b.n	80030f6 <_printf_common+0x3e>
 800316c:	2030      	movs	r0, #48	; 0x30
 800316e:	18e1      	adds	r1, r4, r3
 8003170:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003174:	1c5a      	adds	r2, r3, #1
 8003176:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800317a:	4422      	add	r2, r4
 800317c:	3302      	adds	r3, #2
 800317e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003182:	e7c5      	b.n	8003110 <_printf_common+0x58>
 8003184:	2301      	movs	r3, #1
 8003186:	4622      	mov	r2, r4
 8003188:	4649      	mov	r1, r9
 800318a:	4638      	mov	r0, r7
 800318c:	47c0      	blx	r8
 800318e:	3001      	adds	r0, #1
 8003190:	d0e6      	beq.n	8003160 <_printf_common+0xa8>
 8003192:	3601      	adds	r6, #1
 8003194:	e7d9      	b.n	800314a <_printf_common+0x92>
	...

08003198 <_printf_i>:
 8003198:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800319c:	7e0f      	ldrb	r7, [r1, #24]
 800319e:	4691      	mov	r9, r2
 80031a0:	2f78      	cmp	r7, #120	; 0x78
 80031a2:	4680      	mov	r8, r0
 80031a4:	460c      	mov	r4, r1
 80031a6:	469a      	mov	sl, r3
 80031a8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80031aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80031ae:	d807      	bhi.n	80031c0 <_printf_i+0x28>
 80031b0:	2f62      	cmp	r7, #98	; 0x62
 80031b2:	d80a      	bhi.n	80031ca <_printf_i+0x32>
 80031b4:	2f00      	cmp	r7, #0
 80031b6:	f000 80d9 	beq.w	800336c <_printf_i+0x1d4>
 80031ba:	2f58      	cmp	r7, #88	; 0x58
 80031bc:	f000 80a4 	beq.w	8003308 <_printf_i+0x170>
 80031c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80031c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80031c8:	e03a      	b.n	8003240 <_printf_i+0xa8>
 80031ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80031ce:	2b15      	cmp	r3, #21
 80031d0:	d8f6      	bhi.n	80031c0 <_printf_i+0x28>
 80031d2:	a101      	add	r1, pc, #4	; (adr r1, 80031d8 <_printf_i+0x40>)
 80031d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80031d8:	08003231 	.word	0x08003231
 80031dc:	08003245 	.word	0x08003245
 80031e0:	080031c1 	.word	0x080031c1
 80031e4:	080031c1 	.word	0x080031c1
 80031e8:	080031c1 	.word	0x080031c1
 80031ec:	080031c1 	.word	0x080031c1
 80031f0:	08003245 	.word	0x08003245
 80031f4:	080031c1 	.word	0x080031c1
 80031f8:	080031c1 	.word	0x080031c1
 80031fc:	080031c1 	.word	0x080031c1
 8003200:	080031c1 	.word	0x080031c1
 8003204:	08003353 	.word	0x08003353
 8003208:	08003275 	.word	0x08003275
 800320c:	08003335 	.word	0x08003335
 8003210:	080031c1 	.word	0x080031c1
 8003214:	080031c1 	.word	0x080031c1
 8003218:	08003375 	.word	0x08003375
 800321c:	080031c1 	.word	0x080031c1
 8003220:	08003275 	.word	0x08003275
 8003224:	080031c1 	.word	0x080031c1
 8003228:	080031c1 	.word	0x080031c1
 800322c:	0800333d 	.word	0x0800333d
 8003230:	682b      	ldr	r3, [r5, #0]
 8003232:	1d1a      	adds	r2, r3, #4
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	602a      	str	r2, [r5, #0]
 8003238:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800323c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003240:	2301      	movs	r3, #1
 8003242:	e0a4      	b.n	800338e <_printf_i+0x1f6>
 8003244:	6820      	ldr	r0, [r4, #0]
 8003246:	6829      	ldr	r1, [r5, #0]
 8003248:	0606      	lsls	r6, r0, #24
 800324a:	f101 0304 	add.w	r3, r1, #4
 800324e:	d50a      	bpl.n	8003266 <_printf_i+0xce>
 8003250:	680e      	ldr	r6, [r1, #0]
 8003252:	602b      	str	r3, [r5, #0]
 8003254:	2e00      	cmp	r6, #0
 8003256:	da03      	bge.n	8003260 <_printf_i+0xc8>
 8003258:	232d      	movs	r3, #45	; 0x2d
 800325a:	4276      	negs	r6, r6
 800325c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003260:	230a      	movs	r3, #10
 8003262:	485e      	ldr	r0, [pc, #376]	; (80033dc <_printf_i+0x244>)
 8003264:	e019      	b.n	800329a <_printf_i+0x102>
 8003266:	680e      	ldr	r6, [r1, #0]
 8003268:	f010 0f40 	tst.w	r0, #64	; 0x40
 800326c:	602b      	str	r3, [r5, #0]
 800326e:	bf18      	it	ne
 8003270:	b236      	sxthne	r6, r6
 8003272:	e7ef      	b.n	8003254 <_printf_i+0xbc>
 8003274:	682b      	ldr	r3, [r5, #0]
 8003276:	6820      	ldr	r0, [r4, #0]
 8003278:	1d19      	adds	r1, r3, #4
 800327a:	6029      	str	r1, [r5, #0]
 800327c:	0601      	lsls	r1, r0, #24
 800327e:	d501      	bpl.n	8003284 <_printf_i+0xec>
 8003280:	681e      	ldr	r6, [r3, #0]
 8003282:	e002      	b.n	800328a <_printf_i+0xf2>
 8003284:	0646      	lsls	r6, r0, #25
 8003286:	d5fb      	bpl.n	8003280 <_printf_i+0xe8>
 8003288:	881e      	ldrh	r6, [r3, #0]
 800328a:	2f6f      	cmp	r7, #111	; 0x6f
 800328c:	bf0c      	ite	eq
 800328e:	2308      	moveq	r3, #8
 8003290:	230a      	movne	r3, #10
 8003292:	4852      	ldr	r0, [pc, #328]	; (80033dc <_printf_i+0x244>)
 8003294:	2100      	movs	r1, #0
 8003296:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800329a:	6865      	ldr	r5, [r4, #4]
 800329c:	2d00      	cmp	r5, #0
 800329e:	bfa8      	it	ge
 80032a0:	6821      	ldrge	r1, [r4, #0]
 80032a2:	60a5      	str	r5, [r4, #8]
 80032a4:	bfa4      	itt	ge
 80032a6:	f021 0104 	bicge.w	r1, r1, #4
 80032aa:	6021      	strge	r1, [r4, #0]
 80032ac:	b90e      	cbnz	r6, 80032b2 <_printf_i+0x11a>
 80032ae:	2d00      	cmp	r5, #0
 80032b0:	d04d      	beq.n	800334e <_printf_i+0x1b6>
 80032b2:	4615      	mov	r5, r2
 80032b4:	fbb6 f1f3 	udiv	r1, r6, r3
 80032b8:	fb03 6711 	mls	r7, r3, r1, r6
 80032bc:	5dc7      	ldrb	r7, [r0, r7]
 80032be:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80032c2:	4637      	mov	r7, r6
 80032c4:	42bb      	cmp	r3, r7
 80032c6:	460e      	mov	r6, r1
 80032c8:	d9f4      	bls.n	80032b4 <_printf_i+0x11c>
 80032ca:	2b08      	cmp	r3, #8
 80032cc:	d10b      	bne.n	80032e6 <_printf_i+0x14e>
 80032ce:	6823      	ldr	r3, [r4, #0]
 80032d0:	07de      	lsls	r6, r3, #31
 80032d2:	d508      	bpl.n	80032e6 <_printf_i+0x14e>
 80032d4:	6923      	ldr	r3, [r4, #16]
 80032d6:	6861      	ldr	r1, [r4, #4]
 80032d8:	4299      	cmp	r1, r3
 80032da:	bfde      	ittt	le
 80032dc:	2330      	movle	r3, #48	; 0x30
 80032de:	f805 3c01 	strble.w	r3, [r5, #-1]
 80032e2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80032e6:	1b52      	subs	r2, r2, r5
 80032e8:	6122      	str	r2, [r4, #16]
 80032ea:	464b      	mov	r3, r9
 80032ec:	4621      	mov	r1, r4
 80032ee:	4640      	mov	r0, r8
 80032f0:	f8cd a000 	str.w	sl, [sp]
 80032f4:	aa03      	add	r2, sp, #12
 80032f6:	f7ff fedf 	bl	80030b8 <_printf_common>
 80032fa:	3001      	adds	r0, #1
 80032fc:	d14c      	bne.n	8003398 <_printf_i+0x200>
 80032fe:	f04f 30ff 	mov.w	r0, #4294967295
 8003302:	b004      	add	sp, #16
 8003304:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003308:	4834      	ldr	r0, [pc, #208]	; (80033dc <_printf_i+0x244>)
 800330a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800330e:	6829      	ldr	r1, [r5, #0]
 8003310:	6823      	ldr	r3, [r4, #0]
 8003312:	f851 6b04 	ldr.w	r6, [r1], #4
 8003316:	6029      	str	r1, [r5, #0]
 8003318:	061d      	lsls	r5, r3, #24
 800331a:	d514      	bpl.n	8003346 <_printf_i+0x1ae>
 800331c:	07df      	lsls	r7, r3, #31
 800331e:	bf44      	itt	mi
 8003320:	f043 0320 	orrmi.w	r3, r3, #32
 8003324:	6023      	strmi	r3, [r4, #0]
 8003326:	b91e      	cbnz	r6, 8003330 <_printf_i+0x198>
 8003328:	6823      	ldr	r3, [r4, #0]
 800332a:	f023 0320 	bic.w	r3, r3, #32
 800332e:	6023      	str	r3, [r4, #0]
 8003330:	2310      	movs	r3, #16
 8003332:	e7af      	b.n	8003294 <_printf_i+0xfc>
 8003334:	6823      	ldr	r3, [r4, #0]
 8003336:	f043 0320 	orr.w	r3, r3, #32
 800333a:	6023      	str	r3, [r4, #0]
 800333c:	2378      	movs	r3, #120	; 0x78
 800333e:	4828      	ldr	r0, [pc, #160]	; (80033e0 <_printf_i+0x248>)
 8003340:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003344:	e7e3      	b.n	800330e <_printf_i+0x176>
 8003346:	0659      	lsls	r1, r3, #25
 8003348:	bf48      	it	mi
 800334a:	b2b6      	uxthmi	r6, r6
 800334c:	e7e6      	b.n	800331c <_printf_i+0x184>
 800334e:	4615      	mov	r5, r2
 8003350:	e7bb      	b.n	80032ca <_printf_i+0x132>
 8003352:	682b      	ldr	r3, [r5, #0]
 8003354:	6826      	ldr	r6, [r4, #0]
 8003356:	1d18      	adds	r0, r3, #4
 8003358:	6961      	ldr	r1, [r4, #20]
 800335a:	6028      	str	r0, [r5, #0]
 800335c:	0635      	lsls	r5, r6, #24
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	d501      	bpl.n	8003366 <_printf_i+0x1ce>
 8003362:	6019      	str	r1, [r3, #0]
 8003364:	e002      	b.n	800336c <_printf_i+0x1d4>
 8003366:	0670      	lsls	r0, r6, #25
 8003368:	d5fb      	bpl.n	8003362 <_printf_i+0x1ca>
 800336a:	8019      	strh	r1, [r3, #0]
 800336c:	2300      	movs	r3, #0
 800336e:	4615      	mov	r5, r2
 8003370:	6123      	str	r3, [r4, #16]
 8003372:	e7ba      	b.n	80032ea <_printf_i+0x152>
 8003374:	682b      	ldr	r3, [r5, #0]
 8003376:	2100      	movs	r1, #0
 8003378:	1d1a      	adds	r2, r3, #4
 800337a:	602a      	str	r2, [r5, #0]
 800337c:	681d      	ldr	r5, [r3, #0]
 800337e:	6862      	ldr	r2, [r4, #4]
 8003380:	4628      	mov	r0, r5
 8003382:	f000 f82f 	bl	80033e4 <memchr>
 8003386:	b108      	cbz	r0, 800338c <_printf_i+0x1f4>
 8003388:	1b40      	subs	r0, r0, r5
 800338a:	6060      	str	r0, [r4, #4]
 800338c:	6863      	ldr	r3, [r4, #4]
 800338e:	6123      	str	r3, [r4, #16]
 8003390:	2300      	movs	r3, #0
 8003392:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003396:	e7a8      	b.n	80032ea <_printf_i+0x152>
 8003398:	462a      	mov	r2, r5
 800339a:	4649      	mov	r1, r9
 800339c:	4640      	mov	r0, r8
 800339e:	6923      	ldr	r3, [r4, #16]
 80033a0:	47d0      	blx	sl
 80033a2:	3001      	adds	r0, #1
 80033a4:	d0ab      	beq.n	80032fe <_printf_i+0x166>
 80033a6:	6823      	ldr	r3, [r4, #0]
 80033a8:	079b      	lsls	r3, r3, #30
 80033aa:	d413      	bmi.n	80033d4 <_printf_i+0x23c>
 80033ac:	68e0      	ldr	r0, [r4, #12]
 80033ae:	9b03      	ldr	r3, [sp, #12]
 80033b0:	4298      	cmp	r0, r3
 80033b2:	bfb8      	it	lt
 80033b4:	4618      	movlt	r0, r3
 80033b6:	e7a4      	b.n	8003302 <_printf_i+0x16a>
 80033b8:	2301      	movs	r3, #1
 80033ba:	4632      	mov	r2, r6
 80033bc:	4649      	mov	r1, r9
 80033be:	4640      	mov	r0, r8
 80033c0:	47d0      	blx	sl
 80033c2:	3001      	adds	r0, #1
 80033c4:	d09b      	beq.n	80032fe <_printf_i+0x166>
 80033c6:	3501      	adds	r5, #1
 80033c8:	68e3      	ldr	r3, [r4, #12]
 80033ca:	9903      	ldr	r1, [sp, #12]
 80033cc:	1a5b      	subs	r3, r3, r1
 80033ce:	42ab      	cmp	r3, r5
 80033d0:	dcf2      	bgt.n	80033b8 <_printf_i+0x220>
 80033d2:	e7eb      	b.n	80033ac <_printf_i+0x214>
 80033d4:	2500      	movs	r5, #0
 80033d6:	f104 0619 	add.w	r6, r4, #25
 80033da:	e7f5      	b.n	80033c8 <_printf_i+0x230>
 80033dc:	0800370d 	.word	0x0800370d
 80033e0:	0800371e 	.word	0x0800371e

080033e4 <memchr>:
 80033e4:	4603      	mov	r3, r0
 80033e6:	b510      	push	{r4, lr}
 80033e8:	b2c9      	uxtb	r1, r1
 80033ea:	4402      	add	r2, r0
 80033ec:	4293      	cmp	r3, r2
 80033ee:	4618      	mov	r0, r3
 80033f0:	d101      	bne.n	80033f6 <memchr+0x12>
 80033f2:	2000      	movs	r0, #0
 80033f4:	e003      	b.n	80033fe <memchr+0x1a>
 80033f6:	7804      	ldrb	r4, [r0, #0]
 80033f8:	3301      	adds	r3, #1
 80033fa:	428c      	cmp	r4, r1
 80033fc:	d1f6      	bne.n	80033ec <memchr+0x8>
 80033fe:	bd10      	pop	{r4, pc}

08003400 <memcpy>:
 8003400:	440a      	add	r2, r1
 8003402:	4291      	cmp	r1, r2
 8003404:	f100 33ff 	add.w	r3, r0, #4294967295
 8003408:	d100      	bne.n	800340c <memcpy+0xc>
 800340a:	4770      	bx	lr
 800340c:	b510      	push	{r4, lr}
 800340e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003412:	4291      	cmp	r1, r2
 8003414:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003418:	d1f9      	bne.n	800340e <memcpy+0xe>
 800341a:	bd10      	pop	{r4, pc}

0800341c <memmove>:
 800341c:	4288      	cmp	r0, r1
 800341e:	b510      	push	{r4, lr}
 8003420:	eb01 0402 	add.w	r4, r1, r2
 8003424:	d902      	bls.n	800342c <memmove+0x10>
 8003426:	4284      	cmp	r4, r0
 8003428:	4623      	mov	r3, r4
 800342a:	d807      	bhi.n	800343c <memmove+0x20>
 800342c:	1e43      	subs	r3, r0, #1
 800342e:	42a1      	cmp	r1, r4
 8003430:	d008      	beq.n	8003444 <memmove+0x28>
 8003432:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003436:	f803 2f01 	strb.w	r2, [r3, #1]!
 800343a:	e7f8      	b.n	800342e <memmove+0x12>
 800343c:	4601      	mov	r1, r0
 800343e:	4402      	add	r2, r0
 8003440:	428a      	cmp	r2, r1
 8003442:	d100      	bne.n	8003446 <memmove+0x2a>
 8003444:	bd10      	pop	{r4, pc}
 8003446:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800344a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800344e:	e7f7      	b.n	8003440 <memmove+0x24>

08003450 <_free_r>:
 8003450:	b538      	push	{r3, r4, r5, lr}
 8003452:	4605      	mov	r5, r0
 8003454:	2900      	cmp	r1, #0
 8003456:	d040      	beq.n	80034da <_free_r+0x8a>
 8003458:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800345c:	1f0c      	subs	r4, r1, #4
 800345e:	2b00      	cmp	r3, #0
 8003460:	bfb8      	it	lt
 8003462:	18e4      	addlt	r4, r4, r3
 8003464:	f000 f910 	bl	8003688 <__malloc_lock>
 8003468:	4a1c      	ldr	r2, [pc, #112]	; (80034dc <_free_r+0x8c>)
 800346a:	6813      	ldr	r3, [r2, #0]
 800346c:	b933      	cbnz	r3, 800347c <_free_r+0x2c>
 800346e:	6063      	str	r3, [r4, #4]
 8003470:	6014      	str	r4, [r2, #0]
 8003472:	4628      	mov	r0, r5
 8003474:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003478:	f000 b90c 	b.w	8003694 <__malloc_unlock>
 800347c:	42a3      	cmp	r3, r4
 800347e:	d908      	bls.n	8003492 <_free_r+0x42>
 8003480:	6820      	ldr	r0, [r4, #0]
 8003482:	1821      	adds	r1, r4, r0
 8003484:	428b      	cmp	r3, r1
 8003486:	bf01      	itttt	eq
 8003488:	6819      	ldreq	r1, [r3, #0]
 800348a:	685b      	ldreq	r3, [r3, #4]
 800348c:	1809      	addeq	r1, r1, r0
 800348e:	6021      	streq	r1, [r4, #0]
 8003490:	e7ed      	b.n	800346e <_free_r+0x1e>
 8003492:	461a      	mov	r2, r3
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	b10b      	cbz	r3, 800349c <_free_r+0x4c>
 8003498:	42a3      	cmp	r3, r4
 800349a:	d9fa      	bls.n	8003492 <_free_r+0x42>
 800349c:	6811      	ldr	r1, [r2, #0]
 800349e:	1850      	adds	r0, r2, r1
 80034a0:	42a0      	cmp	r0, r4
 80034a2:	d10b      	bne.n	80034bc <_free_r+0x6c>
 80034a4:	6820      	ldr	r0, [r4, #0]
 80034a6:	4401      	add	r1, r0
 80034a8:	1850      	adds	r0, r2, r1
 80034aa:	4283      	cmp	r3, r0
 80034ac:	6011      	str	r1, [r2, #0]
 80034ae:	d1e0      	bne.n	8003472 <_free_r+0x22>
 80034b0:	6818      	ldr	r0, [r3, #0]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	4401      	add	r1, r0
 80034b6:	6011      	str	r1, [r2, #0]
 80034b8:	6053      	str	r3, [r2, #4]
 80034ba:	e7da      	b.n	8003472 <_free_r+0x22>
 80034bc:	d902      	bls.n	80034c4 <_free_r+0x74>
 80034be:	230c      	movs	r3, #12
 80034c0:	602b      	str	r3, [r5, #0]
 80034c2:	e7d6      	b.n	8003472 <_free_r+0x22>
 80034c4:	6820      	ldr	r0, [r4, #0]
 80034c6:	1821      	adds	r1, r4, r0
 80034c8:	428b      	cmp	r3, r1
 80034ca:	bf01      	itttt	eq
 80034cc:	6819      	ldreq	r1, [r3, #0]
 80034ce:	685b      	ldreq	r3, [r3, #4]
 80034d0:	1809      	addeq	r1, r1, r0
 80034d2:	6021      	streq	r1, [r4, #0]
 80034d4:	6063      	str	r3, [r4, #4]
 80034d6:	6054      	str	r4, [r2, #4]
 80034d8:	e7cb      	b.n	8003472 <_free_r+0x22>
 80034da:	bd38      	pop	{r3, r4, r5, pc}
 80034dc:	200001f0 	.word	0x200001f0

080034e0 <sbrk_aligned>:
 80034e0:	b570      	push	{r4, r5, r6, lr}
 80034e2:	4e0e      	ldr	r6, [pc, #56]	; (800351c <sbrk_aligned+0x3c>)
 80034e4:	460c      	mov	r4, r1
 80034e6:	6831      	ldr	r1, [r6, #0]
 80034e8:	4605      	mov	r5, r0
 80034ea:	b911      	cbnz	r1, 80034f2 <sbrk_aligned+0x12>
 80034ec:	f000 f8bc 	bl	8003668 <_sbrk_r>
 80034f0:	6030      	str	r0, [r6, #0]
 80034f2:	4621      	mov	r1, r4
 80034f4:	4628      	mov	r0, r5
 80034f6:	f000 f8b7 	bl	8003668 <_sbrk_r>
 80034fa:	1c43      	adds	r3, r0, #1
 80034fc:	d00a      	beq.n	8003514 <sbrk_aligned+0x34>
 80034fe:	1cc4      	adds	r4, r0, #3
 8003500:	f024 0403 	bic.w	r4, r4, #3
 8003504:	42a0      	cmp	r0, r4
 8003506:	d007      	beq.n	8003518 <sbrk_aligned+0x38>
 8003508:	1a21      	subs	r1, r4, r0
 800350a:	4628      	mov	r0, r5
 800350c:	f000 f8ac 	bl	8003668 <_sbrk_r>
 8003510:	3001      	adds	r0, #1
 8003512:	d101      	bne.n	8003518 <sbrk_aligned+0x38>
 8003514:	f04f 34ff 	mov.w	r4, #4294967295
 8003518:	4620      	mov	r0, r4
 800351a:	bd70      	pop	{r4, r5, r6, pc}
 800351c:	200001f4 	.word	0x200001f4

08003520 <_malloc_r>:
 8003520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003524:	1ccd      	adds	r5, r1, #3
 8003526:	f025 0503 	bic.w	r5, r5, #3
 800352a:	3508      	adds	r5, #8
 800352c:	2d0c      	cmp	r5, #12
 800352e:	bf38      	it	cc
 8003530:	250c      	movcc	r5, #12
 8003532:	2d00      	cmp	r5, #0
 8003534:	4607      	mov	r7, r0
 8003536:	db01      	blt.n	800353c <_malloc_r+0x1c>
 8003538:	42a9      	cmp	r1, r5
 800353a:	d905      	bls.n	8003548 <_malloc_r+0x28>
 800353c:	230c      	movs	r3, #12
 800353e:	2600      	movs	r6, #0
 8003540:	603b      	str	r3, [r7, #0]
 8003542:	4630      	mov	r0, r6
 8003544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003548:	4e2e      	ldr	r6, [pc, #184]	; (8003604 <_malloc_r+0xe4>)
 800354a:	f000 f89d 	bl	8003688 <__malloc_lock>
 800354e:	6833      	ldr	r3, [r6, #0]
 8003550:	461c      	mov	r4, r3
 8003552:	bb34      	cbnz	r4, 80035a2 <_malloc_r+0x82>
 8003554:	4629      	mov	r1, r5
 8003556:	4638      	mov	r0, r7
 8003558:	f7ff ffc2 	bl	80034e0 <sbrk_aligned>
 800355c:	1c43      	adds	r3, r0, #1
 800355e:	4604      	mov	r4, r0
 8003560:	d14d      	bne.n	80035fe <_malloc_r+0xde>
 8003562:	6834      	ldr	r4, [r6, #0]
 8003564:	4626      	mov	r6, r4
 8003566:	2e00      	cmp	r6, #0
 8003568:	d140      	bne.n	80035ec <_malloc_r+0xcc>
 800356a:	6823      	ldr	r3, [r4, #0]
 800356c:	4631      	mov	r1, r6
 800356e:	4638      	mov	r0, r7
 8003570:	eb04 0803 	add.w	r8, r4, r3
 8003574:	f000 f878 	bl	8003668 <_sbrk_r>
 8003578:	4580      	cmp	r8, r0
 800357a:	d13a      	bne.n	80035f2 <_malloc_r+0xd2>
 800357c:	6821      	ldr	r1, [r4, #0]
 800357e:	3503      	adds	r5, #3
 8003580:	1a6d      	subs	r5, r5, r1
 8003582:	f025 0503 	bic.w	r5, r5, #3
 8003586:	3508      	adds	r5, #8
 8003588:	2d0c      	cmp	r5, #12
 800358a:	bf38      	it	cc
 800358c:	250c      	movcc	r5, #12
 800358e:	4638      	mov	r0, r7
 8003590:	4629      	mov	r1, r5
 8003592:	f7ff ffa5 	bl	80034e0 <sbrk_aligned>
 8003596:	3001      	adds	r0, #1
 8003598:	d02b      	beq.n	80035f2 <_malloc_r+0xd2>
 800359a:	6823      	ldr	r3, [r4, #0]
 800359c:	442b      	add	r3, r5
 800359e:	6023      	str	r3, [r4, #0]
 80035a0:	e00e      	b.n	80035c0 <_malloc_r+0xa0>
 80035a2:	6822      	ldr	r2, [r4, #0]
 80035a4:	1b52      	subs	r2, r2, r5
 80035a6:	d41e      	bmi.n	80035e6 <_malloc_r+0xc6>
 80035a8:	2a0b      	cmp	r2, #11
 80035aa:	d916      	bls.n	80035da <_malloc_r+0xba>
 80035ac:	1961      	adds	r1, r4, r5
 80035ae:	42a3      	cmp	r3, r4
 80035b0:	6025      	str	r5, [r4, #0]
 80035b2:	bf18      	it	ne
 80035b4:	6059      	strne	r1, [r3, #4]
 80035b6:	6863      	ldr	r3, [r4, #4]
 80035b8:	bf08      	it	eq
 80035ba:	6031      	streq	r1, [r6, #0]
 80035bc:	5162      	str	r2, [r4, r5]
 80035be:	604b      	str	r3, [r1, #4]
 80035c0:	4638      	mov	r0, r7
 80035c2:	f104 060b 	add.w	r6, r4, #11
 80035c6:	f000 f865 	bl	8003694 <__malloc_unlock>
 80035ca:	f026 0607 	bic.w	r6, r6, #7
 80035ce:	1d23      	adds	r3, r4, #4
 80035d0:	1af2      	subs	r2, r6, r3
 80035d2:	d0b6      	beq.n	8003542 <_malloc_r+0x22>
 80035d4:	1b9b      	subs	r3, r3, r6
 80035d6:	50a3      	str	r3, [r4, r2]
 80035d8:	e7b3      	b.n	8003542 <_malloc_r+0x22>
 80035da:	6862      	ldr	r2, [r4, #4]
 80035dc:	42a3      	cmp	r3, r4
 80035de:	bf0c      	ite	eq
 80035e0:	6032      	streq	r2, [r6, #0]
 80035e2:	605a      	strne	r2, [r3, #4]
 80035e4:	e7ec      	b.n	80035c0 <_malloc_r+0xa0>
 80035e6:	4623      	mov	r3, r4
 80035e8:	6864      	ldr	r4, [r4, #4]
 80035ea:	e7b2      	b.n	8003552 <_malloc_r+0x32>
 80035ec:	4634      	mov	r4, r6
 80035ee:	6876      	ldr	r6, [r6, #4]
 80035f0:	e7b9      	b.n	8003566 <_malloc_r+0x46>
 80035f2:	230c      	movs	r3, #12
 80035f4:	4638      	mov	r0, r7
 80035f6:	603b      	str	r3, [r7, #0]
 80035f8:	f000 f84c 	bl	8003694 <__malloc_unlock>
 80035fc:	e7a1      	b.n	8003542 <_malloc_r+0x22>
 80035fe:	6025      	str	r5, [r4, #0]
 8003600:	e7de      	b.n	80035c0 <_malloc_r+0xa0>
 8003602:	bf00      	nop
 8003604:	200001f0 	.word	0x200001f0

08003608 <_realloc_r>:
 8003608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800360c:	4680      	mov	r8, r0
 800360e:	4614      	mov	r4, r2
 8003610:	460e      	mov	r6, r1
 8003612:	b921      	cbnz	r1, 800361e <_realloc_r+0x16>
 8003614:	4611      	mov	r1, r2
 8003616:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800361a:	f7ff bf81 	b.w	8003520 <_malloc_r>
 800361e:	b92a      	cbnz	r2, 800362c <_realloc_r+0x24>
 8003620:	f7ff ff16 	bl	8003450 <_free_r>
 8003624:	4625      	mov	r5, r4
 8003626:	4628      	mov	r0, r5
 8003628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800362c:	f000 f838 	bl	80036a0 <_malloc_usable_size_r>
 8003630:	4284      	cmp	r4, r0
 8003632:	4607      	mov	r7, r0
 8003634:	d802      	bhi.n	800363c <_realloc_r+0x34>
 8003636:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800363a:	d812      	bhi.n	8003662 <_realloc_r+0x5a>
 800363c:	4621      	mov	r1, r4
 800363e:	4640      	mov	r0, r8
 8003640:	f7ff ff6e 	bl	8003520 <_malloc_r>
 8003644:	4605      	mov	r5, r0
 8003646:	2800      	cmp	r0, #0
 8003648:	d0ed      	beq.n	8003626 <_realloc_r+0x1e>
 800364a:	42bc      	cmp	r4, r7
 800364c:	4622      	mov	r2, r4
 800364e:	4631      	mov	r1, r6
 8003650:	bf28      	it	cs
 8003652:	463a      	movcs	r2, r7
 8003654:	f7ff fed4 	bl	8003400 <memcpy>
 8003658:	4631      	mov	r1, r6
 800365a:	4640      	mov	r0, r8
 800365c:	f7ff fef8 	bl	8003450 <_free_r>
 8003660:	e7e1      	b.n	8003626 <_realloc_r+0x1e>
 8003662:	4635      	mov	r5, r6
 8003664:	e7df      	b.n	8003626 <_realloc_r+0x1e>
	...

08003668 <_sbrk_r>:
 8003668:	b538      	push	{r3, r4, r5, lr}
 800366a:	2300      	movs	r3, #0
 800366c:	4d05      	ldr	r5, [pc, #20]	; (8003684 <_sbrk_r+0x1c>)
 800366e:	4604      	mov	r4, r0
 8003670:	4608      	mov	r0, r1
 8003672:	602b      	str	r3, [r5, #0]
 8003674:	f7fd f8cc 	bl	8000810 <_sbrk>
 8003678:	1c43      	adds	r3, r0, #1
 800367a:	d102      	bne.n	8003682 <_sbrk_r+0x1a>
 800367c:	682b      	ldr	r3, [r5, #0]
 800367e:	b103      	cbz	r3, 8003682 <_sbrk_r+0x1a>
 8003680:	6023      	str	r3, [r4, #0]
 8003682:	bd38      	pop	{r3, r4, r5, pc}
 8003684:	200001f8 	.word	0x200001f8

08003688 <__malloc_lock>:
 8003688:	4801      	ldr	r0, [pc, #4]	; (8003690 <__malloc_lock+0x8>)
 800368a:	f000 b811 	b.w	80036b0 <__retarget_lock_acquire_recursive>
 800368e:	bf00      	nop
 8003690:	200001fc 	.word	0x200001fc

08003694 <__malloc_unlock>:
 8003694:	4801      	ldr	r0, [pc, #4]	; (800369c <__malloc_unlock+0x8>)
 8003696:	f000 b80c 	b.w	80036b2 <__retarget_lock_release_recursive>
 800369a:	bf00      	nop
 800369c:	200001fc 	.word	0x200001fc

080036a0 <_malloc_usable_size_r>:
 80036a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80036a4:	1f18      	subs	r0, r3, #4
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	bfbc      	itt	lt
 80036aa:	580b      	ldrlt	r3, [r1, r0]
 80036ac:	18c0      	addlt	r0, r0, r3
 80036ae:	4770      	bx	lr

080036b0 <__retarget_lock_acquire_recursive>:
 80036b0:	4770      	bx	lr

080036b2 <__retarget_lock_release_recursive>:
 80036b2:	4770      	bx	lr

080036b4 <_init>:
 80036b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036b6:	bf00      	nop
 80036b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036ba:	bc08      	pop	{r3}
 80036bc:	469e      	mov	lr, r3
 80036be:	4770      	bx	lr

080036c0 <_fini>:
 80036c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036c2:	bf00      	nop
 80036c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036c6:	bc08      	pop	{r3}
 80036c8:	469e      	mov	lr, r3
 80036ca:	4770      	bx	lr
